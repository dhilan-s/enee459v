
gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e0  0800c1e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e0  0800c1e0  0001c1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1e8  0800c1e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1e8  0800c1e8  0001c1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1ec  0800c1ec  0001c1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c1f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000074  0800c264  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009cc  0800c264  000209cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038455  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005851  00000000  00000000  000584f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029f0  00000000  00000000  0005dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002788  00000000  00000000  00060740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034bf2  00000000  00000000  00062ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f306  00000000  00000000  00097aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012f69d  00000000  00000000  000c6dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f645d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b994  00000000  00000000  001f64b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800be98 	.word	0x0800be98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	0800be98 	.word	0x0800be98

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HCI_TL_SPI_Init+0x88>)
 80005ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <HCI_TL_SPI_Init+0x88>)
 80005b2:	f043 0301 	orr.w	r3, r3, #1
 80005b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HCI_TL_SPI_Init+0x88>)
 80005ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	4815      	ldr	r0, [pc, #84]	; (8000630 <HCI_TL_SPI_Init+0x8c>)
 80005da:	f004 fb77 	bl	8004ccc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	4619      	mov	r1, r3
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f004 fb67 	bl	8004ccc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 8000618:	f004 fb58 	bl	8004ccc <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800061c:	f002 f95e 	bl	80028dc <BSP_SPI3_Init>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	48001000 	.word	0x48001000
 8000634:	48000c00 	.word	0x48000c00

08000638 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <HCI_TL_SPI_DeInit+0x28>)
 8000640:	f004 fcd6 	bl	8004ff0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <HCI_TL_SPI_DeInit+0x2c>)
 800064a:	f004 fcd1 	bl	8004ff0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000656:	f004 fccb 	bl	8004ff0 <HAL_GPIO_DeInit>
  return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	48001000 	.word	0x48001000
 8000664:	48000c00 	.word	0x48000c00

08000668 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <HCI_TL_SPI_Reset+0x40>)
 8000674:	f004 fdc6 	bl	8005204 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f004 fdbf 	bl	8005204 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000686:	2005      	movs	r0, #5
 8000688:	f003 f966 	bl	8003958 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f004 fdb5 	bl	8005204 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800069a:	2005      	movs	r0, #5
 800069c:	f003 f95c 	bl	8003958 <HAL_Delay>
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	48000c00 	.word	0x48000c00

080006ac <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80006bc:	23ff      	movs	r3, #255	; 0xff
 80006be:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006c0:	4a26      	ldr	r2, [pc, #152]	; (800075c <HCI_TL_SPI_Receive+0xb0>)
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	4822      	ldr	r0, [pc, #136]	; (8000760 <HCI_TL_SPI_Receive+0xb4>)
 80006d8:	f004 fd94 	bl	8005204 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	2205      	movs	r2, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 f928 	bl	800293c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80006ec:	7b3b      	ldrb	r3, [r7, #12]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d129      	bne.n	8000746 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006f2:	7c3b      	ldrb	r3, [r7, #16]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000702:	8bfb      	ldrh	r3, [r7, #30]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01e      	beq.n	8000746 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000708:	8bfa      	ldrh	r2, [r7, #30]
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	429a      	cmp	r2, r3
 800070e:	d901      	bls.n	8000714 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000714:	2300      	movs	r3, #0
 8000716:	777b      	strb	r3, [r7, #29]
 8000718:	e010      	b.n	800073c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800071a:	f107 011b 	add.w	r1, r7, #27
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2201      	movs	r2, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f909 	bl	800293c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800072a:	7f7b      	ldrb	r3, [r7, #29]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	7efa      	ldrb	r2, [r7, #27]
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000736:	7f7b      	ldrb	r3, [r7, #29]
 8000738:	3301      	adds	r3, #1
 800073a:	777b      	strb	r3, [r7, #29]
 800073c:	7f7b      	ldrb	r3, [r7, #29]
 800073e:	b29b      	uxth	r3, r3
 8000740:	8bfa      	ldrh	r2, [r7, #30]
 8000742:	429a      	cmp	r2, r3
 8000744:	d8e9      	bhi.n	800071a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <HCI_TL_SPI_Receive+0xb4>)
 800074e:	f004 fd59 	bl	8005204 <HAL_GPIO_WritePin>

  return len;
 8000752:	7f7b      	ldrb	r3, [r7, #29]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	0800beb0 	.word	0x0800beb0
 8000760:	48000c00 	.word	0x48000c00

08000764 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <HCI_TL_SPI_Send+0xa0>)
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077a:	6018      	str	r0, [r3, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000780:	f003 f8de 	bl	8003940 <HAL_GetTick>
 8000784:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	481d      	ldr	r0, [pc, #116]	; (8000808 <HCI_TL_SPI_Send+0xa4>)
 8000792:	f004 fd37 	bl	8005204 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000796:	f107 0108 	add.w	r1, r7, #8
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2205      	movs	r2, #5
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 f8cb 	bl	800293c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80007a6:	7a3b      	ldrb	r3, [r7, #8]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d10f      	bne.n	80007cc <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80007ac:	7a7b      	ldrb	r3, [r7, #9]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	887a      	ldrh	r2, [r7, #2]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d806      	bhi.n	80007c4 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80007b6:	887b      	ldrh	r3, [r7, #2]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4914      	ldr	r1, [pc, #80]	; (800080c <HCI_TL_SPI_Send+0xa8>)
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f002 f8bd 	bl	800293c <BSP_SPI3_SendRecv>
 80007c2:	e006      	b.n	80007d2 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80007c4:	f06f 0301 	mvn.w	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	e002      	b.n	80007d2 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <HCI_TL_SPI_Send+0xa4>)
 80007da:	f004 fd13 	bl	8005204 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007de:	f003 f8af 	bl	8003940 <HAL_GetTick>
 80007e2:	4602      	mov	r2, r0
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d903      	bls.n	80007f4 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007ec:	f06f 0302 	mvn.w	r3, #2
 80007f0:	61fb      	str	r3, [r7, #28]
      break;
 80007f2:	e002      	b.n	80007fa <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	dbc5      	blt.n	8000786 <HCI_TL_SPI_Send+0x22>

  return result;
 80007fa:	69fb      	ldr	r3, [r7, #28]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	0800beb8 	.word	0x0800beb8
 8000808:	48000c00 	.word	0x48000c00
 800080c:	20000098 	.word	0x20000098

08000810 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000814:	2140      	movs	r1, #64	; 0x40
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <IsDataAvailable+0x1c>)
 8000818:	f004 fcdc 	bl	80051d4 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	bf0c      	ite	eq
 8000822:	2301      	moveq	r3, #1
 8000824:	2300      	movne	r3, #0
 8000826:	b2db      	uxtb	r3, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48001000 	.word	0x48001000

08000830 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <hci_tl_lowlevel_init+0x50>)
 8000838:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <hci_tl_lowlevel_init+0x54>)
 800083c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <hci_tl_lowlevel_init+0x58>)
 8000840:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <hci_tl_lowlevel_init+0x5c>)
 8000844:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <hci_tl_lowlevel_init+0x60>)
 8000848:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <hci_tl_lowlevel_init+0x64>)
 800084c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f009 ffa1 	bl	800a798 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8000856:	4910      	ldr	r1, [pc, #64]	; (8000898 <hci_tl_lowlevel_init+0x68>)
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <hci_tl_lowlevel_init+0x6c>)
 800085a:	f004 f9f3 	bl	8004c44 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <hci_tl_lowlevel_init+0x70>)
 8000860:	2100      	movs	r1, #0
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <hci_tl_lowlevel_init+0x6c>)
 8000864:	f004 f9d4 	bl	8004c10 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2017      	movs	r0, #23
 800086e:	f004 f87e 	bl	800496e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000872:	2017      	movs	r0, #23
 8000874:	f004 f897 	bl	80049a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	080005a5 	.word	0x080005a5
 8000884:	08000639 	.word	0x08000639
 8000888:	08000765 	.word	0x08000765
 800088c:	080006ad 	.word	0x080006ad
 8000890:	08000669 	.word	0x08000669
 8000894:	08000eb1 	.word	0x08000eb1
 8000898:	16000006 	.word	0x16000006
 800089c:	20000090 	.word	0x20000090
 80008a0:	080008a5 	.word	0x080008a5

080008a4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80008a8:	e005      	b.n	80008b6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80008aa:	2000      	movs	r0, #0
 80008ac:	f00a f8da 	bl	800aa64 <hci_notify_asynch_evt>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d105      	bne.n	80008c2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80008b6:	f7ff ffab 	bl	8000810 <IsDataAvailable>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f4      	bne.n	80008aa <hci_tl_lowlevel_isr+0x6>
 80008c0:	e000      	b.n	80008c4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008c2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008e0:	4a2a      	ldr	r2, [pc, #168]	; (800098c <MX_ADC1_Init+0xc4>)
 80008e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_ADC1_Init+0xc0>)
 80008fe:	2204      	movs	r2, #4
 8000900:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000910:	2201      	movs	r2, #1
 8000912:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000916:	2200      	movs	r2, #0
 8000918:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000940:	2204      	movs	r2, #4
 8000942:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	4810      	ldr	r0, [pc, #64]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000946:	f003 f9cb 	bl	8003ce0 <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000950:	f000 ff54 	bl	80017fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ADC1_Init+0xc8>)
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2306      	movs	r3, #6
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000960:	237f      	movs	r3, #127	; 0x7f
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000964:	2304      	movs	r3, #4
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_ADC1_Init+0xc0>)
 8000972:	f003 fb01 	bl	8003f78 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800097c:	f000 ff3e 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000198 	.word	0x20000198
 800098c:	50040000 	.word	0x50040000
 8000990:	04300002 	.word	0x04300002

08000994 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <HAL_ADC_MspInit+0x74>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d123      	bne.n	80009fe <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_ADC_MspInit+0x78>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009e6:	233f      	movs	r3, #63	; 0x3f
 80009e8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009ea:	230b      	movs	r3, #11
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_ADC_MspInit+0x7c>)
 80009fa:	f004 f967 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	50040000 	.word	0x50040000
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000800 	.word	0x48000800

08000a14 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a1a:	4a6f      	ldr	r2, [pc, #444]	; (8000bd8 <MX_BlueNRG_MS_Init+0x1c4>)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a24:	6018      	str	r0, [r3, #0]
 8000a26:	3304      	adds	r3, #4
 8000a28:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a2a:	4a6c      	ldr	r2, [pc, #432]	; (8000bdc <MX_BlueNRG_MS_Init+0x1c8>)
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a34:	6018      	str	r0, [r3, #0]
 8000a36:	3304      	adds	r3, #4
 8000a38:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000a3a:	f000 f8f3 	bl	8000c24 <User_Init>

  /* Get the User Button initial state */
  //user_button_init_state = BSP_PB_GetState(BUTTON_KEY);

  hci_init(user_notify, NULL);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4867      	ldr	r0, [pc, #412]	; (8000be0 <MX_BlueNRG_MS_Init+0x1cc>)
 8000a42:	f009 fe67 	bl	800a714 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000a46:	1cba      	adds	r2, r7, #2
 8000a48:	1d7b      	adds	r3, r7, #5
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f009 fcd5 	bl	800a3fc <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000a52:	f009 fd17 	bl	800a484 <hci_reset>

  HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f002 ff7e 	bl	8003958 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	461a      	mov	r2, r3
 8000a64:	485f      	ldr	r0, [pc, #380]	; (8000be4 <MX_BlueNRG_MS_Init+0x1d0>)
 8000a66:	f00a fc4f 	bl	800b308 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000a6a:	797b      	ldrb	r3, [r7, #5]
 8000a6c:	2b30      	cmp	r3, #48	; 0x30
 8000a6e:	d902      	bls.n	8000a76 <MX_BlueNRG_MS_Init+0x62>
    bnrg_expansion_board = IDB05A1;
 8000a70:	4b5d      	ldr	r3, [pc, #372]	; (8000be8 <MX_BlueNRG_MS_Init+0x1d4>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <MX_BlueNRG_MS_Init+0x1d8>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d109      	bne.n	8000a92 <MX_BlueNRG_MS_Init+0x7e>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	f107 021c 	add.w	r2, r7, #28
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	8019      	strh	r1, [r3, #0]
 8000a90:	e008      	b.n	8000aa4 <MX_BlueNRG_MS_Init+0x90>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	f107 0214 	add.w	r2, r7, #20
 8000a9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a9e:	6018      	str	r0, [r3, #0]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2106      	movs	r1, #6
 8000aac:	2000      	movs	r0, #0
 8000aae:	f009 fc0f 	bl	800a2d0 <aci_hal_write_config_data>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <MX_BlueNRG_MS_Init+0xb0>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000abe:	484c      	ldr	r0, [pc, #304]	; (8000bf0 <MX_BlueNRG_MS_Init+0x1dc>)
 8000ac0:	f00a fc22 	bl	800b308 <iprintf>
  }

  ret = aci_gatt_init();
 8000ac4:	f009 f8af 	bl	8009c26 <aci_gatt_init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <MX_BlueNRG_MS_Init+0xc4>
    printf("GATT_Init failed.\n");
 8000ad2:	4848      	ldr	r0, [pc, #288]	; (8000bf4 <MX_BlueNRG_MS_Init+0x1e0>)
 8000ad4:	f00a fcb4 	bl	800b440 <puts>
  }

  if (BLE_Role == SERVER) {
 8000ad8:	4b44      	ldr	r3, [pc, #272]	; (8000bec <MX_BlueNRG_MS_Init+0x1d8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d11e      	bne.n	8000b1e <MX_BlueNRG_MS_Init+0x10a>
    if (bnrg_expansion_board == IDB05A1) {
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <MX_BlueNRG_MS_Init+0x1d4>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10f      	bne.n	8000b08 <MX_BlueNRG_MS_Init+0xf4>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000ae8:	f107 020a 	add.w	r2, r7, #10
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4613      	mov	r3, r2
 8000af8:	2207      	movs	r2, #7
 8000afa:	2100      	movs	r1, #0
 8000afc:	2001      	movs	r0, #1
 8000afe:	f008 fe63 	bl	80097c8 <aci_gap_init_IDB05A1>
 8000b02:	4603      	mov	r3, r0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
 8000b06:	e028      	b.n	8000b5a <MX_BlueNRG_MS_Init+0x146>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	f107 010a 	add.w	r1, r7, #10
 8000b12:	2001      	movs	r0, #1
 8000b14:	f008 fea8 	bl	8009868 <aci_gap_init_IDB04A1>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1c:	e01d      	b.n	8000b5a <MX_BlueNRG_MS_Init+0x146>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 8000b1e:	4b32      	ldr	r3, [pc, #200]	; (8000be8 <MX_BlueNRG_MS_Init+0x1d4>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d10f      	bne.n	8000b46 <MX_BlueNRG_MS_Init+0x132>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000b26:	f107 020a 	add.w	r2, r7, #10
 8000b2a:	1dbb      	adds	r3, r7, #6
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	2207      	movs	r2, #7
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f008 fe44 	bl	80097c8 <aci_gap_init_IDB05A1>
 8000b40:	4603      	mov	r3, r0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
 8000b44:	e009      	b.n	8000b5a <MX_BlueNRG_MS_Init+0x146>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000b46:	1dbb      	adds	r3, r7, #6
 8000b48:	f107 0208 	add.w	r2, r7, #8
 8000b4c:	f107 010a 	add.w	r1, r7, #10
 8000b50:	2003      	movs	r0, #3
 8000b52:	f008 fe89 	bl	8009868 <aci_gap_init_IDB04A1>
 8000b56:	4603      	mov	r3, r0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d002      	beq.n	8000b66 <MX_BlueNRG_MS_Init+0x152>
    printf("GAP_Init failed.\n");
 8000b60:	4825      	ldr	r0, [pc, #148]	; (8000bf8 <MX_BlueNRG_MS_Init+0x1e4>)
 8000b62:	f00a fc6d 	bl	800b440 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000b66:	2301      	movs	r3, #1
 8000b68:	9303      	str	r3, [sp, #12]
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_BlueNRG_MS_Init+0x1e8>)
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	2310      	movs	r3, #16
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2307      	movs	r3, #7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f008 ffa7 	bl	8009ad0 <aci_gap_set_auth_requirement>
 8000b82:	4603      	mov	r3, r0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <MX_BlueNRG_MS_Init+0x17e>
    printf("BLE Stack Initialized.\n");
 8000b8c:	481c      	ldr	r0, [pc, #112]	; (8000c00 <MX_BlueNRG_MS_Init+0x1ec>)
 8000b8e:	f00a fc57 	bl	800b440 <puts>
  }

  if (BLE_Role == SERVER) {
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_BlueNRG_MS_Init+0x1d8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <MX_BlueNRG_MS_Init+0x1aa>
    printf("SERVER: BLE Stack Initialized\n");
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <MX_BlueNRG_MS_Init+0x1f0>)
 8000b9c:	f00a fc50 	bl	800b440 <puts>
    ret = Add_Sample_Service();
 8000ba0:	f000 fef4 	bl	800198c <Add_Sample_Service>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d103      	bne.n	8000bb6 <MX_BlueNRG_MS_Init+0x1a2>
      printf("Service added successfully.\n");
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <MX_BlueNRG_MS_Init+0x1f4>)
 8000bb0:	f00a fc46 	bl	800b440 <puts>
 8000bb4:	e006      	b.n	8000bc4 <MX_BlueNRG_MS_Init+0x1b0>
    else
      printf("Error while adding service.\n");
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <MX_BlueNRG_MS_Init+0x1f8>)
 8000bb8:	f00a fc42 	bl	800b440 <puts>
 8000bbc:	e002      	b.n	8000bc4 <MX_BlueNRG_MS_Init+0x1b0>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <MX_BlueNRG_MS_Init+0x1fc>)
 8000bc0:	f00a fc3e 	bl	800b440 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f009 fbe7 	bl	800a39a <aci_hal_set_tx_power_level>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	0800bfac 	.word	0x0800bfac
 8000bdc:	0800bfb4 	.word	0x0800bfb4
 8000be0:	08001e79 	.word	0x08001e79
 8000be4:	0800bec0 	.word	0x0800bec0
 8000be8:	20000200 	.word	0x20000200
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	0800bed4 	.word	0x0800bed4
 8000bf4:	0800bef4 	.word	0x0800bef4
 8000bf8:	0800bf08 	.word	0x0800bf08
 8000bfc:	0001e240 	.word	0x0001e240
 8000c00:	0800bf1c 	.word	0x0800bf1c
 8000c04:	0800bf34 	.word	0x0800bf34
 8000c08:	0800bf54 	.word	0x0800bf54
 8000c0c:	0800bf70 	.word	0x0800bf70
 8000c10:	0800bf8c 	.word	0x0800bf8c

08000c14 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000c18:	f000 f80c 	bl	8000c34 <User_Process>
  hci_user_evt_proc();
 8000c1c:	f009 fef6 	bl	800aa0c <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  //BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
  //BSP_LED_Init(LED2);

  //BSP_COM_Init(COM1);
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000c34:	b5b0      	push	{r4, r5, r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
  if (set_connectable)
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <User_Process+0xc8>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <User_Process+0x1a>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8000c44:	f000 ff24 	bl	8001a90 <Make_Connection>
    set_connectable = FALSE;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <User_Process+0xc8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    //user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
  }

  if (BLE_Role == CLIENT)
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <User_Process+0xcc>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d12b      	bne.n	8000cae <User_Process+0x7a>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <User_Process+0xd0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <User_Process+0x3a>
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <User_Process+0xd4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <User_Process+0x3a>
      startReadTXCharHandle();
 8000c68:	f000 ff7a 	bl	8001b60 <startReadTXCharHandle>
 8000c6c:	e00a      	b.n	8000c84 <User_Process+0x50>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <User_Process+0xd0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <User_Process+0x50>
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <User_Process+0xd8>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <User_Process+0x50>
      startReadRXCharHandle();
 8000c80:	f000 ff94 	bl	8001bac <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <User_Process+0xd0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d010      	beq.n	8000cae <User_Process+0x7a>
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <User_Process+0xd4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <User_Process+0x7a>
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <User_Process+0xd8>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <User_Process+0x7a>
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <User_Process+0xdc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <User_Process+0x7a>
    {
      //BSP_LED_Off(LED2); //end of the connection and chars discovery phase
      enableNotification();
 8000caa:	f001 f803 	bl	8001cb4 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <User_Process+0xe0>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d01d      	beq.n	8000cf4 <User_Process+0xc0>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000cb8:	2032      	movs	r0, #50	; 0x32
 8000cba:	f002 fe4d 	bl	8003958 <HAL_Delay>

    /* Wait until the User Button is released */
    //while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f002 fe4a 	bl	8003958 <HAL_Delay>

    if (connected && notification_enabled)
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <User_Process+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d010      	beq.n	8000cee <User_Process+0xba>
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <User_Process+0xdc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <User_Process+0xba>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <User_Process+0xe4>)
 8000cd8:	1d3c      	adds	r4, r7, #4
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2114      	movs	r1, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 ffb3 	bl	8001c54 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <User_Process+0xe0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfc:	20000001 	.word	0x20000001
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000380 	.word	0x20000380
 8000d08:	20000389 	.word	0x20000389
 8000d0c:	2000038a 	.word	0x2000038a
 8000d10:	20000386 	.word	0x20000386
 8000d14:	20000201 	.word	0x20000201
 8000d18:	0800bfbc 	.word	0x0800bfbc

08000d1c <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <BSP_I2C2_Init+0x70>)
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <BSP_I2C2_Init+0x74>)
 8000d2a:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <BSP_I2C2_Init+0x78>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	4918      	ldr	r1, [pc, #96]	; (8000d94 <BSP_I2C2_Init+0x78>)
 8000d34:	600a      	str	r2, [r1, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d122      	bne.n	8000d80 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <BSP_I2C2_Init+0x70>)
 8000d3c:	f004 fd7e 	bl	800583c <HAL_I2C_GetState>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d11c      	bne.n	8000d80 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <BSP_I2C2_Init+0x70>)
 8000d48:	f000 f8fe 	bl	8000f48 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d116      	bne.n	8000d80 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <BSP_I2C2_Init+0x70>)
 8000d54:	f000 f8b4 	bl	8000ec0 <MX_I2C2_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d5e:	f06f 0307 	mvn.w	r3, #7
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	e00c      	b.n	8000d80 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <BSP_I2C2_Init+0x70>)
 8000d6a:	f005 f827 	bl	8005dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000d74:	f06f 0307 	mvn.w	r3, #7
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e001      	b.n	8000d80 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000204 	.word	0x20000204
 8000d90:	40005800 	.word	0x40005800
 8000d94:	20000258 	.word	0x20000258

08000d98 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <BSP_I2C2_DeInit+0x48>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <BSP_I2C2_DeInit+0x48>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <BSP_I2C2_DeInit+0x48>)
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <BSP_I2C2_DeInit+0x48>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10b      	bne.n	8000dd4 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <BSP_I2C2_DeInit+0x4c>)
 8000dbe:	f000 f92b 	bl	8001018 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <BSP_I2C2_DeInit+0x4c>)
 8000dc4:	f004 fadd 	bl	8005382 <HAL_I2C_DeInit>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000dce:	f06f 0307 	mvn.w	r3, #7
 8000dd2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000dd4:	687b      	ldr	r3, [r7, #4]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000258 	.word	0x20000258
 8000de4:	20000204 	.word	0x20000204

08000de8 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	81fb      	strh	r3, [r7, #14]
 8000df6:	460b      	mov	r3, r1
 8000df8:	81bb      	strh	r3, [r7, #12]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000e02:	89ba      	ldrh	r2, [r7, #12]
 8000e04:	89f9      	ldrh	r1, [r7, #14]
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	2301      	movs	r3, #1
 8000e16:	480c      	ldr	r0, [pc, #48]	; (8000e48 <BSP_I2C2_WriteReg+0x60>)
 8000e18:	f004 fae2 	bl	80053e0 <HAL_I2C_Mem_Write>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00c      	beq.n	8000e3c <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <BSP_I2C2_WriteReg+0x60>)
 8000e24:	f004 fd18 	bl	8005858 <HAL_I2C_GetError>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d103      	bne.n	8000e36 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e2e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e002      	b.n	8000e3c <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000e36:	f06f 0303 	mvn.w	r3, #3
 8000e3a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000e3c:	697b      	ldr	r3, [r7, #20]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000204 	.word	0x20000204

08000e4c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	60ba      	str	r2, [r7, #8]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	81fb      	strh	r3, [r7, #14]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	81bb      	strh	r3, [r7, #12]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000e66:	89ba      	ldrh	r2, [r7, #12]
 8000e68:	89f9      	ldrh	r1, [r7, #14]
 8000e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6e:	9302      	str	r3, [sp, #8]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <BSP_I2C2_ReadReg+0x60>)
 8000e7c:	f004 fbc4 	bl	8005608 <HAL_I2C_Mem_Read>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00c      	beq.n	8000ea0 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <BSP_I2C2_ReadReg+0x60>)
 8000e88:	f004 fce6 	bl	8005858 <HAL_I2C_GetError>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d103      	bne.n	8000e9a <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000e92:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	e002      	b.n	8000ea0 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000e9a:	f06f 0303 	mvn.w	r3, #3
 8000e9e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000ea0:	697b      	ldr	r3, [r7, #20]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000204 	.word	0x20000204

08000eb0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000eb4:	f002 fd44 	bl	8003940 <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_I2C2_Init+0x80>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <MX_I2C2_Init+0x84>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f004 f9ae 	bl	8005264 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f004 ff51 	bl	8005dbc <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f004 ff93 	bl	8005e52 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40005800 	.word	0x40005800
 8000f44:	307075b1 	.word	0x307075b1

08000f48 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	; 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	2294      	movs	r2, #148	; 0x94
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00a f8ec 	bl	800b136 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fc40 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <I2C2_MspInit+0xc8>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	4a26      	ldr	r2, [pc, #152]	; (8001010 <I2C2_MspInit+0xc8>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7c:	4b24      	ldr	r3, [pc, #144]	; (8001010 <I2C2_MspInit+0xc8>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8000f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f90:	2312      	movs	r3, #18
 8000f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <I2C2_MspInit+0xcc>)
 8000fb0:	f003 fe8c 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8000fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000fd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <I2C2_MspInit+0xcc>)
 8000fdc:	f003 fe76 	bl	8004ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <I2C2_MspInit+0xc8>)
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <I2C2_MspInit+0xc8>)
 8000fe6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fea:	6593      	str	r3, [r2, #88]	; 0x58
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <I2C2_MspInit+0xc8>)
 8000fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2021      	movs	r0, #33	; 0x21
 8000ffe:	f003 fcb6 	bl	800496e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001002:	2021      	movs	r0, #33	; 0x21
 8001004:	f003 fccf 	bl	80049a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	37b8      	adds	r7, #184	; 0xb8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	48000400 	.word	0x48000400

08001018 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <I2C2_MspDeInit+0x38>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <I2C2_MspDeInit+0x38>)
 8001026:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800102a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <I2C2_MspDeInit+0x3c>)
 8001032:	f003 ffdd 	bl	8004ff0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <I2C2_MspDeInit+0x3c>)
 800103c:	f003 ffd8 	bl	8004ff0 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001040:	2021      	movs	r0, #33	; 0x21
 8001042:	f003 fcbe 	bl	80049c2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	48000400 	.word	0x48000400

08001058 <MX_DFSDM1_Init>:

DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <MX_DFSDM1_Init+0x6c>)
 8001060:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001064:	2201      	movs	r2, #1
 8001066:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001070:	2202      	movs	r2, #2
 8001072:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 800108e:	2204      	movs	r2, #4
 8001090:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 800109a:	2201      	movs	r2, #1
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_DFSDM1_Init+0x68>)
 80010ac:	f003 fca4 	bl	80049f8 <HAL_DFSDM_ChannelInit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80010b6:	f000 fba1 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000025c 	.word	0x2000025c
 80010c4:	40016040 	.word	0x40016040

080010c8 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ae      	sub	sp, #184	; 0xb8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2294      	movs	r2, #148	; 0x94
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00a f824 	bl	800b136 <memset>
  if(DFSDM1_Init == 0)
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d142      	bne.n	800117c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4618      	mov	r0, r3
 8001108:	f006 fb72 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001112:	f000 fb73 	bl	80017fc <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001116:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800111c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001120:	6613      	str	r3, [r2, #96]	; 0x60
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001126:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001146:	f44f 7320 	mov.w	r3, #640	; 0x280
 800114a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001160:	2306      	movs	r3, #6
 8001162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800116e:	f003 fdad 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a02      	ldr	r2, [pc, #8]	; (8001184 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800117a:	6013      	str	r3, [r2, #0]
  }
}
 800117c:	bf00      	nop
 800117e:	37b8      	adds	r7, #184	; 0xb8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000294 	.word	0x20000294
 8001188:	40021000 	.word	0x40021000
 800118c:	48001000 	.word	0x48001000

08001190 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	4b96      	ldr	r3, [pc, #600]	; (8001400 <MX_GPIO_Init+0x270>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a95      	ldr	r2, [pc, #596]	; (8001400 <MX_GPIO_Init+0x270>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b93      	ldr	r3, [pc, #588]	; (8001400 <MX_GPIO_Init+0x270>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b90      	ldr	r3, [pc, #576]	; (8001400 <MX_GPIO_Init+0x270>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	4a8f      	ldr	r2, [pc, #572]	; (8001400 <MX_GPIO_Init+0x270>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ca:	4b8d      	ldr	r3, [pc, #564]	; (8001400 <MX_GPIO_Init+0x270>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b8a      	ldr	r3, [pc, #552]	; (8001400 <MX_GPIO_Init+0x270>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <MX_GPIO_Init+0x270>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e2:	4b87      	ldr	r3, [pc, #540]	; (8001400 <MX_GPIO_Init+0x270>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b84      	ldr	r3, [pc, #528]	; (8001400 <MX_GPIO_Init+0x270>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	4a83      	ldr	r2, [pc, #524]	; (8001400 <MX_GPIO_Init+0x270>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fa:	4b81      	ldr	r3, [pc, #516]	; (8001400 <MX_GPIO_Init+0x270>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <MX_GPIO_Init+0x270>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a7d      	ldr	r2, [pc, #500]	; (8001400 <MX_GPIO_Init+0x270>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <MX_GPIO_Init+0x270>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b78      	ldr	r3, [pc, #480]	; (8001400 <MX_GPIO_Init+0x270>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a77      	ldr	r2, [pc, #476]	; (8001400 <MX_GPIO_Init+0x270>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b75      	ldr	r3, [pc, #468]	; (8001400 <MX_GPIO_Init+0x270>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f240 1105 	movw	r1, #261	; 0x105
 800123c:	4871      	ldr	r0, [pc, #452]	; (8001404 <MX_GPIO_Init+0x274>)
 800123e:	f003 ffe1 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001242:	2200      	movs	r2, #0
 8001244:	f248 111c 	movw	r1, #33052	; 0x811c
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f003 ffda 	bl	8005204 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001250:	2200      	movs	r2, #0
 8001252:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001256:	486c      	ldr	r0, [pc, #432]	; (8001408 <MX_GPIO_Init+0x278>)
 8001258:	f003 ffd4 	bl	8005204 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f242 0183 	movw	r1, #8323	; 0x2083
 8001262:	486a      	ldr	r0, [pc, #424]	; (800140c <MX_GPIO_Init+0x27c>)
 8001264:	f003 ffce 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800126e:	4868      	ldr	r0, [pc, #416]	; (8001410 <MX_GPIO_Init+0x280>)
 8001270:	f003 ffc8 	bl	8005204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001274:	f240 1305 	movw	r3, #261	; 0x105
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	485d      	ldr	r0, [pc, #372]	; (8001404 <MX_GPIO_Init+0x274>)
 800128e:	f003 fd1d 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001292:	237a      	movs	r3, #122	; 0x7a
 8001294:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4857      	ldr	r0, [pc, #348]	; (8001404 <MX_GPIO_Init+0x274>)
 80012a8:	f003 fd10 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80012ac:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4853      	ldr	r0, [pc, #332]	; (8001410 <MX_GPIO_Init+0x280>)
 80012c4:	f003 fd02 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80012c8:	f248 131c 	movw	r3, #33052	; 0x811c
 80012cc:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f003 fcf2 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4842      	ldr	r0, [pc, #264]	; (8001408 <MX_GPIO_Init+0x278>)
 80012fe:	f003 fce5 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001302:	2302      	movs	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001312:	2302      	movs	r3, #2
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	483a      	ldr	r0, [pc, #232]	; (8001408 <MX_GPIO_Init+0x278>)
 800131e:	f003 fcd5 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001322:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001326:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4833      	ldr	r0, [pc, #204]	; (8001408 <MX_GPIO_Init+0x278>)
 800133c:	f003 fcc6 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001340:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001344:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001346:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	482d      	ldr	r0, [pc, #180]	; (800140c <MX_GPIO_Init+0x27c>)
 8001358:	f003 fcb8 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800135c:	f242 0383 	movw	r3, #8323	; 0x2083
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4825      	ldr	r0, [pc, #148]	; (800140c <MX_GPIO_Init+0x27c>)
 8001376:	f003 fca9 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800137a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	481f      	ldr	r0, [pc, #124]	; (8001410 <MX_GPIO_Init+0x280>)
 8001394:	f003 fc9a 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f003 fc8c 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013c6:	230a      	movs	r3, #10
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f003 fc7a 	bl	8004ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2017      	movs	r0, #23
 80013de:	f003 fac6 	bl	800496e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e2:	2017      	movs	r0, #23
 80013e4:	f003 fadf 	bl	80049a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	2028      	movs	r0, #40	; 0x28
 80013ee:	f003 fabe 	bl	800496e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f2:	2028      	movs	r0, #40	; 0x28
 80013f4:	f003 fad7 	bl	80049a6 <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	48001000 	.word	0x48001000
 8001408:	48000400 	.word	0x48000400
 800140c:	48000c00 	.word	0x48000c00
 8001410:	48000800 	.word	0x48000800

08001414 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_I2C1_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <MX_I2C1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_I2C1_Init+0x74>)
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_I2C1_Init+0x7c>)
 8001422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_I2C1_Init+0x74>)
 800142c:	2201      	movs	r2, #1
 800142e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_I2C1_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <MX_I2C1_Init+0x74>)
 8001450:	f003 ff08 	bl	8005264 <HAL_I2C_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800145a:	f000 f9cf 	bl	80017fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800145e:	2100      	movs	r1, #0
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <MX_I2C1_Init+0x74>)
 8001462:	f004 fcab 	bl	8005dbc <HAL_I2CEx_ConfigAnalogFilter>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800146c:	f000 f9c6 	bl	80017fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001470:	2100      	movs	r1, #0
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_I2C1_Init+0x74>)
 8001474:	f004 fced 	bl	8005e52 <HAL_I2CEx_ConfigDigitalFilter>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800147e:	f000 f9bd 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000298 	.word	0x20000298
 800148c:	40005400 	.word	0x40005400
 8001490:	307075b1 	.word	0x307075b1

08001494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0ae      	sub	sp, #184	; 0xb8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2294      	movs	r2, #148	; 0x94
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f009 fe3e 	bl	800b136 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_I2C_MspInit+0xb0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d13b      	bne.n	800153c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c4:	2340      	movs	r3, #64	; 0x40
 80014c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 f98d 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014dc:	f000 f98e 	bl	80017fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80014f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001512:	2304      	movs	r3, #4
 8001514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800151c:	4619      	mov	r1, r3
 800151e:	480b      	ldr	r0, [pc, #44]	; (800154c <HAL_I2C_MspInit+0xb8>)
 8001520:	f003 fbd4 	bl	8004ccc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6593      	str	r3, [r2, #88]	; 0x58
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_I2C_MspInit+0xb4>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800153c:	bf00      	nop
 800153e:	37b8      	adds	r7, #184	; 0xb8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40021000 	.word	0x40021000
 800154c:	48000400 	.word	0x48000400

08001550 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_I2C_MspDeInit+0x3c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10f      	bne.n	8001582 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_I2C_MspDeInit+0x40>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_I2C_MspDeInit+0x40>)
 8001568:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001572:	4808      	ldr	r0, [pc, #32]	; (8001594 <HAL_I2C_MspDeInit+0x44>)
 8001574:	f003 fd3c 	bl	8004ff0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_I2C_MspDeInit+0x44>)
 800157e:	f003 fd37 	bl	8004ff0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40005400 	.word	0x40005400
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159c:	f002 f967 	bl	800386e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a0:	f000 f824 	bl	80015ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015a4:	f000 f884 	bl	80016b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f7ff fdf2 	bl	8001190 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015ac:	f7ff f98c 	bl	80008c8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80015b0:	f7ff fd52 	bl	8001058 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80015b4:	f7ff ff2e 	bl	8001414 <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 80015b8:	f000 f926 	bl	8001808 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80015bc:	f000 fd68 	bl	8002090 <MX_SPI1_Init>
  MX_UART4_Init();
 80015c0:	f000 fefe 	bl	80023c0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80015c4:	f000 ff48 	bl	8002458 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015c8:	f000 ff92 	bl	80024f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015cc:	f000 ffde 	bl	800258c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80015d0:	f001 f952 	bl	8002878 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <main+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 80015da:	f000 f8af 	bl	800173c <MEMS_Init>
  MX_BlueNRG_MS_Init();
 80015de:	f7ff fa19 	bl	8000a14 <MX_BlueNRG_MS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_BlueNRG_MS_Process();
 80015e2:	f7ff fb17 	bl	8000c14 <MX_BlueNRG_MS_Process>
  {
 80015e6:	e7fc      	b.n	80015e2 <main+0x4a>
 80015e8:	20000324 	.word	0x20000324

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b096      	sub	sp, #88	; 0x58
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2244      	movs	r2, #68	; 0x44
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f009 fd9b 	bl	800b136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800160e:	2000      	movs	r0, #0
 8001610:	f005 f972 	bl	80068f8 <HAL_PWREx_ControlVoltageScaling>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800161a:	f000 f8ef 	bl	80017fc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800161e:	f005 f93b 	bl	8006898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <SystemClock_Config+0xc0>)
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <SystemClock_Config+0xc0>)
 800162a:	f023 0318 	bic.w	r3, r3, #24
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001632:	2314      	movs	r3, #20
 8001634:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001642:	2360      	movs	r3, #96	; 0x60
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800164a:	2301      	movs	r3, #1
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001652:	233c      	movs	r3, #60	; 0x3c
 8001654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001656:	2302      	movs	r3, #2
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4618      	mov	r0, r3
 8001668:	f005 f9ea 	bl	8006a40 <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001672:	f000 f8c3 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2303      	movs	r3, #3
 800167c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	2105      	movs	r1, #5
 800168e:	4618      	mov	r0, r3
 8001690:	f005 fdf0 	bl	8007274 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800169a:	f000 f8af 	bl	80017fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800169e:	f006 fbd7 	bl	8007e50 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016a2:	bf00      	nop
 80016a4:	3758      	adds	r7, #88	; 0x58
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0a6      	sub	sp, #152	; 0x98
 80016b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2294      	movs	r2, #148	; 0x94
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 fd3a 	bl	800b136 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80016c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016d4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016d6:	2301      	movs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016da:	2301      	movs	r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016de:	2318      	movs	r3, #24
 80016e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80016ee:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80016f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f006 f87a 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001702:	f000 f87b 	bl	80017fc <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3798      	adds	r7, #152	; 0x98
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char * ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	b29a      	uxth	r2, r3
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <_write+0x28>)
 8001728:	f007 fa02 	bl	8008b30 <HAL_UART_Transmit>
  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000490 	.word	0x20000490

0800173c <MEMS_Init>:

static void MEMS_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 8001746:	23d5      	movs	r3, #213	; 0xd5
 8001748:	753b      	strb	r3, [r7, #20]
  io_ctx.Init        = BSP_I2C2_Init;
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MEMS_Init+0x7c>)
 800174c:	60bb      	str	r3, [r7, #8]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MEMS_Init+0x80>)
 8001750:	60fb      	str	r3, [r7, #12]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MEMS_Init+0x84>)
 8001754:	61fb      	str	r3, [r7, #28]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MEMS_Init+0x88>)
 8001758:	61bb      	str	r3, [r7, #24]
  io_ctx.GetTick     = BSP_GetTick;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MEMS_Init+0x8c>)
 800175c:	623b      	str	r3, [r7, #32]
  LSM6DSL_RegisterBusIO(&Gyro, &io_ctx);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4619      	mov	r1, r3
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <MEMS_Init+0x90>)
 8001766:	f001 f9a3 	bl	8002ab0 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&Gyro, &id);
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	4619      	mov	r1, r3
 800176e:	4817      	ldr	r0, [pc, #92]	; (80017cc <MEMS_Init+0x90>)
 8001770:	f001 fa71 	bl	8002c56 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b6a      	cmp	r3, #106	; 0x6a
 8001778:	d001      	beq.n	800177e <MEMS_Init+0x42>
    Error_Handler();
 800177a:	f000 f83f 	bl	80017fc <Error_Handler>
  }

  //printf("WHO_AM_I: %5x \r\n", (int)id);
  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&Gyro);
 800177e:	4813      	ldr	r0, [pc, #76]	; (80017cc <MEMS_Init+0x90>)
 8001780:	f001 fa00 	bl	8002b84 <LSM6DSL_Init>

  //LSM6DSL_G(&Gyro, LSM6DSL_2000dps);
  /* Configure the LSM6DSL gyroscope (ODR, scale and interrupt) */
  LSM6DSL_GYRO_SetOutputDataRate(&Gyro, LSM6DSL_GY_ODR_26Hz); /* 26 Hz */
 8001784:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <MEMS_Init+0x90>)
 800178a:	f001 fa9e 	bl	8002cca <LSM6DSL_GYRO_SetOutputDataRate>
  LSM6DSL_GYRO_SetFullScale(&Gyro, 4);          /* [-4000mg; +4000mg] */
 800178e:	2104      	movs	r1, #4
 8001790:	480e      	ldr	r0, [pc, #56]	; (80017cc <MEMS_Init+0x90>)
 8001792:	f001 fab6 	bl	8002d02 <LSM6DSL_GYRO_SetFullScale>
  LSM6DSL_GYRO_Set_INT1_DRDY(&Gyro, ENABLE);    /* Enable DRDY */
 8001796:	2101      	movs	r1, #1
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <MEMS_Init+0x90>)
 800179a:	f001 fb20 	bl	8002dde <LSM6DSL_GYRO_Set_INT1_DRDY>
  LSM6DSL_GYRO_GetAxesRaw(&Gyro, &axes);        /* Clear DRDY */
 800179e:	463b      	mov	r3, r7
 80017a0:	4619      	mov	r1, r3
 80017a2:	480a      	ldr	r0, [pc, #40]	; (80017cc <MEMS_Init+0x90>)
 80017a4:	f001 fadc 	bl	8002d60 <LSM6DSL_GYRO_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_GYRO_Enable(&Gyro);
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <MEMS_Init+0x90>)
 80017aa:	f001 fa6a 	bl	8002c82 <LSM6DSL_GYRO_Enable>
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	08000d1d 	.word	0x08000d1d
 80017bc:	08000d99 	.word	0x08000d99
 80017c0:	08000e4d 	.word	0x08000e4d
 80017c4:	08000de9 	.word	0x08000de9
 80017c8:	08000eb1 	.word	0x08000eb1
 80017cc:	200002ec 	.word	0x200002ec

080017d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017e0:	d104      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x28>)
 80017ea:	6013      	str	r3, [r2, #0]
  }
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20000324 	.word	0x20000324

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <MX_OCTOSPI1_Init+0xa8>)
 8001820:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001824:	2201      	movs	r2, #1
 8001826:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001834:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001838:	2220      	movs	r2, #32
 800183a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800183e:	2201      	movs	r2, #1
 8001840:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001850:	2201      	movs	r2, #1
 8001852:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001868:	2208      	movs	r2, #8
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800186c:	480f      	ldr	r0, [pc, #60]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 800186e:	f004 fb3d 	bl	8005eec <HAL_OSPI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001878:	f7ff ffc0 	bl	80017fc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800187c:	2301      	movs	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001884:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001888:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <MX_OCTOSPI1_Init+0xa4>)
 8001894:	f004 fbe4 	bl	8006060 <HAL_OSPIM_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800189e:	f7ff ffad 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000330 	.word	0x20000330
 80018b0:	a0001000 	.word	0xa0001000

080018b4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0b0      	sub	sp, #192	; 0xc0
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	2294      	movs	r2, #148	; 0x94
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f009 fc2e 	bl	800b136 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_OSPI_MspInit+0xcc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d149      	bne.n	8001978 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80018e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 ff7b 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001900:	f7ff ff7c 	bl	80017fc <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 800190a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800190e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 800191e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001920:	4a18      	ldr	r2, [pc, #96]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001926:	6513      	str	r3, [r2, #80]	; 0x50
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 800192a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_OSPI_MspInit+0xd0>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800194c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001966:	230a      	movs	r3, #10
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_OSPI_MspInit+0xd4>)
 8001974:	f003 f9aa 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8001978:	bf00      	nop
 800197a:	37c0      	adds	r7, #192	; 0xc0
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	a0001000 	.word	0xa0001000
 8001984:	40021000 	.word	0x40021000
 8001988:	48001000 	.word	0x48001000

0800198c <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b09d      	sub	sp, #116	; 0x74
 8001990:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <Add_Sample_Service+0xe4>)
 8001994:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001998:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800199a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <Add_Sample_Service+0xe8>)
 80019a0:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80019a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <Add_Sample_Service+0xec>)
 80019ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80019b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t buttonservice_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe3,0xf2,0x73,0xd9};
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <Add_Sample_Service+0xf0>)
 80019b8:	f107 0414 	add.w	r4, r7, #20
 80019bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t buttonchar_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe4,0xf2,0x73,0xd9};
 80019c2:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <Add_Sample_Service+0xf4>)
 80019c4:	1d3c      	adds	r4, r7, #4
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Main service
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80019cc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <Add_Sample_Service+0xf8>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2307      	movs	r3, #7
 80019d6:	2201      	movs	r2, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f008 f947 	bl	8009c6c <aci_gatt_add_serv>
 80019de:	4603      	mov	r3, r0
 80019e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80019e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d137      	bne.n	8001a5c <Add_Sample_Service+0xd0>
    if (ret != BLE_STATUS_SUCCESS) goto fail;
   *
   */

  // Notify characteristic, used for output (max of 8 bytes)
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <Add_Sample_Service+0xf8>)
 80019ee:	8818      	ldrh	r0, [r3, #0]
 80019f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <Add_Sample_Service+0xfc>)
 80019f6:	9305      	str	r3, [sp, #20]
 80019f8:	2308      	movs	r3, #8
 80019fa:	9304      	str	r3, [sp, #16]
 80019fc:	2310      	movs	r3, #16
 80019fe:	9303      	str	r3, [sp, #12]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2310      	movs	r3, #16
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2314      	movs	r3, #20
 8001a0e:	2102      	movs	r1, #2
 8001a10:	f008 f9b5 	bl	8009d7e <aci_gatt_add_char>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                           16, 8, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11e      	bne.n	8001a60 <Add_Sample_Service+0xd4>

  // Command characteristic, write to this to send commands (max of 7 bytes)
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <Add_Sample_Service+0xf8>)
 8001a24:	8818      	ldrh	r0, [r3, #0]
 8001a26:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <Add_Sample_Service+0x100>)
 8001a2c:	9305      	str	r3, [sp, #20]
 8001a2e:	2307      	movs	r3, #7
 8001a30:	9304      	str	r3, [sp, #16]
 8001a32:	2310      	movs	r3, #16
 8001a34:	9303      	str	r3, [sp, #12]
 8001a36:	2301      	movs	r3, #1
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	230c      	movs	r3, #12
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2314      	movs	r3, #20
 8001a44:	2102      	movs	r1, #2
 8001a46:	f008 f99a 	bl	8009d7e <aci_gatt_add_char>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                           16, 7, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <Add_Sample_Service+0xd8>
  *
  *
  */

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e005      	b.n	8001a68 <Add_Sample_Service+0xdc>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001a5c:	bf00      	nop
 8001a5e:	e002      	b.n	8001a66 <Add_Sample_Service+0xda>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <Add_Sample_Service+0xda>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001a64:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8001a66:	2347      	movs	r3, #71	; 0x47
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	375c      	adds	r7, #92	; 0x5c
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	0800bfd0 	.word	0x0800bfd0
 8001a74:	0800bfe0 	.word	0x0800bfe0
 8001a78:	0800bff0 	.word	0x0800bff0
 8001a7c:	0800c000 	.word	0x0800c000
 8001a80:	0800c010 	.word	0x0800c010
 8001a84:	20000390 	.word	0x20000390
 8001a88:	20000392 	.word	0x20000392
 8001a8c:	20000394 	.word	0x20000394

08001a90 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <Make_Connection+0xbc>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d12f      	bne.n	8001afe <Make_Connection+0x6e>

    printf("Client Create Connection\n");
 8001a9e:	482c      	ldr	r0, [pc, #176]	; (8001b50 <Make_Connection+0xc0>)
 8001aa0:	f009 fcce 	bl	800b440 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001aa4:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <Make_Connection+0xc4>)
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	8019      	strh	r1, [r3, #0]

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001abc:	9206      	str	r2, [sp, #24]
 8001abe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ac2:	9205      	str	r2, [sp, #20]
 8001ac4:	223c      	movs	r2, #60	; 0x3c
 8001ac6:	9204      	str	r2, [sp, #16]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	9203      	str	r2, [sp, #12]
 8001acc:	2228      	movs	r2, #40	; 0x28
 8001ace:	9202      	str	r2, [sp, #8]
 8001ad0:	2228      	movs	r2, #40	; 0x28
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ae2:	f008 f84c 	bl	8009b7e <aci_gap_create_connection>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d029      	beq.n	8001b44 <Make_Connection+0xb4>
      printf("Error while starting connection.\n");
 8001af0:	4819      	ldr	r0, [pc, #100]	; (8001b58 <Make_Connection+0xc8>)
 8001af2:	f009 fca5 	bl	800b440 <puts>
      HAL_Delay(100);
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f001 ff2e 	bl	8003958 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 6, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8001afc:	e022      	b.n	8001b44 <Make_Connection+0xb4>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'H','W','_','1','0'};
 8001afe:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <Make_Connection+0xcc>)
 8001b00:	463b      	mov	r3, r7
 8001b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b06:	6018      	str	r0, [r3, #0]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	8019      	strh	r1, [r3, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f008 fd24 	bl	800a55c <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8001b14:	2300      	movs	r3, #0
 8001b16:	9306      	str	r3, [sp, #24]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9305      	str	r3, [sp, #20]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9304      	str	r3, [sp, #16]
 8001b20:	2300      	movs	r3, #0
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	463b      	mov	r3, r7
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	2306      	movs	r3, #6
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f007 fede 	bl	80098fc <aci_gap_set_discoverable>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	0800c020 	.word	0x0800c020
 8001b54:	0800c060 	.word	0x0800c060
 8001b58:	0800c03c 	.word	0x0800c03c
 8001b5c:	0800c068 	.word	0x0800c068

08001b60 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <startReadTXCharHandle+0x40>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d112      	bne.n	8001b96 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <startReadTXCharHandle+0x44>)
 8001b72:	463c      	mov	r4, r7
 8001b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <startReadTXCharHandle+0x48>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b298      	uxth	r0, r3
 8001b80:	463b      	mov	r3, r7
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2302      	movs	r3, #2
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	f008 fa52 	bl	800a034 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <startReadTXCharHandle+0x40>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
  }
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000387 	.word	0x20000387
 8001ba4:	0800bfe0 	.word	0x0800bfe0
 8001ba8:	20000384 	.word	0x20000384

08001bac <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <startReadRXCharHandle+0x40>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d112      	bne.n	8001be2 <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <startReadRXCharHandle+0x44>)
 8001bbe:	463c      	mov	r4, r7
 8001bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <startReadRXCharHandle+0x48>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b298      	uxth	r0, r3
 8001bcc:	463b      	mov	r3, r7
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	f008 fa2c 	bl	800a034 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <startReadRXCharHandle+0x40>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
  }
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000388 	.word	0x20000388
 8001bf0:	0800bff0 	.word	0x0800bff0
 8001bf4:	20000384 	.word	0x20000384

08001bf8 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  //BSP_LED_Toggle(LED2);

  for(int i = 0; i < Nb_bytes; i++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e012      	b.n	8001c30 <receiveData+0x38>
    printf("%c", data_buffer[i]);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f009 fb90 	bl	800b338 <putchar>
    command[i] = data_buffer[i];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	7819      	ldrb	r1, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <receiveData+0x54>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	460a      	mov	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < Nb_bytes; i++) {
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dbe8      	blt.n	8001c0a <receiveData+0x12>
  }

  fflush(stdout);
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <receiveData+0x58>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f009 f93c 	bl	800aebc <fflush>

}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000328 	.word	0x20000328
 8001c50:	20000010 	.word	0x20000010

08001c54 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <sendData+0x4c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10b      	bne.n	8001c80 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <sendData+0x50>)
 8001c6a:	8818      	ldrh	r0, [r3, #0]
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <sendData+0x54>)
 8001c6e:	8819      	ldrh	r1, [r3, #0]
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	4613      	mov	r3, r2
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f008 f94b 	bl	8009f14 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8001c7e:	e00a      	b.n	8001c96 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <sendData+0x58>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b298      	uxth	r0, r3
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <sendData+0x5c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f008 fad8 	bl	800a246 <aci_gatt_write_without_response>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000390 	.word	0x20000390
 8001ca8:	20000392 	.word	0x20000392
 8001cac:	20000384 	.word	0x20000384
 8001cb0:	2000038e 	.word	0x2000038e

08001cb4 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8001cba:	2301      	movs	r3, #1
 8001cbc:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8001cbe:	f001 fe3f 	bl	8003940 <HAL_GetTick>
 8001cc2:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8001cc4:	e008      	b.n	8001cd8 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8001cc6:	f001 fe3b 	bl	8003940 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d80e      	bhi.n	8001cf6 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <enableNotification+0x54>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b298      	uxth	r0, r3
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <enableNotification+0x58>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f008 fa31 	bl	800a150 <aci_gatt_write_charac_descriptor>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b46      	cmp	r3, #70	; 0x46
 8001cf2:	d0e8      	beq.n	8001cc6 <enableNotification+0x12>
 8001cf4:	e000      	b.n	8001cf8 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8001cf6:	bf00      	nop
  }
  notification_enabled = TRUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <enableNotification+0x5c>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000384 	.word	0x20000384
 8001d0c:	2000038c 	.word	0x2000038c
 8001d10:	20000386 	.word	0x20000386

08001d14 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	603a      	str	r2, [r7, #0]
 8001d1e:	80fb      	strh	r3, [r7, #6]
 8001d20:	460b      	mov	r3, r1
 8001d22:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <Attribute_Modified_CB+0x60>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d10f      	bne.n	8001d50 <Attribute_Modified_CB+0x3c>
    receiveData(att_data, data_length);
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	4619      	mov	r1, r3
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff ff5f 	bl	8001bf8 <receiveData>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, 1, att_data);
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <Attribute_Modified_CB+0x64>)
 8001d3c:	8818      	ldrh	r0, [r3, #0]
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <Attribute_Modified_CB+0x68>)
 8001d40:	8819      	ldrh	r1, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f008 f8e3 	bl	8009f14 <aci_gatt_update_char_value>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8001d4e:	e00c      	b.n	8001d6a <Attribute_Modified_CB+0x56>
  } else if (handle == TXCharHandle + 2) {
 8001d50:	88fa      	ldrh	r2, [r7, #6]
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <Attribute_Modified_CB+0x68>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	3302      	adds	r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d106      	bne.n	8001d6a <Attribute_Modified_CB+0x56>
    if(att_data[0] == 0x01)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <Attribute_Modified_CB+0x56>
      notification_enabled = TRUE;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <Attribute_Modified_CB+0x6c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000394 	.word	0x20000394
 8001d78:	20000390 	.word	0x20000390
 8001d7c:	20000392 	.word	0x20000392
 8001d80:	20000386 	.word	0x20000386

08001d84 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <GAP_ConnectionComplete_CB+0x54>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001d96:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <GAP_ConnectionComplete_CB+0x58>)
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8001d9c:	4810      	ldr	r0, [pc, #64]	; (8001de0 <GAP_ConnectionComplete_CB+0x5c>)
 8001d9e:	f009 fab3 	bl	800b308 <iprintf>
  for(int i = 5; i > 0; i--){
 8001da2:	2305      	movs	r3, #5
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e00a      	b.n	8001dbe <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	480c      	ldr	r0, [pc, #48]	; (8001de4 <GAP_ConnectionComplete_CB+0x60>)
 8001db4:	f009 faa8 	bl	800b308 <iprintf>
  for(int i = 5; i > 0; i--){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dcf1      	bgt.n	8001da8 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4807      	ldr	r0, [pc, #28]	; (8001de8 <GAP_ConnectionComplete_CB+0x64>)
 8001dcc:	f009 fa9c 	bl	800b308 <iprintf>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000380 	.word	0x20000380
 8001ddc:	20000384 	.word	0x20000384
 8001de0:	0800c070 	.word	0x0800c070
 8001de4:	0800c088 	.word	0x0800c088
 8001de8:	0800c090 	.word	0x0800c090

08001dec <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <GAP_DisconnectionComplete_CB+0x38>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <GAP_DisconnectionComplete_CB+0x3c>)
 8001df8:	f009 fb22 	bl	800b440 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <GAP_DisconnectionComplete_CB+0x40>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <GAP_DisconnectionComplete_CB+0x44>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <GAP_DisconnectionComplete_CB+0x48>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <GAP_DisconnectionComplete_CB+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <GAP_DisconnectionComplete_CB+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <GAP_DisconnectionComplete_CB+0x54>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000380 	.word	0x20000380
 8001e28:	0800c098 	.word	0x0800c098
 8001e2c:	20000001 	.word	0x20000001
 8001e30:	20000386 	.word	0x20000386
 8001e34:	20000387 	.word	0x20000387
 8001e38:	20000388 	.word	0x20000388
 8001e3c:	20000389 	.word	0x20000389
 8001e40:	2000038a 	.word	0x2000038a

08001e44 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	603a      	str	r2, [r7, #0]
 8001e4e:	80fb      	strh	r3, [r7, #6]
 8001e50:	460b      	mov	r3, r1
 8001e52:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8001e54:	88fa      	ldrh	r2, [r7, #6]
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <GATT_Notification_CB+0x30>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d104      	bne.n	8001e6a <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	4619      	mov	r1, r3
 8001e64:	6838      	ldr	r0, [r7, #0]
 8001e66:	f7ff fec7 	bl	8001bf8 <receiveData>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000038c 	.word	0x2000038c

08001e78 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	3301      	adds	r3, #1
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	f040 80e2 	bne.w	8002058 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2bff      	cmp	r3, #255	; 0xff
 8001e9a:	d021      	beq.n	8001ee0 <user_notify+0x68>
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	f300 80e0 	bgt.w	8002062 <user_notify+0x1ea>
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d002      	beq.n	8001eac <user_notify+0x34>
 8001ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8001ea8:	d003      	beq.n	8001eb2 <user_notify+0x3a>
 8001eaa:	e0da      	b.n	8002062 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001eac:	f7ff ff9e 	bl	8001dec <GAP_DisconnectionComplete_CB>
    }
    break;
 8001eb0:	e0d7      	b.n	8002062 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	f040 80cd 	bne.w	800205c <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1d5a      	adds	r2, r3, #5
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7ff ff54 	bl	8001d84 <GAP_ConnectionComplete_CB>
        }
        break;
 8001edc:	bf00      	nop
      }
    }
    break;
 8001ede:	e0bd      	b.n	800205c <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	f200 80b5 	bhi.w	8002060 <user_notify+0x1e8>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <user_notify+0x84>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f45 	.word	0x08001f45
 8001f00:	08002061 	.word	0x08002061
 8001f04:	08002061 	.word	0x08002061
 8001f08:	08002061 	.word	0x08002061
 8001f0c:	08002061 	.word	0x08002061
 8001f10:	08002061 	.word	0x08002061
 8001f14:	08002061 	.word	0x08002061
 8001f18:	08002061 	.word	0x08002061
 8001f1c:	08002061 	.word	0x08002061
 8001f20:	08002061 	.word	0x08002061
 8001f24:	08002061 	.word	0x08002061
 8001f28:	08002061 	.word	0x08002061
 8001f2c:	08002061 	.word	0x08002061
 8001f30:	08002061 	.word	0x08002061
 8001f34:	08001f85 	.word	0x08001f85
 8001f38:	08002011 	.word	0x08002011
 8001f3c:	08002061 	.word	0x08002061
 8001f40:	08001fa7 	.word	0x08001fa7

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8001f44:	4b48      	ldr	r3, [pc, #288]	; (8002068 <user_notify+0x1f0>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d10d      	bne.n	8001f68 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3302      	adds	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	885b      	ldrh	r3, [r3, #2]
 8001f56:	b298      	uxth	r0, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	7919      	ldrb	r1, [r3, #4]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3307      	adds	r3, #7
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fed7 	bl	8001d14 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8001f66:	e076      	b.n	8002056 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	885b      	ldrh	r3, [r3, #2]
 8001f72:	b298      	uxth	r0, r3
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	7919      	ldrb	r1, [r3, #4]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fec9 	bl	8001d14 <Attribute_Modified_CB>
        break;
 8001f82:	e068      	b.n	8002056 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	3302      	adds	r3, #2
 8001f88:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001f90:	b298      	uxth	r0, r3
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	3b02      	subs	r3, #2
 8001f98:	b2d9      	uxtb	r1, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f7ff ff50 	bl	8001e44 <GATT_Notification_CB>
        }
        break;
 8001fa4:	e057      	b.n	8002056 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <user_notify+0x1f4>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d150      	bne.n	8002050 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	3302      	adds	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001fb4:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <user_notify+0x1f8>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d011      	beq.n	8001fe2 <user_notify+0x16a>
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <user_notify+0x1fc>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10c      	bne.n	8001fe2 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <user_notify+0x200>)
 8001fd2:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <user_notify+0x200>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <user_notify+0x204>)
 8001fdc:	f009 f994 	bl	800b308 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001fe0:	e036      	b.n	8002050 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001fe2:	4b27      	ldr	r3, [pc, #156]	; (8002080 <user_notify+0x208>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d031      	beq.n	8002050 <user_notify+0x1d8>
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <user_notify+0x20c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12c      	bne.n	8002050 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <user_notify+0x210>)
 8002000:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <user_notify+0x210>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	4820      	ldr	r0, [pc, #128]	; (800208c <user_notify+0x214>)
 800200a:	f009 f97d 	bl	800b308 <iprintf>
        break;
 800200e:	e01f      	b.n	8002050 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <user_notify+0x1f4>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11d      	bne.n	8002054 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <user_notify+0x1f8>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <user_notify+0x1bc>
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <user_notify+0x1fc>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <user_notify+0x1fc>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8002032:	e00f      	b.n	8002054 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <user_notify+0x208>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <user_notify+0x1dc>
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <user_notify+0x20c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <user_notify+0x20c>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
        break;
 800204e:	e001      	b.n	8002054 <user_notify+0x1dc>
        break;
 8002050:	bf00      	nop
 8002052:	e005      	b.n	8002060 <user_notify+0x1e8>
        break;
 8002054:	bf00      	nop
      }
    }
    break;
 8002056:	e003      	b.n	8002060 <user_notify+0x1e8>
    return;
 8002058:	bf00      	nop
 800205a:	e002      	b.n	8002062 <user_notify+0x1ea>
    break;
 800205c:	bf00      	nop
 800205e:	e000      	b.n	8002062 <user_notify+0x1ea>
    break;
 8002060:	bf00      	nop
  }
}
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000200 	.word	0x20000200
 800206c:	20000000 	.word	0x20000000
 8002070:	20000387 	.word	0x20000387
 8002074:	20000389 	.word	0x20000389
 8002078:	2000038c 	.word	0x2000038c
 800207c:	0800c0a8 	.word	0x0800c0a8
 8002080:	20000388 	.word	0x20000388
 8002084:	2000038a 	.word	0x2000038a
 8002088:	2000038e 	.word	0x2000038e
 800208c:	0800c0c0 	.word	0x0800c0c0

08002090 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_SPI1_Init+0x74>)
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <MX_SPI1_Init+0x78>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_SPI1_Init+0x74>)
 800209c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_SPI1_Init+0x74>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_SPI1_Init+0x74>)
 80020aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80020ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <MX_SPI1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MX_SPI1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MX_SPI1_Init+0x74>)
 80020be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_SPI1_Init+0x74>)
 80020c6:	2208      	movs	r2, #8
 80020c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MX_SPI1_Init+0x74>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_SPI1_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <MX_SPI1_Init+0x74>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_SPI1_Init+0x74>)
 80020de:	2207      	movs	r2, #7
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <MX_SPI1_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <MX_SPI1_Init+0x74>)
 80020ea:	2208      	movs	r2, #8
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <MX_SPI1_Init+0x74>)
 80020f0:	f006 f8a6 	bl	8008240 <HAL_SPI_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020fa:	f7ff fb7f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000398 	.word	0x20000398
 8002108:	40013000 	.word	0x40013000

0800210c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_SPI_MspInit+0x7c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d128      	bne.n	8002180 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_SPI_MspInit+0x80>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <HAL_SPI_MspInit+0x80>)
 8002134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002138:	6613      	str	r3, [r2, #96]	; 0x60
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_SPI_MspInit+0x80>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_SPI_MspInit+0x80>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <HAL_SPI_MspInit+0x80>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_SPI_MspInit+0x80>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800215e:	23e0      	movs	r3, #224	; 0xe0
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216e:	2305      	movs	r3, #5
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217c:	f002 fda6 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40013000 	.word	0x40013000
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_MspInit+0x44>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <HAL_MspInit+0x44>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6613      	str	r3, [r2, #96]	; 0x60
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_MspInit+0x44>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_MspInit+0x44>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_MspInit+0x44>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_MspInit+0x44>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002224:	f001 fb78 	bl	8003918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002230:	2020      	movs	r0, #32
 8002232:	f002 ffff 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002236:	4806      	ldr	r0, [pc, #24]	; (8002250 <EXTI9_5_IRQHandler+0x24>)
 8002238:	f002 fd18 	bl	8004c6c <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800223c:	2080      	movs	r0, #128	; 0x80
 800223e:	f002 fff9 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002242:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002246:	f002 fff5 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000090 	.word	0x20000090

08002254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002258:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800225c:	f002 ffea 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002260:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002264:	f002 ffe6 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002268:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800226c:	f002 ffe2 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002274:	f002 ffde 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002278:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800227c:	f002 ffda 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002284:	f002 ffd6 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e00a      	b.n	80022b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800229e:	f3af 8000 	nop.w
 80022a2:	4601      	mov	r1, r0
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	60ba      	str	r2, [r7, #8]
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbf0      	blt.n	800229e <_read+0x12>
  }

  return len;
 80022bc:	687b      	ldr	r3, [r7, #4]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ee:	605a      	str	r2, [r3, #4]
  return 0;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <_isatty>:

int _isatty(int file)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002306:	2301      	movs	r3, #1
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002338:	4a14      	ldr	r2, [pc, #80]	; (800238c <_sbrk+0x5c>)
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <_sbrk+0x60>)
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <_sbrk+0x64>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <_sbrk+0x68>)
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	429a      	cmp	r2, r3
 800235e:	d207      	bcs.n	8002370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002360:	f008 fce4 	bl	800ad2c <__errno>
 8002364:	4603      	mov	r3, r0
 8002366:	220c      	movs	r2, #12
 8002368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
 800236e:	e009      	b.n	8002384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <_sbrk+0x64>)
 8002380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200a0000 	.word	0x200a0000
 8002390:	00000400 	.word	0x00000400
 8002394:	200003fc 	.word	0x200003fc
 8002398:	200009d0 	.word	0x200009d0

0800239c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <SystemInit+0x20>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <SystemInit+0x20>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <MX_UART4_Init+0x90>)
 80023c6:	4a23      	ldr	r2, [pc, #140]	; (8002454 <MX_UART4_Init+0x94>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_UART4_Init+0x90>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_UART4_Init+0x90>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <MX_UART4_Init+0x90>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_UART4_Init+0x90>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_UART4_Init+0x90>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_UART4_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_UART4_Init+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <MX_UART4_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_UART4_Init+0x90>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <MX_UART4_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002408:	4811      	ldr	r0, [pc, #68]	; (8002450 <MX_UART4_Init+0x90>)
 800240a:	f006 fb41 	bl	8008a90 <HAL_UART_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002414:	f7ff f9f2 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002418:	2100      	movs	r1, #0
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <MX_UART4_Init+0x90>)
 800241c:	f007 f90a 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002426:	f7ff f9e9 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242a:	2100      	movs	r1, #0
 800242c:	4808      	ldr	r0, [pc, #32]	; (8002450 <MX_UART4_Init+0x90>)
 800242e:	f007 f93f 	bl	80096b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002438:	f7ff f9e0 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800243c:	4804      	ldr	r0, [pc, #16]	; (8002450 <MX_UART4_Init+0x90>)
 800243e:	f007 f8c0 	bl	80095c2 <HAL_UARTEx_DisableFifoMode>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002448:	f7ff f9d8 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000400 	.word	0x20000400
 8002454:	40004c00 	.word	0x40004c00

08002458 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <MX_USART1_UART_Init+0x94>)
 8002460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 8002496:	2200      	movs	r2, #0
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 800249c:	2200      	movs	r2, #0
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a0:	4811      	ldr	r0, [pc, #68]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 80024a2:	f006 faf5 	bl	8008a90 <HAL_UART_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80024ac:	f7ff f9a6 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	480d      	ldr	r0, [pc, #52]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 80024b4:	f007 f8be 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024be:	f7ff f99d 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c2:	2100      	movs	r1, #0
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 80024c6:	f007 f8f3 	bl	80096b0 <HAL_UARTEx_SetRxFifoThreshold>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024d0:	f7ff f994 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024d4:	4804      	ldr	r0, [pc, #16]	; (80024e8 <MX_USART1_UART_Init+0x90>)
 80024d6:	f007 f874 	bl	80095c2 <HAL_UARTEx_DisableFifoMode>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024e0:	f7ff f98c 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000490 	.word	0x20000490
 80024ec:	40013800 	.word	0x40013800

080024f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024f4:	4b23      	ldr	r3, [pc, #140]	; (8002584 <MX_USART2_UART_Init+0x94>)
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <MX_USART2_UART_Init+0x98>)
 80024f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <MX_USART2_UART_Init+0x94>)
 80024fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <MX_USART2_UART_Init+0x94>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002516:	220c      	movs	r2, #12
 8002518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <MX_USART2_UART_Init+0x94>)
 800251c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002520:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002524:	2200      	movs	r2, #0
 8002526:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_USART2_UART_Init+0x94>)
 800252a:	2200      	movs	r2, #0
 800252c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002530:	2200      	movs	r2, #0
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002536:	2200      	movs	r2, #0
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <MX_USART2_UART_Init+0x94>)
 800253c:	f006 faa8 	bl	8008a90 <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002546:	f7ff f959 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800254a:	2100      	movs	r1, #0
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <MX_USART2_UART_Init+0x94>)
 800254e:	f007 f871 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002558:	f7ff f950 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255c:	2100      	movs	r1, #0
 800255e:	4809      	ldr	r0, [pc, #36]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002560:	f007 f8a6 	bl	80096b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800256a:	f7ff f947 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_USART2_UART_Init+0x94>)
 8002570:	f007 f827 	bl	80095c2 <HAL_UARTEx_DisableFifoMode>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800257a:	f7ff f93f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000520 	.word	0x20000520
 8002588:	40004400 	.word	0x40004400

0800258c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <MX_USART3_UART_Init+0x90>)
 8002592:	4a23      	ldr	r2, [pc, #140]	; (8002620 <MX_USART3_UART_Init+0x94>)
 8002594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <MX_USART3_UART_Init+0x90>)
 8002598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025d4:	4811      	ldr	r0, [pc, #68]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025d6:	f006 fa5b 	bl	8008a90 <HAL_UART_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025e0:	f7ff f90c 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025e4:	2100      	movs	r1, #0
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025e8:	f007 f824 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80025f2:	f7ff f903 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f6:	2100      	movs	r1, #0
 80025f8:	4808      	ldr	r0, [pc, #32]	; (800261c <MX_USART3_UART_Init+0x90>)
 80025fa:	f007 f859 	bl	80096b0 <HAL_UARTEx_SetRxFifoThreshold>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002604:	f7ff f8fa 	bl	80017fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_USART3_UART_Init+0x90>)
 800260a:	f006 ffda 	bl	80095c2 <HAL_UARTEx_DisableFifoMode>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002614:	f7ff f8f2 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	200005b0 	.word	0x200005b0
 8002620:	40004800 	.word	0x40004800

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0b4      	sub	sp, #208	; 0xd0
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002640:	2294      	movs	r2, #148	; 0x94
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f008 fd76 	bl	800b136 <memset>
  if(uartHandle->Instance==UART4)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a83      	ldr	r2, [pc, #524]	; (800285c <HAL_UART_MspInit+0x238>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d13c      	bne.n	80026ce <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002654:	2308      	movs	r3, #8
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002658:	2300      	movs	r3, #0
 800265a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800265c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002660:	4618      	mov	r0, r3
 8002662:	f005 f8c5 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800266c:	f7ff f8c6 	bl	80017fc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002688:	4b75      	ldr	r3, [pc, #468]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a74      	ldr	r2, [pc, #464]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002694:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80026a0:	2303      	movs	r3, #3
 80026a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026b8:	2308      	movs	r3, #8
 80026ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c8:	f002 fb00 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026cc:	e0c2      	b.n	8002854 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a64      	ldr	r2, [pc, #400]	; (8002864 <HAL_UART_MspInit+0x240>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d13b      	bne.n	8002750 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d8:	2301      	movs	r3, #1
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026dc:	2300      	movs	r3, #0
 80026de:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 f883 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80026f0:	f7ff f884 	bl	80017fc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f4:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <HAL_UART_MspInit+0x23c>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	4a59      	ldr	r2, [pc, #356]	; (8002860 <HAL_UART_MspInit+0x23c>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002700:	4b57      	ldr	r3, [pc, #348]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b54      	ldr	r3, [pc, #336]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a53      	ldr	r2, [pc, #332]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b51      	ldr	r3, [pc, #324]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002724:	23c0      	movs	r3, #192	; 0xc0
 8002726:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800273c:	2307      	movs	r3, #7
 800273e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002742:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002746:	4619      	mov	r1, r3
 8002748:	4847      	ldr	r0, [pc, #284]	; (8002868 <HAL_UART_MspInit+0x244>)
 800274a:	f002 fabf 	bl	8004ccc <HAL_GPIO_Init>
}
 800274e:	e081      	b.n	8002854 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a45      	ldr	r2, [pc, #276]	; (800286c <HAL_UART_MspInit+0x248>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d13b      	bne.n	80027d2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800275a:	2302      	movs	r3, #2
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800275e:	2300      	movs	r3, #0
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002766:	4618      	mov	r0, r3
 8002768:	f005 f842 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002772:	f7ff f843 	bl	80017fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002776:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
 8002782:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a33      	ldr	r2, [pc, #204]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80027a6:	2378      	movs	r3, #120	; 0x78
 80027a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027be:	2307      	movs	r3, #7
 80027c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027c8:	4619      	mov	r1, r3
 80027ca:	4829      	ldr	r0, [pc, #164]	; (8002870 <HAL_UART_MspInit+0x24c>)
 80027cc:	f002 fa7e 	bl	8004ccc <HAL_GPIO_Init>
}
 80027d0:	e040      	b.n	8002854 <HAL_UART_MspInit+0x230>
  else if(uartHandle->Instance==USART3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_UART_MspInit+0x250>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d13b      	bne.n	8002854 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027dc:	2304      	movs	r3, #4
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e8:	4618      	mov	r0, r3
 80027ea:	f005 f801 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80027f4:	f7ff f802 	bl	80017fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_UART_MspInit+0x23c>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a18      	ldr	r2, [pc, #96]	; (8002860 <HAL_UART_MspInit+0x23c>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_UART_MspInit+0x23c>)
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_UART_MspInit+0x23c>)
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002828:	f44f 7340 	mov.w	r3, #768	; 0x300
 800282c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002842:	2307      	movs	r3, #7
 8002844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002848:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800284c:	4619      	mov	r1, r3
 800284e:	4808      	ldr	r0, [pc, #32]	; (8002870 <HAL_UART_MspInit+0x24c>)
 8002850:	f002 fa3c 	bl	8004ccc <HAL_GPIO_Init>
}
 8002854:	bf00      	nop
 8002856:	37d0      	adds	r7, #208	; 0xd0
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40004c00 	.word	0x40004c00
 8002860:	40021000 	.word	0x40021000
 8002864:	40013800 	.word	0x40013800
 8002868:	48000400 	.word	0x48000400
 800286c:	40004400 	.word	0x40004400
 8002870:	48000c00 	.word	0x48000c00
 8002874:	40004800 	.word	0x40004800

08002878 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800288c:	f7ff fd86 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002892:	490d      	ldr	r1, [pc, #52]	; (80028c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <LoopForever+0xe>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002898:	e002      	b.n	80028a0 <LoopCopyDataInit>

0800289a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800289c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289e:	3304      	adds	r3, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a4:	d3f9      	bcc.n	800289a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <LoopForever+0x16>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ac:	e001      	b.n	80028b2 <LoopFillZerobss>

080028ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b0:	3204      	adds	r2, #4

080028b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b4:	d3fb      	bcc.n	80028ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028b6:	f008 fc09 	bl	800b0cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ba:	f7fe fe6d 	bl	8001598 <main>

080028be <LoopForever>:

LoopForever:
    b LoopForever
 80028be:	e7fe      	b.n	80028be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80028c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80028cc:	0800c1f0 	.word	0x0800c1f0
  ldr r2, =_sbss
 80028d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80028d4:	200009cc 	.word	0x200009cc

080028d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d8:	e7fe      	b.n	80028d8 <ADC1_IRQHandler>
	...

080028dc <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <BSP_SPI3_Init+0x54>)
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <BSP_SPI3_Init+0x58>)
 80028ea:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <BSP_SPI3_Init+0x5c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	4911      	ldr	r1, [pc, #68]	; (8002938 <BSP_SPI3_Init+0x5c>)
 80028f4:	600a      	str	r2, [r1, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d114      	bne.n	8002924 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80028fa:	480d      	ldr	r0, [pc, #52]	; (8002930 <BSP_SPI3_Init+0x54>)
 80028fc:	f005 ff56 	bl	80087ac <HAL_SPI_GetState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10e      	bne.n	8002924 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8002906:	480a      	ldr	r0, [pc, #40]	; (8002930 <BSP_SPI3_Init+0x54>)
 8002908:	f000 f87a 	bl	8002a00 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002912:	4807      	ldr	r0, [pc, #28]	; (8002930 <BSP_SPI3_Init+0x54>)
 8002914:	f000 f832 	bl	800297c <MX_SPI3_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800291e:	f06f 0307 	mvn.w	r3, #7
 8002922:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000640 	.word	0x20000640
 8002934:	40003c00 	.word	0x40003c00
 8002938:	200006a4 	.word	0x200006a4

0800293c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	68f9      	ldr	r1, [r7, #12]
 800295a:	4807      	ldr	r0, [pc, #28]	; (8002978 <BSP_SPI3_SendRecv+0x3c>)
 800295c:	f005 fd13 	bl	8008386 <HAL_SPI_TransmitReceive>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002966:	f06f 0305 	mvn.w	r3, #5
 800296a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800296c:	697b      	ldr	r3, [r7, #20]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000640 	.word	0x20000640

0800297c <MX_SPI3_Init>:
}

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <MX_SPI3_Init+0x80>)
 800298c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002994:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_4BIT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029a2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2208      	movs	r2, #8
 80029bc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2207      	movs	r2, #7
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2208      	movs	r2, #8
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f005 fc2c 	bl	8008240 <HAL_SPI_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40003c00 	.word	0x40003c00

08002a00 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <SPI3_MspInit+0xa8>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8002a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4815      	ldr	r0, [pc, #84]	; (8002aac <SPI3_MspInit+0xac>)
 8002a56:	f002 f939 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8002a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	4619      	mov	r1, r3
 8002a76:	480d      	ldr	r0, [pc, #52]	; (8002aac <SPI3_MspInit+0xac>)
 8002a78:	f002 f928 	bl	8004ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8002a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002a8e:	2306      	movs	r3, #6
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <SPI3_MspInit+0xac>)
 8002a9a:	f002 f917 	bl	8004ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	48000800 	.word	0x48000800

08002ab0 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e051      	b.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	7b1a      	ldrb	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <LSM6DSL_RegisterBusIO+0xcc>)
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <LSM6DSL_RegisterBusIO+0xd0>)
 8002b0e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e020      	b.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4798      	blx	r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e016      	b.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d112      	bne.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10d      	bne.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002b54:	230c      	movs	r3, #12
 8002b56:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002b58:	7afb      	ldrb	r3, [r7, #11]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2112      	movs	r1, #18
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f922 	bl	8002da8 <LSM6DSL_Write_Reg>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002b70:	68fb      	ldr	r3, [r7, #12]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08003065 	.word	0x08003065
 8002b80:	0800309b 	.word	0x0800309b

08002b84 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3320      	adds	r3, #32
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fbe6 	bl	8003364 <lsm6dsl_auto_increment_set>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba2:	e054      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3320      	adds	r3, #32
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fb58 	bl	8003260 <lsm6dsl_block_data_update_set>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	e048      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3320      	adds	r3, #32
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fe2d 	bl	8003822 <lsm6dsl_fifo_mode_set>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e03c      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2204      	movs	r2, #4
 8002bd8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3320      	adds	r3, #32
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 faca 	bl	800317c <lsm6dsl_xl_data_rate_set>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e02c      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3320      	adds	r3, #32
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fa98 	bl	8003130 <lsm6dsl_xl_full_scale_set>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e020      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2204      	movs	r2, #4
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3320      	adds	r3, #32
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fafa 	bl	8003214 <lsm6dsl_gy_data_rate_set>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e010      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3320      	adds	r3, #32
 8002c30:	2106      	movs	r1, #6
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fac8 	bl	80031c8 <lsm6dsl_gy_full_scale_set>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e004      	b.n	8002c4e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3320      	adds	r3, #32
 8002c64:	6839      	ldr	r1, [r7, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fb6b 	bl	8003342 <lsm6dsl_device_id_get>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e000      	b.n	8002c7a <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e014      	b.n	8002cc2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f103 0220 	add.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f000 fab4 	bl	8003214 <lsm6dsl_gy_data_rate_set>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e004      	b.n	8002cc2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d106      	bne.n	8002cee <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002ce0:	ed97 0a00 	vldr	s0, [r7]
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8af 	bl	8002e48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8002cea:	4603      	mov	r3, r0
 8002cec:	e005      	b.n	8002cfa <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002cee:	ed97 0a00 	vldr	s0, [r7]
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f934 	bl	8002f60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8002cf8:	4603      	mov	r3, r0
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b7d      	cmp	r3, #125	; 0x7d
 8002d10:	dd12      	ble.n	8002d38 <LSM6DSL_GYRO_SetFullScale+0x36>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2bfa      	cmp	r3, #250	; 0xfa
 8002d16:	dd0d      	ble.n	8002d34 <LSM6DSL_GYRO_SetFullScale+0x32>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d1e:	dd07      	ble.n	8002d30 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d26:	dc01      	bgt.n	8002d2c <LSM6DSL_GYRO_SetFullScale+0x2a>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e006      	b.n	8002d3a <LSM6DSL_GYRO_SetFullScale+0x38>
 8002d2c:	2306      	movs	r3, #6
 8002d2e:	e004      	b.n	8002d3a <LSM6DSL_GYRO_SetFullScale+0x38>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e002      	b.n	8002d3a <LSM6DSL_GYRO_SetFullScale+0x38>
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <LSM6DSL_GYRO_SetFullScale+0x38>
 8002d38:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8002d3a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fa3f 	bl	80031c8 <lsm6dsl_gy_full_scale_set>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	e000      	b.n	8002d58 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3320      	adds	r3, #32
 8002d6e:	f107 0208 	add.w	r2, r7, #8
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fa99 	bl	80032ac <lsm6dsl_angular_rate_raw_get>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e00c      	b.n	8002da0 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002d86:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002d8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002d96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
 8002db4:	4613      	mov	r3, r2
 8002db6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f103 0020 	add.w	r0, r3, #32
 8002dbe:	1cba      	adds	r2, r7, #2
 8002dc0:	78f9      	ldrb	r1, [r7, #3]
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f000 f99c 	bl	8003100 <lsm6dsl_write_reg>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e000      	b.n	8002dd6 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <LSM6DSL_GYRO_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_g in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3320      	adds	r3, #32
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fc3e 	bl	8003676 <lsm6dsl_pin_int1_route_get>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <LSM6DSL_GYRO_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	e01b      	b.n	8002e3e <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d811      	bhi.n	8002e30 <LSM6DSL_GYRO_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_g = Val;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	7b3b      	ldrb	r3, [r7, #12]
 8002e16:	f362 0341 	bfi	r3, r2, #1, #1
 8002e1a:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3320      	adds	r3, #32
 8002e20:	68f9      	ldr	r1, [r7, #12]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fac4 	bl	80033b0 <lsm6dsl_pin_int1_route_set>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <LSM6DSL_GYRO_Set_INT1_DRDY+0x5e>
 8002e2e:	e002      	b.n	8002e36 <LSM6DSL_GYRO_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	e003      	b.n	8002e3e <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e000      	b.n	8002e3e <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8002e54:	edd7 7a00 	vldr	s15, [r7]
 8002e58:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d801      	bhi.n	8002e6a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e058      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002e6a:	edd7 7a00 	vldr	s15, [r7]
 8002e6e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7a:	d801      	bhi.n	8002e80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e04d      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002e80:	edd7 7a00 	vldr	s15, [r7]
 8002e84:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002f44 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8002e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	d801      	bhi.n	8002e96 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e042      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002e96:	edd7 7a00 	vldr	s15, [r7]
 8002e9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002f48 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	d801      	bhi.n	8002eac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	e037      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002eac:	edd7 7a00 	vldr	s15, [r7]
 8002eb0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f4c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8002eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	d801      	bhi.n	8002ec2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e02c      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002ec2:	edd7 7a00 	vldr	s15, [r7]
 8002ec6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002f50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8002eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	d801      	bhi.n	8002ed8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e021      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002ed8:	edd7 7a00 	vldr	s15, [r7]
 8002edc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f54 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d801      	bhi.n	8002eee <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8002eea:	2307      	movs	r3, #7
 8002eec:	e016      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002eee:	edd7 7a00 	vldr	s15, [r7]
 8002ef2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002f58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8002ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	d801      	bhi.n	8002f04 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8002f00:	2308      	movs	r3, #8
 8002f02:	e00b      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002f04:	edd7 7a00 	vldr	s15, [r7]
 8002f08:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8002f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	d801      	bhi.n	8002f1a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8002f16:	2309      	movs	r3, #9
 8002f18:	e000      	b.n	8002f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8002f1a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8002f1c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	3320      	adds	r3, #32
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f974 	bl	8003214 <lsm6dsl_gy_data_rate_set>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e000      	b.n	8002f3a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	42500000 	.word	0x42500000
 8002f48:	42d00000 	.word	0x42d00000
 8002f4c:	43500000 	.word	0x43500000
 8002f50:	43d00000 	.word	0x43d00000
 8002f54:	44504000 	.word	0x44504000
 8002f58:	44cf8000 	.word	0x44cf8000
 8002f5c:	45502000 	.word	0x45502000

08002f60 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8002f6c:	edd7 7a00 	vldr	s15, [r7]
 8002f70:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d801      	bhi.n	8002f82 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e058      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002f82:	edd7 7a00 	vldr	s15, [r7]
 8002f86:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f92:	d801      	bhi.n	8002f98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e04d      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002f98:	edd7 7a00 	vldr	s15, [r7]
 8002f9c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003048 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8002fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	d801      	bhi.n	8002fae <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e042      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002fae:	edd7 7a00 	vldr	s15, [r7]
 8002fb2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800304c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8002fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	d801      	bhi.n	8002fc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e037      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002fc4:	edd7 7a00 	vldr	s15, [r7]
 8002fc8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003050 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8002fcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd4:	d801      	bhi.n	8002fda <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e02c      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002fda:	edd7 7a00 	vldr	s15, [r7]
 8002fde:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003054 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8002fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fea:	d801      	bhi.n	8002ff0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8002fec:	2306      	movs	r3, #6
 8002fee:	e021      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8002ff0:	edd7 7a00 	vldr	s15, [r7]
 8002ff4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003058 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8002ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d801      	bhi.n	8003006 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003002:	2307      	movs	r3, #7
 8003004:	e016      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003006:	edd7 7a00 	vldr	s15, [r7]
 800300a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800305c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800300e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d801      	bhi.n	800301c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8003018:	2308      	movs	r3, #8
 800301a:	e00b      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800301c:	edd7 7a00 	vldr	s15, [r7]
 8003020:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003060 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8003024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d801      	bhi.n	8003032 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800302e:	2309      	movs	r3, #9
 8003030:	e000      	b.n	8003034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003032:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	42500000 	.word	0x42500000
 800304c:	42d00000 	.word	0x42d00000
 8003050:	43500000 	.word	0x43500000
 8003054:	43d00000 	.word	0x43d00000
 8003058:	44504000 	.word	0x44504000
 800305c:	44cf8000 	.word	0x44cf8000
 8003060:	45502000 	.word	0x45502000

08003064 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	72fb      	strb	r3, [r7, #11]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	695c      	ldr	r4, [r3, #20]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	7b1b      	ldrb	r3, [r3, #12]
 8003084:	b298      	uxth	r0, r3
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	b299      	uxth	r1, r3
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	47a0      	blx	r4
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}

0800309a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800309a:	b590      	push	{r4, r7, lr}
 800309c:	b087      	sub	sp, #28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	461a      	mov	r2, r3
 80030a6:	460b      	mov	r3, r1
 80030a8:	72fb      	strb	r3, [r7, #11]
 80030aa:	4613      	mov	r3, r2
 80030ac:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	691c      	ldr	r4, [r3, #16]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	7b1b      	ldrb	r3, [r3, #12]
 80030ba:	b298      	uxth	r0, r3
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	b299      	uxth	r1, r3
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	47a0      	blx	r4
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	72fb      	strb	r3, [r7, #11]
 80030e0:	4613      	mov	r3, r2
 80030e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685c      	ldr	r4, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68d8      	ldr	r0, [r3, #12]
 80030ec:	893b      	ldrh	r3, [r7, #8]
 80030ee:	7af9      	ldrb	r1, [r7, #11]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	47a0      	blx	r4
 80030f4:	6178      	str	r0, [r7, #20]

  return ret;
 80030f6:	697b      	ldr	r3, [r7, #20]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd90      	pop	{r4, r7, pc}

08003100 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	460b      	mov	r3, r1
 800310e:	72fb      	strb	r3, [r7, #11]
 8003110:	4613      	mov	r3, r2
 8003112:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68d8      	ldr	r0, [r3, #12]
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	7af9      	ldrb	r1, [r7, #11]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	47a0      	blx	r4
 8003124:	6178      	str	r0, [r7, #20]

  return ret;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}

08003130 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800313c:	f107 0208 	add.w	r2, r7, #8
 8003140:	2301      	movs	r3, #1
 8003142:	2110      	movs	r1, #16
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffc3 	bl	80030d0 <lsm6dsl_read_reg>
 800314a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	b2da      	uxtb	r2, r3
 800315a:	7a3b      	ldrb	r3, [r7, #8]
 800315c:	f362 0383 	bfi	r3, r2, #2, #2
 8003160:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003162:	f107 0208 	add.w	r2, r7, #8
 8003166:	2301      	movs	r3, #1
 8003168:	2110      	movs	r1, #16
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff ffc8 	bl	8003100 <lsm6dsl_write_reg>
 8003170:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003188:	f107 0208 	add.w	r2, r7, #8
 800318c:	2301      	movs	r3, #1
 800318e:	2110      	movs	r1, #16
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff9d 	bl	80030d0 <lsm6dsl_read_reg>
 8003196:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	7a3b      	ldrb	r3, [r7, #8]
 80031a8:	f362 1307 	bfi	r3, r2, #4, #4
 80031ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80031ae:	f107 0208 	add.w	r2, r7, #8
 80031b2:	2301      	movs	r3, #1
 80031b4:	2110      	movs	r1, #16
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffa2 	bl	8003100 <lsm6dsl_write_reg>
 80031bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80031d4:	f107 0208 	add.w	r2, r7, #8
 80031d8:	2301      	movs	r3, #1
 80031da:	2111      	movs	r1, #17
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff77 	bl	80030d0 <lsm6dsl_read_reg>
 80031e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	7a3b      	ldrb	r3, [r7, #8]
 80031f4:	f362 0343 	bfi	r3, r2, #1, #3
 80031f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80031fa:	f107 0208 	add.w	r2, r7, #8
 80031fe:	2301      	movs	r3, #1
 8003200:	2111      	movs	r1, #17
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff7c 	bl	8003100 <lsm6dsl_write_reg>
 8003208:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003220:	f107 0208 	add.w	r2, r7, #8
 8003224:	2301      	movs	r3, #1
 8003226:	2111      	movs	r1, #17
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff ff51 	bl	80030d0 <lsm6dsl_read_reg>
 800322e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	b2da      	uxtb	r2, r3
 800323e:	7a3b      	ldrb	r3, [r7, #8]
 8003240:	f362 1307 	bfi	r3, r2, #4, #4
 8003244:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003246:	f107 0208 	add.w	r2, r7, #8
 800324a:	2301      	movs	r3, #1
 800324c:	2111      	movs	r1, #17
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff56 	bl	8003100 <lsm6dsl_write_reg>
 8003254:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800326c:	f107 0208 	add.w	r2, r7, #8
 8003270:	2301      	movs	r3, #1
 8003272:	2112      	movs	r1, #18
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff2b 	bl	80030d0 <lsm6dsl_read_reg>
 800327a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	b2da      	uxtb	r2, r3
 800328a:	7a3b      	ldrb	r3, [r7, #8]
 800328c:	f362 1386 	bfi	r3, r2, #6, #1
 8003290:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003292:	f107 0208 	add.w	r2, r7, #8
 8003296:	2301      	movs	r3, #1
 8003298:	2112      	movs	r1, #18
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff30 	bl	8003100 <lsm6dsl_write_reg>
 80032a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80032b6:	f107 020c 	add.w	r2, r7, #12
 80032ba:	2306      	movs	r3, #6
 80032bc:	2122      	movs	r1, #34	; 0x22
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff06 	bl	80030d0 <lsm6dsl_read_reg>
 80032c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80032c6:	7b7b      	ldrb	r3, [r7, #13]
 80032c8:	b21a      	sxth	r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b29a      	uxth	r2, r3
 80032da:	7b3b      	ldrb	r3, [r7, #12]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4413      	add	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	3302      	adds	r3, #2
 80032ee:	b212      	sxth	r2, r2
 80032f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	3302      	adds	r3, #2
 80032f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b29a      	uxth	r2, r3
 8003300:	7bbb      	ldrb	r3, [r7, #14]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4413      	add	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3302      	adds	r3, #2
 800330c:	b212      	sxth	r2, r2
 800330e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003310:	7c7a      	ldrb	r2, [r7, #17]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3304      	adds	r3, #4
 8003316:	b212      	sxth	r2, r2
 8003318:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3304      	adds	r3, #4
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	b29b      	uxth	r3, r3
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b29a      	uxth	r2, r3
 8003328:	7c3b      	ldrb	r3, [r7, #16]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4413      	add	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	3304      	adds	r3, #4
 8003334:	b212      	sxth	r2, r2
 8003336:	801a      	strh	r2, [r3, #0]

  return ret;
 8003338:	697b      	ldr	r3, [r7, #20]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	210f      	movs	r1, #15
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff febc 	bl	80030d0 <lsm6dsl_read_reg>
 8003358:	60f8      	str	r0, [r7, #12]

  return ret;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003370:	f107 0208 	add.w	r2, r7, #8
 8003374:	2301      	movs	r3, #1
 8003376:	2112      	movs	r1, #18
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fea9 	bl	80030d0 <lsm6dsl_read_reg>
 800337e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	7a3b      	ldrb	r3, [r7, #8]
 8003390:	f362 0382 	bfi	r3, r2, #2, #1
 8003394:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003396:	f107 0208 	add.w	r2, r7, #8
 800339a:	2301      	movs	r3, #1
 800339c:	2112      	movs	r1, #18
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff feae 	bl	8003100 <lsm6dsl_write_reg>
 80033a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80033ba:	f107 021c 	add.w	r2, r7, #28
 80033be:	2301      	movs	r3, #1
 80033c0:	210d      	movs	r1, #13
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe84 	bl	80030d0 <lsm6dsl_read_reg>
 80033c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d147      	bne.n	8003460 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 80033d0:	783b      	ldrb	r3, [r7, #0]
 80033d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	7f3b      	ldrb	r3, [r7, #28]
 80033da:	f362 0300 	bfi	r3, r2, #0, #1
 80033de:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80033e0:	783b      	ldrb	r3, [r7, #0]
 80033e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	7f3b      	ldrb	r3, [r7, #28]
 80033ea:	f362 0341 	bfi	r3, r2, #1, #1
 80033ee:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80033f0:	783b      	ldrb	r3, [r7, #0]
 80033f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	7f3b      	ldrb	r3, [r7, #28]
 80033fa:	f362 0382 	bfi	r3, r2, #2, #1
 80033fe:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8003400:	783b      	ldrb	r3, [r7, #0]
 8003402:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	7f3b      	ldrb	r3, [r7, #28]
 800340a:	f362 03c3 	bfi	r3, r2, #3, #1
 800340e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8003410:	783b      	ldrb	r3, [r7, #0]
 8003412:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	7f3b      	ldrb	r3, [r7, #28]
 800341a:	f362 1304 	bfi	r3, r2, #4, #1
 800341e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8003420:	783b      	ldrb	r3, [r7, #0]
 8003422:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	7f3b      	ldrb	r3, [r7, #28]
 800342a:	f362 1345 	bfi	r3, r2, #5, #1
 800342e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8003430:	783b      	ldrb	r3, [r7, #0]
 8003432:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	7f3b      	ldrb	r3, [r7, #28]
 800343a:	f362 1386 	bfi	r3, r2, #6, #1
 800343e:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8003440:	783b      	ldrb	r3, [r7, #0]
 8003442:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	7f3b      	ldrb	r3, [r7, #28]
 800344a:	f362 13c7 	bfi	r3, r2, #7, #1
 800344e:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003450:	f107 021c 	add.w	r2, r7, #28
 8003454:	2301      	movs	r3, #1
 8003456:	210d      	movs	r1, #13
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fe51 	bl	8003100 <lsm6dsl_write_reg>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003466:	f107 0218 	add.w	r2, r7, #24
 800346a:	2301      	movs	r3, #1
 800346c:	215e      	movs	r1, #94	; 0x5e
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe2e 	bl	80030d0 <lsm6dsl_read_reg>
 8003474:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800347c:	f107 0214 	add.w	r2, r7, #20
 8003480:	2301      	movs	r3, #1
 8003482:	215f      	movs	r1, #95	; 0x5f
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fe23 	bl	80030d0 <lsm6dsl_read_reg>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d147      	bne.n	8003522 <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8003492:	787b      	ldrb	r3, [r7, #1]
 8003494:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	7e3b      	ldrb	r3, [r7, #24]
 800349c:	f362 0300 	bfi	r3, r2, #0, #1
 80034a0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 80034a2:	787b      	ldrb	r3, [r7, #1]
 80034a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	7e3b      	ldrb	r3, [r7, #24]
 80034ac:	f362 0341 	bfi	r3, r2, #1, #1
 80034b0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 80034b2:	787b      	ldrb	r3, [r7, #1]
 80034b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	7e3b      	ldrb	r3, [r7, #24]
 80034bc:	f362 0382 	bfi	r3, r2, #2, #1
 80034c0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 80034c2:	787b      	ldrb	r3, [r7, #1]
 80034c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	7e3b      	ldrb	r3, [r7, #24]
 80034cc:	f362 03c3 	bfi	r3, r2, #3, #1
 80034d0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 80034d2:	787b      	ldrb	r3, [r7, #1]
 80034d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	7e3b      	ldrb	r3, [r7, #24]
 80034dc:	f362 1304 	bfi	r3, r2, #4, #1
 80034e0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 80034e2:	787b      	ldrb	r3, [r7, #1]
 80034e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	7e3b      	ldrb	r3, [r7, #24]
 80034ec:	f362 1345 	bfi	r3, r2, #5, #1
 80034f0:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80034f2:	787b      	ldrb	r3, [r7, #1]
 80034f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	7e3b      	ldrb	r3, [r7, #24]
 80034fc:	f362 1386 	bfi	r3, r2, #6, #1
 8003500:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8003502:	787b      	ldrb	r3, [r7, #1]
 8003504:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003508:	b2da      	uxtb	r2, r3
 800350a:	7e3b      	ldrb	r3, [r7, #24]
 800350c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003510:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003512:	f107 0218 	add.w	r2, r7, #24
 8003516:	2301      	movs	r3, #1
 8003518:	215e      	movs	r1, #94	; 0x5e
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fdf0 	bl	8003100 <lsm6dsl_write_reg>
 8003520:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003528:	f107 0210 	add.w	r2, r7, #16
 800352c:	2301      	movs	r3, #1
 800352e:	2113      	movs	r1, #19
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fdcd 	bl	80030d0 <lsm6dsl_read_reg>
 8003536:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10f      	bne.n	800355e <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800353e:	78bb      	ldrb	r3, [r7, #2]
 8003540:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	7c3b      	ldrb	r3, [r7, #16]
 8003548:	f362 1304 	bfi	r3, r2, #4, #1
 800354c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800354e:	f107 0210 	add.w	r2, r7, #16
 8003552:	2301      	movs	r3, #1
 8003554:	2113      	movs	r1, #19
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fdd2 	bl	8003100 <lsm6dsl_write_reg>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003564:	f107 0220 	add.w	r2, r7, #32
 8003568:	2301      	movs	r3, #1
 800356a:	211a      	movs	r1, #26
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fdaf 	bl	80030d0 <lsm6dsl_read_reg>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d111      	bne.n	800359e <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 800357a:	78bb      	ldrb	r3, [r7, #2]
 800357c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003586:	f362 13c7 	bfi	r3, r2, #7, #1
 800358a:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800358e:	f107 0220 	add.w	r2, r7, #32
 8003592:	2301      	movs	r3, #1
 8003594:	211a      	movs	r1, #26
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fdb2 	bl	8003100 <lsm6dsl_write_reg>
 800359c:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d158      	bne.n	8003656 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80035a4:	f107 020c 	add.w	r2, r7, #12
 80035a8:	2301      	movs	r3, #1
 80035aa:	2158      	movs	r1, #88	; 0x58
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fd8f 	bl	80030d0 <lsm6dsl_read_reg>
 80035b2:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 80035b4:	787b      	ldrb	r3, [r7, #1]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d141      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d13b      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d135      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 80035d8:	787b      	ldrb	r3, [r7, #1]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d12f      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 80035e4:	787b      	ldrb	r3, [r7, #1]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d129      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80035f6:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d123      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80035fc:	7d3b      	ldrb	r3, [r7, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11d      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003608:	7d3b      	ldrb	r3, [r7, #20]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8003610:	2b00      	cmp	r3, #0
 8003612:	d117      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 8003614:	7d3b      	ldrb	r3, [r7, #20]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 800361c:	2b00      	cmp	r3, #0
 800361e:	d111      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003620:	7d3b      	ldrb	r3, [r7, #20]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 800362c:	7d3b      	ldrb	r3, [r7, #20]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8003638:	7d3b      	ldrb	r3, [r7, #20]
 800363a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800363e:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8003644:	7b3b      	ldrb	r3, [r7, #12]
 8003646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364a:	733b      	strb	r3, [r7, #12]
 800364c:	e003      	b.n	8003656 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800364e:	7b3b      	ldrb	r3, [r7, #12]
 8003650:	f36f 13c7 	bfc	r3, #7, #1
 8003654:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	d107      	bne.n	800366c <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800365c:	f107 020c 	add.w	r2, r7, #12
 8003660:	2301      	movs	r3, #1
 8003662:	2158      	movs	r1, #88	; 0x58
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fd4b 	bl	8003100 <lsm6dsl_write_reg>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003680:	f107 0214 	add.w	r2, r7, #20
 8003684:	2301      	movs	r3, #1
 8003686:	210d      	movs	r1, #13
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fd21 	bl	80030d0 <lsm6dsl_read_reg>
 800368e:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80c0 	bne.w	8003818 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8003698:	7d3b      	ldrb	r3, [r7, #20]
 800369a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800369e:	b2d9      	uxtb	r1, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	7813      	ldrb	r3, [r2, #0]
 80036a4:	f361 0300 	bfi	r3, r1, #0, #1
 80036a8:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80036aa:	7d3b      	ldrb	r3, [r7, #20]
 80036ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80036b0:	b2d9      	uxtb	r1, r3
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	7813      	ldrb	r3, [r2, #0]
 80036b6:	f361 0341 	bfi	r3, r1, #1, #1
 80036ba:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 80036bc:	7d3b      	ldrb	r3, [r7, #20]
 80036be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036c2:	b2d9      	uxtb	r1, r3
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	7813      	ldrb	r3, [r2, #0]
 80036c8:	f361 0382 	bfi	r3, r1, #2, #1
 80036cc:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 80036ce:	7d3b      	ldrb	r3, [r7, #20]
 80036d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80036d4:	b2d9      	uxtb	r1, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	7813      	ldrb	r3, [r2, #0]
 80036da:	f361 03c3 	bfi	r3, r1, #3, #1
 80036de:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 80036e0:	7d3b      	ldrb	r3, [r7, #20]
 80036e2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	7813      	ldrb	r3, [r2, #0]
 80036ec:	f361 1304 	bfi	r3, r1, #4, #1
 80036f0:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80036f2:	7d3b      	ldrb	r3, [r7, #20]
 80036f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80036f8:	b2d9      	uxtb	r1, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	7813      	ldrb	r3, [r2, #0]
 80036fe:	f361 1345 	bfi	r3, r1, #5, #1
 8003702:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 8003704:	7d3b      	ldrb	r3, [r7, #20]
 8003706:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800370a:	b2d9      	uxtb	r1, r3
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	7813      	ldrb	r3, [r2, #0]
 8003710:	f361 1386 	bfi	r3, r1, #6, #1
 8003714:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8003716:	7d3b      	ldrb	r3, [r7, #20]
 8003718:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800371c:	b2d9      	uxtb	r1, r3
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	7813      	ldrb	r3, [r2, #0]
 8003722:	f361 13c7 	bfi	r3, r1, #7, #1
 8003726:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8003728:	f107 0210 	add.w	r2, r7, #16
 800372c:	2301      	movs	r3, #1
 800372e:	215e      	movs	r1, #94	; 0x5e
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fccd 	bl	80030d0 <lsm6dsl_read_reg>
 8003736:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d16c      	bne.n	8003818 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 800373e:	7c3b      	ldrb	r3, [r7, #16]
 8003740:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003744:	b2d9      	uxtb	r1, r3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	7853      	ldrb	r3, [r2, #1]
 800374a:	f361 0300 	bfi	r3, r1, #0, #1
 800374e:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 8003750:	7c3b      	ldrb	r3, [r7, #16]
 8003752:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003756:	b2d9      	uxtb	r1, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	7853      	ldrb	r3, [r2, #1]
 800375c:	f361 0341 	bfi	r3, r1, #1, #1
 8003760:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 8003762:	7c3b      	ldrb	r3, [r7, #16]
 8003764:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003768:	b2d9      	uxtb	r1, r3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	7853      	ldrb	r3, [r2, #1]
 800376e:	f361 0382 	bfi	r3, r1, #2, #1
 8003772:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8003774:	7c3b      	ldrb	r3, [r7, #16]
 8003776:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800377a:	b2d9      	uxtb	r1, r3
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	7853      	ldrb	r3, [r2, #1]
 8003780:	f361 03c3 	bfi	r3, r1, #3, #1
 8003784:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8003786:	7c3b      	ldrb	r3, [r7, #16]
 8003788:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800378c:	b2d9      	uxtb	r1, r3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	7853      	ldrb	r3, [r2, #1]
 8003792:	f361 1304 	bfi	r3, r1, #4, #1
 8003796:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8003798:	7c3b      	ldrb	r3, [r7, #16]
 800379a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800379e:	b2d9      	uxtb	r1, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	7853      	ldrb	r3, [r2, #1]
 80037a4:	f361 1345 	bfi	r3, r1, #5, #1
 80037a8:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 80037aa:	7c3b      	ldrb	r3, [r7, #16]
 80037ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80037b0:	b2d9      	uxtb	r1, r3
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	7853      	ldrb	r3, [r2, #1]
 80037b6:	f361 1386 	bfi	r3, r1, #6, #1
 80037ba:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 80037bc:	7c3b      	ldrb	r3, [r7, #16]
 80037be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80037c2:	b2d9      	uxtb	r1, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	7853      	ldrb	r3, [r2, #1]
 80037c8:	f361 13c7 	bfi	r3, r1, #7, #1
 80037cc:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80037ce:	f107 020c 	add.w	r2, r7, #12
 80037d2:	2301      	movs	r3, #1
 80037d4:	2113      	movs	r1, #19
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fc7a 	bl	80030d0 <lsm6dsl_read_reg>
 80037dc:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d119      	bne.n	8003818 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 80037e4:	7b3b      	ldrb	r3, [r7, #12]
 80037e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037ea:	b2d9      	uxtb	r1, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	7893      	ldrb	r3, [r2, #2]
 80037f0:	f361 0300 	bfi	r3, r1, #0, #1
 80037f4:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80037f6:	f107 0218 	add.w	r2, r7, #24
 80037fa:	2301      	movs	r3, #1
 80037fc:	211a      	movs	r1, #26
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fc66 	bl	80030d0 <lsm6dsl_read_reg>
 8003804:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8003806:	7e3b      	ldrb	r3, [r7, #24]
 8003808:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800380c:	b2d9      	uxtb	r1, r3
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	7893      	ldrb	r3, [r2, #2]
 8003812:	f361 0300 	bfi	r3, r1, #0, #1
 8003816:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8003818:	69fb      	ldr	r3, [r7, #28]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800382e:	f107 0208 	add.w	r2, r7, #8
 8003832:	2301      	movs	r3, #1
 8003834:	210a      	movs	r1, #10
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff fc4a 	bl	80030d0 <lsm6dsl_read_reg>
 800383c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	b2da      	uxtb	r2, r3
 800384c:	7a3b      	ldrb	r3, [r7, #8]
 800384e:	f362 0302 	bfi	r3, r2, #0, #3
 8003852:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8003854:	f107 0208 	add.w	r2, r7, #8
 8003858:	2301      	movs	r3, #1
 800385a:	210a      	movs	r1, #10
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff fc4f 	bl	8003100 <lsm6dsl_write_reg>
 8003862:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f001 f86d 	bl	8004958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f80e 	bl	80038a0 <HAL_InitTick>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	71fb      	strb	r3, [r7, #7]
 800388e:	e001      	b.n	8003894 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003890:	f7fe fc7e 	bl	8002190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003894:	79fb      	ldrb	r3, [r7, #7]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_InitTick+0x6c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_InitTick+0x70>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_InitTick+0x6c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f001 f887 	bl	80049de <HAL_SYSTICK_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10f      	bne.n	80038f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d809      	bhi.n	80038f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038dc:	2200      	movs	r2, #0
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	f001 f843 	bl	800496e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_InitTick+0x74>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e007      	b.n	8003900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	e004      	b.n	8003900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e001      	b.n	8003900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000000c 	.word	0x2000000c
 8003910:	20000004 	.word	0x20000004
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x20>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_IncTick+0x24>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4413      	add	r3, r2
 8003928:	4a04      	ldr	r2, [pc, #16]	; (800393c <HAL_IncTick+0x24>)
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	2000000c 	.word	0x2000000c
 800393c:	200006a8 	.word	0x200006a8

08003940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return uwTick;
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <HAL_GetTick+0x14>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200006a8 	.word	0x200006a8

08003958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff ffee 	bl	8003940 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d005      	beq.n	800397e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <HAL_Delay+0x44>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397e:	bf00      	nop
 8003980:	f7ff ffde 	bl	8003940 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d8f7      	bhi.n	8003980 <HAL_Delay+0x28>
  {
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	2000000c 	.word	0x2000000c

080039a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3360      	adds	r3, #96	; 0x60
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <LL_ADC_SetOffset+0x44>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	03fff000 	.word	0x03fff000

08003a50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3360      	adds	r3, #96	; 0x60
 8003a5e:	461a      	mov	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	615a      	str	r2, [r3, #20]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3330      	adds	r3, #48	; 0x30
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0a1b      	lsrs	r3, r3, #8
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	4413      	add	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	211f      	movs	r1, #31
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	f003 011f 	and.w	r1, r3, #31
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0e5b      	lsrs	r3, r3, #25
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	4413      	add	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	0d1b      	lsrs	r3, r3, #20
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2107      	movs	r1, #7
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	401a      	ands	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	0d1b      	lsrs	r3, r3, #20
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	431a      	orrs	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0318 	and.w	r3, r3, #24
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bac:	40d9      	lsrs	r1, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	0007ffff 	.word	0x0007ffff

08003bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6093      	str	r3, [r2, #8]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d101      	bne.n	8003c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c58:	d101      	bne.n	8003c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <LL_ADC_IsEnabled+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <LL_ADC_IsEnabled+0x1a>
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d101      	bne.n	8003caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d101      	bne.n	8003cd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e12f      	b.n	8003f5a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fc fe43 	bl	8000994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff67 	bl	8003bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff ff4d 	bl	8003bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff82 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d115      	bne.n	8003d72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff66 	bl	8003c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d50:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_ADC_Init+0x284>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	4a84      	ldr	r2, [pc, #528]	; (8003f68 <HAL_ADC_Init+0x288>)
 8003d58:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d64:	e002      	b.n	8003d6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f9      	bne.n	8003d66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff64 	bl	8003c44 <LL_ADC_IsInternalRegulatorEnabled>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff75 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003da8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 80c8 	bne.w	8003f48 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f040 80c4 	bne.w	8003f48 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003dc8:	f043 0202 	orr.w	r2, r3, #2
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff49 	bl	8003c6c <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de0:	4862      	ldr	r0, [pc, #392]	; (8003f6c <HAL_ADC_Init+0x28c>)
 8003de2:	f7ff ff43 	bl	8003c6c <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	485f      	ldr	r0, [pc, #380]	; (8003f70 <HAL_ADC_Init+0x290>)
 8003df4:	f7ff fdd4 	bl	80039a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7e5b      	ldrb	r3, [r3, #25]
 8003dfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d106      	bne.n	8003e34 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	045b      	lsls	r3, r3, #17
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_ADC_Init+0x294>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	69b9      	ldr	r1, [r7, #24]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff12 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003e6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff1f 	bl	8003cb8 <LL_ADC_INJ_IsConversionOngoing>
 8003e7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d140      	bne.n	8003f04 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d13d      	bne.n	8003f04 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7e1b      	ldrb	r3, [r3, #24]
 8003e90:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e92:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e9a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eaa:	f023 0306 	bic.w	r3, r3, #6
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	69b9      	ldr	r1, [r7, #24]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d118      	bne.n	8003ef4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ede:	4311      	orrs	r1, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e007      	b.n	8003f04 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10c      	bne.n	8003f26 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f023 010f 	bic.w	r1, r3, #15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	1e5a      	subs	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
 8003f24:	e007      	b.n	8003f36 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 020f 	bic.w	r2, r2, #15
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58
 8003f46:	e007      	b.n	8003f58 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000004 	.word	0x20000004
 8003f68:	053e2d63 	.word	0x053e2d63
 8003f6c:	50040000 	.word	0x50040000
 8003f70:	50040300 	.word	0x50040300
 8003f74:	fff0c007 	.word	0xfff0c007

08003f78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b0b6      	sub	sp, #216	; 0xd8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x22>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e3d5      	b.n	8004746 <HAL_ADC_ConfigChannel+0x7ce>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fe73 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 83ba 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d824      	bhi.n	8004006 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	3b02      	subs	r3, #2
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d81b      	bhi.n	8003ffe <HAL_ADC_ConfigChannel+0x86>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <HAL_ADC_ConfigChannel+0x54>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003fed 	.word	0x08003fed
 8003fd8:	08003ff5 	.word	0x08003ff5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	220c      	movs	r2, #12
 8003fe0:	605a      	str	r2, [r3, #4]
          break;
 8003fe2:	e011      	b.n	8004008 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2212      	movs	r2, #18
 8003fe8:	605a      	str	r2, [r3, #4]
          break;
 8003fea:	e00d      	b.n	8004008 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2218      	movs	r2, #24
 8003ff0:	605a      	str	r2, [r3, #4]
          break;
 8003ff2:	e009      	b.n	8004008 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffa:	605a      	str	r2, [r3, #4]
          break;
 8003ffc:	e004      	b.n	8004008 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2206      	movs	r2, #6
 8004002:	605a      	str	r2, [r3, #4]
          break;
 8004004:	e000      	b.n	8004008 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004006:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	f7ff fd5f 	bl	8003ad8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fe37 	bl	8003c92 <LL_ADC_REG_IsConversionOngoing>
 8004024:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fe43 	bl	8003cb8 <LL_ADC_INJ_IsConversionOngoing>
 8004032:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004036:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 81c1 	bne.w	80043c2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004040:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004044:	2b00      	cmp	r3, #0
 8004046:	f040 81bc 	bne.w	80043c2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004052:	d10f      	bne.n	8004074 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2200      	movs	r2, #0
 800405e:	4619      	mov	r1, r3
 8004060:	f7ff fd66 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fd20 	bl	8003ab2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004072:	e00e      	b.n	8004092 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6819      	ldr	r1, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	461a      	mov	r2, r3
 8004082:	f7ff fd55 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2100      	movs	r1, #0
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fd10 	bl	8003ab2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d00a      	beq.n	80040ca <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6919      	ldr	r1, [r3, #16]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040c4:	f7ff fca0 	bl	8003a08 <LL_ADC_SetOffset>
 80040c8:	e17b      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fcbd 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x17e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2100      	movs	r1, #0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fcb2 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80040ec:	4603      	mov	r3, r0
 80040ee:	0e9b      	lsrs	r3, r3, #26
 80040f0:	f003 021f 	and.w	r2, r3, #31
 80040f4:	e01e      	b.n	8004134 <HAL_ADC_ConfigChannel+0x1bc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fca7 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004102:	4603      	mov	r3, r0
 8004104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800411c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8004124:	2320      	movs	r3, #32
 8004126:	e004      	b.n	8004132 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8004128:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_ADC_ConfigChannel+0x1d4>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	0e9b      	lsrs	r3, r3, #26
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	e018      	b.n	800417e <HAL_ADC_ConfigChannel+0x206>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004168:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e004      	b.n	800417e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8004174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800417e:	429a      	cmp	r2, r3
 8004180:	d106      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fc76 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fc5a 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x244>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fc4f 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80041b2:	4603      	mov	r3, r0
 80041b4:	0e9b      	lsrs	r3, r3, #26
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	e01e      	b.n	80041fa <HAL_ADC_ConfigChannel+0x282>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fc44 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80041da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80041e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e004      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80041ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x29a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	0e9b      	lsrs	r3, r3, #26
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	e018      	b.n	8004244 <HAL_ADC_ConfigChannel+0x2cc>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800421e:	fa93 f3a3 	rbit	r3, r3
 8004222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800422a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800422e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8004236:	2320      	movs	r3, #32
 8004238:	e004      	b.n	8004244 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800423a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004244:	429a      	cmp	r2, r3
 8004246:	d106      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fc13 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2102      	movs	r1, #2
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fbf7 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x30a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fbec 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	0e9b      	lsrs	r3, r3, #26
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	e01e      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x348>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fbe1 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800428e:	4603      	mov	r3, r0
 8004290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80042a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80042a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e004      	b.n	80042be <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80042b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x360>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0e9b      	lsrs	r3, r3, #26
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	e016      	b.n	8004306 <HAL_ADC_ConfigChannel+0x38e>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80042ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80042f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80042f8:	2320      	movs	r3, #32
 80042fa:	e004      	b.n	8004306 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80042fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004306:	429a      	cmp	r2, r3
 8004308:	d106      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2200      	movs	r2, #0
 8004310:	2102      	movs	r1, #2
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fbb2 	bl	8003a7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2103      	movs	r1, #3
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fb96 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x3cc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2103      	movs	r1, #3
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fb8b 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 800433a:	4603      	mov	r3, r0
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 021f 	and.w	r2, r3, #31
 8004342:	e017      	b.n	8004374 <HAL_ADC_ConfigChannel+0x3fc>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2103      	movs	r1, #3
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fb80 	bl	8003a50 <LL_ADC_GetOffsetChannel>
 8004350:	4603      	mov	r3, r0
 8004352:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800435c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800435e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004366:	2320      	movs	r3, #32
 8004368:	e003      	b.n	8004372 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800436a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	2b00      	cmp	r3, #0
 800437e:	d105      	bne.n	800438c <HAL_ADC_ConfigChannel+0x414>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	e011      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x438>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004394:	fa93 f3a3 	rbit	r3, r3
 8004398:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800439a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80043a4:	2320      	movs	r3, #32
 80043a6:	e003      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d106      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2103      	movs	r1, #3
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fb5d 	bl	8003a7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fc50 	bl	8003c6c <LL_ADC_IsEnabled>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8140 	bne.w	8004654 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	461a      	mov	r2, r3
 80043e2:	f7ff fbd1 	bl	8003b88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4a8f      	ldr	r2, [pc, #572]	; (8004628 <HAL_ADC_ConfigChannel+0x6b0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	f040 8131 	bne.w	8004654 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <HAL_ADC_ConfigChannel+0x4a2>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0e9b      	lsrs	r3, r3, #26
 8004408:	3301      	adds	r3, #1
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2b09      	cmp	r3, #9
 8004410:	bf94      	ite	ls
 8004412:	2301      	movls	r3, #1
 8004414:	2300      	movhi	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e019      	b.n	800444e <HAL_ADC_ConfigChannel+0x4d6>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800442a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800442c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e003      	b.n	800443e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2b09      	cmp	r3, #9
 8004446:	bf94      	ite	ls
 8004448:	2301      	movls	r3, #1
 800444a:	2300      	movhi	r3, #0
 800444c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800444e:	2b00      	cmp	r3, #0
 8004450:	d079      	beq.n	8004546 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	2b00      	cmp	r3, #0
 800445c:	d107      	bne.n	800446e <HAL_ADC_ConfigChannel+0x4f6>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	3301      	adds	r3, #1
 8004466:	069b      	lsls	r3, r3, #26
 8004468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800446c:	e015      	b.n	800449a <HAL_ADC_ConfigChannel+0x522>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800447c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8004486:	2320      	movs	r3, #32
 8004488:	e003      	b.n	8004492 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800448a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	3301      	adds	r3, #1
 8004494:	069b      	lsls	r3, r3, #26
 8004496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x542>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	0e9b      	lsrs	r3, r3, #26
 80044ac:	3301      	adds	r3, #1
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	e017      	b.n	80044ea <HAL_ADC_ConfigChannel+0x572>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80044c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80044d2:	2320      	movs	r3, #32
 80044d4:	e003      	b.n	80044de <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80044d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d8:	fab3 f383 	clz	r3, r3
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	3301      	adds	r3, #1
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	ea42 0103 	orr.w	r1, r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x598>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0e9b      	lsrs	r3, r3, #26
 8004500:	3301      	adds	r3, #1
 8004502:	f003 021f 	and.w	r2, r3, #31
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	051b      	lsls	r3, r3, #20
 800450e:	e018      	b.n	8004542 <HAL_ADC_ConfigChannel+0x5ca>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	fa93 f3a3 	rbit	r3, r3
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004520:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8004528:	2320      	movs	r3, #32
 800452a:	e003      	b.n	8004534 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800452c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3301      	adds	r3, #1
 8004536:	f003 021f 	and.w	r2, r3, #31
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004542:	430b      	orrs	r3, r1
 8004544:	e081      	b.n	800464a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800454e:	2b00      	cmp	r3, #0
 8004550:	d107      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x5ea>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e9b      	lsrs	r3, r3, #26
 8004558:	3301      	adds	r3, #1
 800455a:	069b      	lsls	r3, r3, #26
 800455c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004560:	e015      	b.n	800458e <HAL_ADC_ConfigChannel+0x616>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e003      	b.n	8004586 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3301      	adds	r3, #1
 8004588:	069b      	lsls	r3, r3, #26
 800458a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x636>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0e9b      	lsrs	r3, r3, #26
 80045a0:	3301      	adds	r3, #1
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	e017      	b.n	80045de <HAL_ADC_ConfigChannel+0x666>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	61fb      	str	r3, [r7, #28]
  return result;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80045c6:	2320      	movs	r3, #32
 80045c8:	e003      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	fab3 f383 	clz	r3, r3
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2101      	movs	r1, #1
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	ea42 0103 	orr.w	r1, r2, r3
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <HAL_ADC_ConfigChannel+0x692>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 021f 	and.w	r2, r3, #31
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	3b1e      	subs	r3, #30
 8004602:	051b      	lsls	r3, r3, #20
 8004604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004608:	e01e      	b.n	8004648 <HAL_ADC_ConfigChannel+0x6d0>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	613b      	str	r3, [r7, #16]
  return result;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d104      	bne.n	800462c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004622:	2320      	movs	r3, #32
 8004624:	e006      	b.n	8004634 <HAL_ADC_ConfigChannel+0x6bc>
 8004626:	bf00      	nop
 8004628:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f003 021f 	and.w	r2, r3, #31
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	3b1e      	subs	r3, #30
 8004642:	051b      	lsls	r3, r3, #20
 8004644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004648:	430b      	orrs	r3, r1
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	4619      	mov	r1, r3
 8004650:	f7ff fa6e 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_ADC_ConfigChannel+0x7d8>)
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d06c      	beq.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004660:	483c      	ldr	r0, [pc, #240]	; (8004754 <HAL_ADC_ConfigChannel+0x7dc>)
 8004662:	f7ff f9c3 	bl	80039ec <LL_ADC_GetCommonPathInternalCh>
 8004666:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3a      	ldr	r2, [pc, #232]	; (8004758 <HAL_ADC_ConfigChannel+0x7e0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d127      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d121      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a35      	ldr	r2, [pc, #212]	; (800475c <HAL_ADC_ConfigChannel+0x7e4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d157      	bne.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800468e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004692:	4619      	mov	r1, r3
 8004694:	482f      	ldr	r0, [pc, #188]	; (8004754 <HAL_ADC_ConfigChannel+0x7dc>)
 8004696:	f7ff f996 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800469a:	4b31      	ldr	r3, [pc, #196]	; (8004760 <HAL_ADC_ConfigChannel+0x7e8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	4a30      	ldr	r2, [pc, #192]	; (8004764 <HAL_ADC_ConfigChannel+0x7ec>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046b4:	e002      	b.n	80046bc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f9      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c2:	e03a      	b.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a27      	ldr	r2, [pc, #156]	; (8004768 <HAL_ADC_ConfigChannel+0x7f0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x77e>
 80046ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_ADC_ConfigChannel+0x7e4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d12a      	bne.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ec:	4619      	mov	r1, r3
 80046ee:	4819      	ldr	r0, [pc, #100]	; (8004754 <HAL_ADC_ConfigChannel+0x7dc>)
 80046f0:	f7ff f969 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046f4:	e021      	b.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_ADC_ConfigChannel+0x7f4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d11c      	bne.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <HAL_ADC_ConfigChannel+0x7e4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d111      	bne.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800471a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800471e:	4619      	mov	r1, r3
 8004720:	480c      	ldr	r0, [pc, #48]	; (8004754 <HAL_ADC_ConfigChannel+0x7dc>)
 8004722:	f7ff f950 	bl	80039c6 <LL_ADC_SetCommonPathInternalCh>
 8004726:	e008      	b.n	800473a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004742:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004746:	4618      	mov	r0, r3
 8004748:	37d8      	adds	r7, #216	; 0xd8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	80080000 	.word	0x80080000
 8004754:	50040300 	.word	0x50040300
 8004758:	c7520000 	.word	0xc7520000
 800475c:	50040000 	.word	0x50040000
 8004760:	20000004 	.word	0x20000004
 8004764:	053e2d63 	.word	0x053e2d63
 8004768:	cb840000 	.word	0xcb840000
 800476c:	80000001 	.word	0x80000001

08004770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800478c:	4013      	ands	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	60d3      	str	r3, [r2, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <__NVIC_GetPriorityGrouping+0x18>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	f003 0307 	and.w	r3, r3, #7
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	db0b      	blt.n	80047fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	4907      	ldr	r1, [pc, #28]	; (800480c <__NVIC_EnableIRQ+0x38>)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2001      	movs	r0, #1
 80047f6:	fa00 f202 	lsl.w	r2, r0, r2
 80047fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e100 	.word	0xe000e100

08004810 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	2b00      	cmp	r3, #0
 8004820:	db12      	blt.n	8004848 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	f003 021f 	and.w	r2, r3, #31
 8004828:	490a      	ldr	r1, [pc, #40]	; (8004854 <__NVIC_DisableIRQ+0x44>)
 800482a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2001      	movs	r0, #1
 8004832:	fa00 f202 	lsl.w	r2, r0, r2
 8004836:	3320      	adds	r3, #32
 8004838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800483c:	f3bf 8f4f 	dsb	sy
}
 8004840:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004842:	f3bf 8f6f 	isb	sy
}
 8004846:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000e100 	.word	0xe000e100

08004858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	6039      	str	r1, [r7, #0]
 8004862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004868:	2b00      	cmp	r3, #0
 800486a:	db0a      	blt.n	8004882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	490c      	ldr	r1, [pc, #48]	; (80048a4 <__NVIC_SetPriority+0x4c>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	0112      	lsls	r2, r2, #4
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	440b      	add	r3, r1
 800487c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004880:	e00a      	b.n	8004898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	4908      	ldr	r1, [pc, #32]	; (80048a8 <__NVIC_SetPriority+0x50>)
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	3b04      	subs	r3, #4
 8004890:	0112      	lsls	r2, r2, #4
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	440b      	add	r3, r1
 8004896:	761a      	strb	r2, [r3, #24]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000e100 	.word	0xe000e100
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	; 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f1c3 0307 	rsb	r3, r3, #7
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	bf28      	it	cs
 80048ca:	2304      	movcs	r3, #4
 80048cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2b06      	cmp	r3, #6
 80048d4:	d902      	bls.n	80048dc <NVIC_EncodePriority+0x30>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3b03      	subs	r3, #3
 80048da:	e000      	b.n	80048de <NVIC_EncodePriority+0x32>
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e0:	f04f 32ff 	mov.w	r2, #4294967295
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	401a      	ands	r2, r3
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f4:	f04f 31ff 	mov.w	r1, #4294967295
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	43d9      	mvns	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004904:	4313      	orrs	r3, r2
         );
}
 8004906:	4618      	mov	r0, r3
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3b01      	subs	r3, #1
 8004920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004924:	d301      	bcc.n	800492a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004926:	2301      	movs	r3, #1
 8004928:	e00f      	b.n	800494a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <SysTick_Config+0x40>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3b01      	subs	r3, #1
 8004930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004932:	210f      	movs	r1, #15
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	f7ff ff8e 	bl	8004858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <SysTick_Config+0x40>)
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004942:	4b04      	ldr	r3, [pc, #16]	; (8004954 <SysTick_Config+0x40>)
 8004944:	2207      	movs	r2, #7
 8004946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	e000e010 	.word	0xe000e010

08004958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ff05 	bl	8004770 <__NVIC_SetPriorityGrouping>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004980:	f7ff ff1a 	bl	80047b8 <__NVIC_GetPriorityGrouping>
 8004984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f7ff ff8e 	bl	80048ac <NVIC_EncodePriority>
 8004990:	4602      	mov	r2, r0
 8004992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff5d 	bl	8004858 <__NVIC_SetPriority>
}
 800499e:	bf00      	nop
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff0d 	bl	80047d4 <__NVIC_EnableIRQ>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff1d 	bl	8004810 <__NVIC_DisableIRQ>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ff94 	bl	8004914 <SysTick_Config>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0ac      	b.n	8004b64 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f8b2 	bl	8004b78 <DFSDM_GetChannelFromInstance>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4a55      	ldr	r2, [pc, #340]	; (8004b6c <HAL_DFSDM_ChannelInit+0x174>)
 8004a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e09f      	b.n	8004b64 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fc fb4f 	bl	80010c8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004a2a:	4b51      	ldr	r3, [pc, #324]	; (8004b70 <HAL_DFSDM_ChannelInit+0x178>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a4f      	ldr	r2, [pc, #316]	; (8004b70 <HAL_DFSDM_ChannelInit+0x178>)
 8004a32:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004a34:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_DFSDM_ChannelInit+0x178>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d125      	bne.n	8004a88 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004a3c:	4b4d      	ldr	r3, [pc, #308]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a4c      	ldr	r2, [pc, #304]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004a48:	4b4a      	ldr	r3, [pc, #296]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4948      	ldr	r1, [pc, #288]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a46      	ldr	r2, [pc, #280]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a5c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004a60:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d108      	bne.n	8004a7c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004a6a:	4b42      	ldr	r3, [pc, #264]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	493f      	ldr	r1, [pc, #252]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004a7c:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004a96:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004aa6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004aac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 020f 	bic.w	r2, r2, #15
 8004ac4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6819      	ldr	r1, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004aec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6899      	ldr	r1, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f002 0207 	and.w	r2, r2, #7
 8004b18:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b44:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f810 	bl	8004b78 <DFSDM_GetChannelFromInstance>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4904      	ldr	r1, [pc, #16]	; (8004b6c <HAL_DFSDM_ChannelInit+0x174>)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200006b0 	.word	0x200006b0
 8004b70:	200006ac 	.word	0x200006ac
 8004b74:	40016000 	.word	0x40016000

08004b78 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <DFSDM_GetChannelFromInstance+0x7c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d102      	bne.n	8004b8e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e02b      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <DFSDM_GetChannelFromInstance+0x80>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d102      	bne.n	8004b9c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e024      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <DFSDM_GetChannelFromInstance+0x84>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d102      	bne.n	8004baa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e01d      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <DFSDM_GetChannelFromInstance+0x88>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d102      	bne.n	8004bb8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e016      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <DFSDM_GetChannelFromInstance+0x8c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d102      	bne.n	8004bc6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004bc0:	2305      	movs	r3, #5
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e00f      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <DFSDM_GetChannelFromInstance+0x90>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d102      	bne.n	8004bd4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004bce:	2306      	movs	r3, #6
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e008      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	; (8004c0c <DFSDM_GetChannelFromInstance+0x94>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d102      	bne.n	8004be2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004bdc:	2307      	movs	r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e001      	b.n	8004be6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004be2:	2303      	movs	r3, #3
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	40016000 	.word	0x40016000
 8004bf8:	40016020 	.word	0x40016020
 8004bfc:	40016040 	.word	0x40016040
 8004c00:	40016080 	.word	0x40016080
 8004c04:	400160a0 	.word	0x400160a0
 8004c08:	400160c0 	.word	0x400160c0
 8004c0c:	400160e0 	.word	0x400160e0

08004c10 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	605a      	str	r2, [r3, #4]
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	bf00      	nop
  }

  return status;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e003      	b.n	8004c60 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2201      	movs	r2, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_EXTI_IRQHandler+0x5c>)
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4798      	blx	r3
    }
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40010414 	.word	0x40010414

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cda:	e166      	b.n	8004faa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8158 	beq.w	8004fa4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d005      	beq.n	8004d0c <HAL_GPIO_Init+0x40>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d130      	bne.n	8004d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	2203      	movs	r2, #3
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d42:	2201      	movs	r2, #1
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 0201 	and.w	r2, r3, #1
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d017      	beq.n	8004daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2203      	movs	r2, #3
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d123      	bne.n	8004dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3208      	adds	r2, #8
 8004dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	6939      	ldr	r1, [r7, #16]
 8004dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0203 	and.w	r2, r3, #3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80b2 	beq.w	8004fa4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e40:	4b61      	ldr	r3, [pc, #388]	; (8004fc8 <HAL_GPIO_Init+0x2fc>)
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	4a60      	ldr	r2, [pc, #384]	; (8004fc8 <HAL_GPIO_Init+0x2fc>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	; (8004fc8 <HAL_GPIO_Init+0x2fc>)
 8004e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_GPIO_Init+0x300>)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	220f      	movs	r2, #15
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e82:	d02b      	beq.n	8004edc <HAL_GPIO_Init+0x210>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a52      	ldr	r2, [pc, #328]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d025      	beq.n	8004ed8 <HAL_GPIO_Init+0x20c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a51      	ldr	r2, [pc, #324]	; (8004fd4 <HAL_GPIO_Init+0x308>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01f      	beq.n	8004ed4 <HAL_GPIO_Init+0x208>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a50      	ldr	r2, [pc, #320]	; (8004fd8 <HAL_GPIO_Init+0x30c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d019      	beq.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a4f      	ldr	r2, [pc, #316]	; (8004fdc <HAL_GPIO_Init+0x310>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_GPIO_Init+0x200>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a4e      	ldr	r2, [pc, #312]	; (8004fe0 <HAL_GPIO_Init+0x314>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_GPIO_Init+0x1fc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a4d      	ldr	r2, [pc, #308]	; (8004fe4 <HAL_GPIO_Init+0x318>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <HAL_GPIO_Init+0x1f8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a4c      	ldr	r2, [pc, #304]	; (8004fe8 <HAL_GPIO_Init+0x31c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_GPIO_Init+0x1f4>
 8004ebc:	2307      	movs	r3, #7
 8004ebe:	e00e      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	e00c      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ec4:	2306      	movs	r3, #6
 8004ec6:	e00a      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ec8:	2305      	movs	r3, #5
 8004eca:	e008      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	e006      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e004      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e002      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <HAL_GPIO_Init+0x212>
 8004edc:	2300      	movs	r3, #0
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	f002 0203 	and.w	r2, r2, #3
 8004ee4:	0092      	lsls	r2, r2, #2
 8004ee6:	4093      	lsls	r3, r2
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004eee:	4937      	ldr	r1, [pc, #220]	; (8004fcc <HAL_GPIO_Init+0x300>)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004efc:	4b3b      	ldr	r3, [pc, #236]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f20:	4a32      	ldr	r2, [pc, #200]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f26:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4013      	ands	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f4a:	4a28      	ldr	r2, [pc, #160]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f50:	4b26      	ldr	r3, [pc, #152]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f74:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4013      	ands	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <HAL_GPIO_Init+0x320>)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f47f ae91 	bne.w	8004cdc <HAL_GPIO_Init+0x10>
  }
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	48000400 	.word	0x48000400
 8004fd4:	48000800 	.word	0x48000800
 8004fd8:	48000c00 	.word	0x48000c00
 8004fdc:	48001000 	.word	0x48001000
 8004fe0:	48001400 	.word	0x48001400
 8004fe4:	48001800 	.word	0x48001800
 8004fe8:	48001c00 	.word	0x48001c00
 8004fec:	40010400 	.word	0x40010400

08004ff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004ffe:	e0c9      	b.n	8005194 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005000:	2201      	movs	r2, #1
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80bc 	beq.w	800518e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005016:	4a66      	ldr	r2, [pc, #408]	; (80051b0 <HAL_GPIO_DeInit+0x1c0>)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	3302      	adds	r3, #2
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	220f      	movs	r2, #15
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800503e:	d02b      	beq.n	8005098 <HAL_GPIO_DeInit+0xa8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a5c      	ldr	r2, [pc, #368]	; (80051b4 <HAL_GPIO_DeInit+0x1c4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d025      	beq.n	8005094 <HAL_GPIO_DeInit+0xa4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a5b      	ldr	r2, [pc, #364]	; (80051b8 <HAL_GPIO_DeInit+0x1c8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d01f      	beq.n	8005090 <HAL_GPIO_DeInit+0xa0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a5a      	ldr	r2, [pc, #360]	; (80051bc <HAL_GPIO_DeInit+0x1cc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d019      	beq.n	800508c <HAL_GPIO_DeInit+0x9c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a59      	ldr	r2, [pc, #356]	; (80051c0 <HAL_GPIO_DeInit+0x1d0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <HAL_GPIO_DeInit+0x98>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a58      	ldr	r2, [pc, #352]	; (80051c4 <HAL_GPIO_DeInit+0x1d4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00d      	beq.n	8005084 <HAL_GPIO_DeInit+0x94>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a57      	ldr	r2, [pc, #348]	; (80051c8 <HAL_GPIO_DeInit+0x1d8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <HAL_GPIO_DeInit+0x90>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_GPIO_DeInit+0x1dc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d101      	bne.n	800507c <HAL_GPIO_DeInit+0x8c>
 8005078:	2307      	movs	r3, #7
 800507a:	e00e      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 800507c:	2308      	movs	r3, #8
 800507e:	e00c      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005080:	2306      	movs	r3, #6
 8005082:	e00a      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005084:	2305      	movs	r3, #5
 8005086:	e008      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005088:	2304      	movs	r3, #4
 800508a:	e006      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 800508c:	2303      	movs	r3, #3
 800508e:	e004      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005090:	2302      	movs	r3, #2
 8005092:	e002      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_GPIO_DeInit+0xaa>
 8005098:	2300      	movs	r3, #0
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	f002 0203 	and.w	r2, r2, #3
 80050a0:	0092      	lsls	r2, r2, #2
 80050a2:	4093      	lsls	r3, r2
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d132      	bne.n	8005110 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80050aa:	4b49      	ldr	r3, [pc, #292]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	4947      	ldr	r1, [pc, #284]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80050b8:	4b45      	ldr	r3, [pc, #276]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	4943      	ldr	r1, [pc, #268]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80050c6:	4b42      	ldr	r3, [pc, #264]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	4940      	ldr	r1, [pc, #256]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	43db      	mvns	r3, r3
 80050dc:	493c      	ldr	r1, [pc, #240]	; (80051d0 <HAL_GPIO_DeInit+0x1e0>)
 80050de:	4013      	ands	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	220f      	movs	r2, #15
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80050f2:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_GPIO_DeInit+0x1c0>)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	3302      	adds	r3, #2
 80050fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43da      	mvns	r2, r3
 8005102:	482b      	ldr	r0, [pc, #172]	; (80051b0 <HAL_GPIO_DeInit+0x1c0>)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	089b      	lsrs	r3, r3, #2
 8005108:	400a      	ands	r2, r1
 800510a:	3302      	adds	r3, #2
 800510c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	2103      	movs	r1, #3
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	08da      	lsrs	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3208      	adds	r2, #8
 800512c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	220f      	movs	r2, #15
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	08d2      	lsrs	r2, r2, #3
 8005144:	4019      	ands	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3208      	adds	r2, #8
 800514a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2103      	movs	r1, #3
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	2101      	movs	r1, #1
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2103      	movs	r1, #3
 8005182:	fa01 f303 	lsl.w	r3, r1, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	401a      	ands	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	3301      	adds	r3, #1
 8005192:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f af2f 	bne.w	8005000 <HAL_GPIO_DeInit+0x10>
  }
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	48000400 	.word	0x48000400
 80051b8:	48000800 	.word	0x48000800
 80051bc:	48000c00 	.word	0x48000c00
 80051c0:	48001000 	.word	0x48001000
 80051c4:	48001400 	.word	0x48001400
 80051c8:	48001800 	.word	0x48001800
 80051cc:	48001c00 	.word	0x48001c00
 80051d0:	40010400 	.word	0x40010400

080051d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e001      	b.n	80051f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005220:	e002      	b.n	8005228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fc fabc 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40010400 	.word	0x40010400

08005264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e081      	b.n	800537a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f902 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2224      	movs	r2, #36	; 0x24
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0201 	bic.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e006      	b.n	80052ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80052ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d104      	bne.n	80052fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800530c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69d9      	ldr	r1, [r3, #28]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e021      	b.n	80053d8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fc f8cf 	bl	8001550 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	4608      	mov	r0, r1
 80053ea:	4611      	mov	r1, r2
 80053ec:	461a      	mov	r2, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	817b      	strh	r3, [r7, #10]
 80053f2:	460b      	mov	r3, r1
 80053f4:	813b      	strh	r3, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	f040 80f9 	bne.w	80055fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_I2C_Mem_Write+0x34>
 800540e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800541a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0ed      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_I2C_Mem_Write+0x4e>
 800542a:	2302      	movs	r3, #2
 800542c:	e0e6      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005436:	f7fe fa83 	bl	8003940 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2319      	movs	r3, #25
 8005442:	2201      	movs	r2, #1
 8005444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fadd 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0d1      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005480:	88f8      	ldrh	r0, [r7, #6]
 8005482:	893a      	ldrh	r2, [r7, #8]
 8005484:	8979      	ldrh	r1, [r7, #10]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	4603      	mov	r3, r0
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f9ed 	bl	8005870 <I2C_RequestMemoryWrite>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0a9      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2bff      	cmp	r3, #255	; 0xff
 80054b0:	d90e      	bls.n	80054d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	8979      	ldrh	r1, [r7, #10]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fc45 	bl	8005d58 <I2C_TransferConfig>
 80054ce:	e00f      	b.n	80054f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	8979      	ldrh	r1, [r7, #10]
 80054e2:	2300      	movs	r3, #0
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fc34 	bl	8005d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 fac7 	bl	8005a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e07b      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d034      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d130      	bne.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 fa59 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e04d      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2bff      	cmp	r3, #255	; 0xff
 8005568:	d90e      	bls.n	8005588 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22ff      	movs	r2, #255	; 0xff
 800556e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	b2da      	uxtb	r2, r3
 8005576:	8979      	ldrh	r1, [r7, #10]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fbe9 	bl	8005d58 <I2C_TransferConfig>
 8005586:	e00f      	b.n	80055a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005596:	b2da      	uxtb	r2, r3
 8005598:	8979      	ldrh	r1, [r7, #10]
 800559a:	2300      	movs	r3, #0
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fbd8 	bl	8005d58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d19e      	bne.n	80054f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 faa6 	bl	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e01a      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2220      	movs	r2, #32
 80055cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6859      	ldr	r1, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <HAL_I2C_Mem_Write+0x224>)
 80055da:	400b      	ands	r3, r1
 80055dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3718      	adds	r7, #24
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	fe00e800 	.word	0xfe00e800

08005608 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	4608      	mov	r0, r1
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	4603      	mov	r3, r0
 8005618:	817b      	strh	r3, [r7, #10]
 800561a:	460b      	mov	r3, r1
 800561c:	813b      	strh	r3, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	f040 80fd 	bne.w	800582a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_I2C_Mem_Read+0x34>
 8005636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0f1      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_I2C_Mem_Read+0x4e>
 8005652:	2302      	movs	r3, #2
 8005654:	e0ea      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800565e:	f7fe f96f 	bl	8003940 <HAL_GetTick>
 8005662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2319      	movs	r3, #25
 800566a:	2201      	movs	r2, #1
 800566c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f9c9 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0d5      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2222      	movs	r2, #34	; 0x22
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2240      	movs	r2, #64	; 0x40
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a8:	88f8      	ldrh	r0, [r7, #6]
 80056aa:	893a      	ldrh	r2, [r7, #8]
 80056ac:	8979      	ldrh	r1, [r7, #10]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4603      	mov	r3, r0
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f92d 	bl	8005918 <I2C_RequestMemoryRead>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0ad      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2bff      	cmp	r3, #255	; 0xff
 80056d8:	d90e      	bls.n	80056f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	22ff      	movs	r2, #255	; 0xff
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	8979      	ldrh	r1, [r7, #10]
 80056e8:	4b52      	ldr	r3, [pc, #328]	; (8005834 <HAL_I2C_Mem_Read+0x22c>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fb31 	bl	8005d58 <I2C_TransferConfig>
 80056f6:	e00f      	b.n	8005718 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005706:	b2da      	uxtb	r2, r3
 8005708:	8979      	ldrh	r1, [r7, #10]
 800570a:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_I2C_Mem_Read+0x22c>)
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fb20 	bl	8005d58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2200      	movs	r2, #0
 8005720:	2104      	movs	r1, #4
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f970 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e07c      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d034      	beq.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d130      	bne.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2200      	movs	r2, #0
 800577e:	2180      	movs	r1, #128	; 0x80
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f941 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e04d      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d90e      	bls.n	80057b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	22ff      	movs	r2, #255	; 0xff
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fad1 	bl	8005d58 <I2C_TransferConfig>
 80057b6:	e00f      	b.n	80057d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	8979      	ldrh	r1, [r7, #10]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fac0 	bl	8005d58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d19a      	bne.n	8005718 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f98e 	bl	8005b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e01a      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2220      	movs	r2, #32
 80057fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_I2C_Mem_Read+0x230>)
 800580a:	400b      	ands	r3, r1
 800580c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800582a:	2302      	movs	r3, #2
  }
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	80002400 	.word	0x80002400
 8005838:	fe00e800 	.word	0xfe00e800

0800583c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584a:	b2db      	uxtb	r3, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4603      	mov	r3, r0
 8005880:	817b      	strh	r3, [r7, #10]
 8005882:	460b      	mov	r3, r1
 8005884:	813b      	strh	r3, [r7, #8]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	8979      	ldrh	r1, [r7, #10]
 8005890:	4b20      	ldr	r3, [pc, #128]	; (8005914 <I2C_RequestMemoryWrite+0xa4>)
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fa5d 	bl	8005d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f8f0 	bl	8005a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e02c      	b.n	800590c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d105      	bne.n	80058c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058b8:	893b      	ldrh	r3, [r7, #8]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	629a      	str	r2, [r3, #40]	; 0x28
 80058c2:	e015      	b.n	80058f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058c4:	893b      	ldrh	r3, [r7, #8]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f8d6 	bl	8005a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e012      	b.n	800590c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058e6:	893b      	ldrh	r3, [r7, #8]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2200      	movs	r2, #0
 80058f8:	2180      	movs	r1, #128	; 0x80
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f884 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	80002000 	.word	0x80002000

08005918 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	4608      	mov	r0, r1
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4603      	mov	r3, r0
 8005928:	817b      	strh	r3, [r7, #10]
 800592a:	460b      	mov	r3, r1
 800592c:	813b      	strh	r3, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <I2C_RequestMemoryRead+0xa4>)
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fa0a 	bl	8005d58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	69b9      	ldr	r1, [r7, #24]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f89d 	bl	8005a88 <I2C_WaitOnTXISFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e02c      	b.n	80059b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d105      	bne.n	800596a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800595e:	893b      	ldrh	r3, [r7, #8]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
 8005968:	e015      	b.n	8005996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800596a:	893b      	ldrh	r3, [r7, #8]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	b29b      	uxth	r3, r3
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	69b9      	ldr	r1, [r7, #24]
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f883 	bl	8005a88 <I2C_WaitOnTXISFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e012      	b.n	80059b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598c:	893b      	ldrh	r3, [r7, #8]
 800598e:	b2da      	uxtb	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	2200      	movs	r2, #0
 800599e:	2140      	movs	r1, #64	; 0x40
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f831 	bl	8005a08 <I2C_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	80002000 	.word	0x80002000

080059c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d103      	bne.n	80059de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d007      	beq.n	80059fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	619a      	str	r2, [r3, #24]
  }
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a18:	e022      	b.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d01e      	beq.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fd ff8d 	bl	8003940 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d113      	bne.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3c:	f043 0220 	orr.w	r2, r3, #32
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e00f      	b.n	8005a80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d0cd      	beq.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a94:	e02c      	b.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f870 	bl	8005b80 <I2C_IsErrorOccurred>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02a      	b.n	8005b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d01e      	beq.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fd ff45 	bl	8003940 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d113      	bne.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d1cb      	bne.n	8005a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b14:	e028      	b.n	8005b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f830 	bl	8005b80 <I2C_IsErrorOccurred>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e026      	b.n	8005b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fd ff09 	bl	8003940 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	f043 0220 	orr.w	r2, r3, #32
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e007      	b.n	8005b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d1cf      	bne.n	8005b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	; 0x28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d075      	beq.n	8005c98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bb4:	e056      	b.n	8005c64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d052      	beq.n	8005c64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bbe:	f7fd febf 	bl	8003940 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d302      	bcc.n	8005bd4 <I2C_IsErrorOccurred+0x54>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d147      	bne.n	8005c64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf6:	d12e      	bne.n	8005c56 <I2C_IsErrorOccurred+0xd6>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bfe:	d02a      	beq.n	8005c56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005c00:	7cfb      	ldrb	r3, [r7, #19]
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d027      	beq.n	8005c56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c16:	f7fd fe93 	bl	8003940 <HAL_GetTick>
 8005c1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1c:	e01b      	b.n	8005c56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c1e:	f7fd fe8f 	bl	8003940 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b19      	cmp	r3, #25
 8005c2a:	d914      	bls.n	8005c56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d1dc      	bne.n	8005c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d003      	beq.n	8005c7a <I2C_IsErrorOccurred+0xfa>
 8005c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d09d      	beq.n	8005bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2220      	movs	r2, #32
 8005c88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f043 0304 	orr.w	r3, r3, #4
 8005c90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	f043 0308 	orr.w	r3, r3, #8
 8005cd2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f043 0302 	orr.w	r3, r3, #2
 8005cf4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01c      	beq.n	8005d48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff fe56 	bl	80059c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <I2C_IsErrorOccurred+0x1d4>)
 8005d20:	400b      	ands	r3, r1
 8005d22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3728      	adds	r7, #40	; 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	fe00e800 	.word	0xfe00e800

08005d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	817b      	strh	r3, [r7, #10]
 8005d66:	4613      	mov	r3, r2
 8005d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d6a:	897b      	ldrh	r3, [r7, #10]
 8005d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d70:	7a7b      	ldrb	r3, [r7, #9]
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	0d5b      	lsrs	r3, r3, #21
 8005d92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <I2C_TransferConfig+0x60>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	ea02 0103 	and.w	r1, r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	03ff63ff 	.word	0x03ff63ff

08005dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d138      	bne.n	8005e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e032      	b.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d139      	bne.n	8005edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e033      	b.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2224      	movs	r2, #36	; 0x24
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005ef8:	f7fd fd22 	bl	8003940 <HAL_GetTick>
 8005efc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d102      	bne.n	8005f0a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e092      	b.n	8006030 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 808b 	bne.w	8006030 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fcca 	bl	80018b4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005f20:	f241 3188 	movw	r1, #5000	; 0x1388
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f88b 	bl	8006040 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	4b42      	ldr	r3, [pc, #264]	; (800603c <HAL_OSPI_Init+0x150>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	68d1      	ldr	r1, [r2, #12]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6912      	ldr	r2, [r2, #16]
 8005f3c:	3a01      	subs	r2, #1
 8005f3e:	0412      	lsls	r2, r2, #16
 8005f40:	4311      	orrs	r1, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6952      	ldr	r2, [r2, #20]
 8005f46:	3a01      	subs	r2, #1
 8005f48:	0212      	lsls	r2, r2, #8
 8005f4a:	4311      	orrs	r1, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f50:	4311      	orrs	r1, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	69d2      	ldr	r2, [r2, #28]
 8005f56:	4311      	orrs	r1, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	0412      	lsls	r2, r2, #16
 8005f6a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	021a      	lsls	r2, r3, #8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2120      	movs	r1, #32
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fb98 	bl	80066c8 <OSPI_WaitFlagStateUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d146      	bne.n	8006030 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	1e5a      	subs	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fd8:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d107      	bne.n	8006018 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0202 	orr.w	r2, r2, #2
 8006016:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006020:	d103      	bne.n	800602a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	645a      	str	r2, [r3, #68]	; 0x44
 8006028:	e002      	b.n	8006030 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	f8e0f8f4 	.word	0xf8e0f8f4

08006040 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b092      	sub	sp, #72	; 0x48
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <HAL_OSPIM_Config+0x40>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d105      	bne.n	800608e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800608c:	e004      	b.n	8006098 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800608e:	2301      	movs	r3, #1
 8006090:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006098:	2300      	movs	r3, #0
 800609a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800609e:	e01f      	b.n	80060e0 <HAL_OSPIM_Config+0x80>
 80060a0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80060a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060a8:	3301      	adds	r3, #1
 80060aa:	b2d8      	uxtb	r0, r3
 80060ac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80060b0:	f107 0114 	add.w	r1, r7, #20
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	4619      	mov	r1, r3
 80060c0:	f000 fb3a 	bl	8006738 <OSPIM_GetConfig>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2208      	movs	r2, #8
 80060d4:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80060d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060da:	3301      	adds	r3, #1
 80060dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80060e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d9dd      	bls.n	80060a4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80060e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 82de 	bne.w	80066ae <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80060f2:	4bc6      	ldr	r3, [pc, #792]	; (800640c <HAL_OSPIM_Config+0x3ac>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80060fe:	4bc3      	ldr	r3, [pc, #780]	; (800640c <HAL_OSPIM_Config+0x3ac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4ac2      	ldr	r2, [pc, #776]	; (800640c <HAL_OSPIM_Config+0x3ac>)
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800610a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006116:	4bbe      	ldr	r3, [pc, #760]	; (8006410 <HAL_OSPIM_Config+0x3b0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006122:	4bbb      	ldr	r3, [pc, #748]	; (8006410 <HAL_OSPIM_Config+0x3b0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4aba      	ldr	r2, [pc, #744]	; (8006410 <HAL_OSPIM_Config+0x3b0>)
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800612e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006132:	f043 0302 	orr.w	r3, r3, #2
 8006136:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800613a:	49b6      	ldr	r1, [pc, #728]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 800613c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	3348      	adds	r3, #72	; 0x48
 8006148:	443b      	add	r3, r7
 800614a:	3b2c      	subs	r3, #44	; 0x2c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	6859      	ldr	r1, [r3, #4]
 8006156:	48af      	ldr	r0, [pc, #700]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 8006158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	3348      	adds	r3, #72	; 0x48
 8006164:	443b      	add	r3, r7
 8006166:	3b2c      	subs	r3, #44	; 0x2c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4403      	add	r3, r0
 8006174:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8006176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3348      	adds	r3, #72	; 0x48
 8006182:	443b      	add	r3, r7
 8006184:	3b34      	subs	r3, #52	; 0x34
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80a1 	beq.w	80062d0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800618e:	49a1      	ldr	r1, [pc, #644]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 8006190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	3348      	adds	r3, #72	; 0x48
 800619c:	443b      	add	r3, r7
 800619e:	3b34      	subs	r3, #52	; 0x34
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	489a      	ldr	r0, [pc, #616]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80061ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	3348      	adds	r3, #72	; 0x48
 80061b8:	443b      	add	r3, r7
 80061ba:	3b34      	subs	r3, #52	; 0x34
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	f021 0201 	bic.w	r2, r1, #1
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4403      	add	r3, r0
 80061c8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80061ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	3348      	adds	r3, #72	; 0x48
 80061d6:	443b      	add	r3, r7
 80061d8:	3b30      	subs	r3, #48	; 0x30
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01d      	beq.n	800621c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80061e0:	498c      	ldr	r1, [pc, #560]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80061e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	3348      	adds	r3, #72	; 0x48
 80061ee:	443b      	add	r3, r7
 80061f0:	3b30      	subs	r3, #48	; 0x30
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	4885      	ldr	r0, [pc, #532]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80061fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	3348      	adds	r3, #72	; 0x48
 800620a:	443b      	add	r3, r7
 800620c:	3b30      	subs	r3, #48	; 0x30
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	f021 0210 	bic.w	r2, r1, #16
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4403      	add	r3, r0
 800621a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800621c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	3348      	adds	r3, #72	; 0x48
 8006228:	443b      	add	r3, r7
 800622a:	3b28      	subs	r3, #40	; 0x28
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d021      	beq.n	8006276 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006232:	4978      	ldr	r1, [pc, #480]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 8006234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	3348      	adds	r3, #72	; 0x48
 8006240:	443b      	add	r3, r7
 8006242:	3b28      	subs	r3, #40	; 0x28
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	4870      	ldr	r0, [pc, #448]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 8006254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	3348      	adds	r3, #72	; 0x48
 8006260:	443b      	add	r3, r7
 8006262:	3b28      	subs	r3, #40	; 0x28
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3b01      	subs	r3, #1
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4403      	add	r3, r0
 8006274:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	3348      	adds	r3, #72	; 0x48
 8006282:	443b      	add	r3, r7
 8006284:	3b24      	subs	r3, #36	; 0x24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d021      	beq.n	80062d0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800628c:	4961      	ldr	r1, [pc, #388]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 800628e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3348      	adds	r3, #72	; 0x48
 800629a:	443b      	add	r3, r7
 800629c:	3b24      	subs	r3, #36	; 0x24
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	6859      	ldr	r1, [r3, #4]
 80062ac:	4859      	ldr	r0, [pc, #356]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80062ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	3348      	adds	r3, #72	; 0x48
 80062ba:	443b      	add	r3, r7
 80062bc:	3b24      	subs	r3, #36	; 0x24
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4403      	add	r3, r0
 80062ce:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	3348      	adds	r3, #72	; 0x48
 80062e2:	443b      	add	r3, r7
 80062e4:	3b34      	subs	r3, #52	; 0x34
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	d038      	beq.n	800635e <HAL_OSPIM_Config+0x2fe>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6859      	ldr	r1, [r3, #4]
 80062f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	3348      	adds	r3, #72	; 0x48
 80062fe:	443b      	add	r3, r7
 8006300:	3b30      	subs	r3, #48	; 0x30
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4299      	cmp	r1, r3
 8006306:	d02a      	beq.n	800635e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6899      	ldr	r1, [r3, #8]
 800630c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	3348      	adds	r3, #72	; 0x48
 800631a:	443b      	add	r3, r7
 800631c:	3b2c      	subs	r3, #44	; 0x2c
 800631e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006320:	4299      	cmp	r1, r3
 8006322:	d01c      	beq.n	800635e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	68d9      	ldr	r1, [r3, #12]
 8006328:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	3348      	adds	r3, #72	; 0x48
 8006336:	443b      	add	r3, r7
 8006338:	3b28      	subs	r3, #40	; 0x28
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4299      	cmp	r1, r3
 800633e:	d00e      	beq.n	800635e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6919      	ldr	r1, [r3, #16]
 8006344:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	3348      	adds	r3, #72	; 0x48
 8006352:	443b      	add	r3, r7
 8006354:	3b24      	subs	r3, #36	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006358:	4299      	cmp	r1, r3
 800635a:	f040 80d3 	bne.w	8006504 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800635e:	492d      	ldr	r1, [pc, #180]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 8006360:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3348      	adds	r3, #72	; 0x48
 800636e:	443b      	add	r3, r7
 8006370:	3b34      	subs	r3, #52	; 0x34
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	6859      	ldr	r1, [r3, #4]
 800637c:	4825      	ldr	r0, [pc, #148]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 800637e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	3348      	adds	r3, #72	; 0x48
 800638c:	443b      	add	r3, r7
 800638e:	3b34      	subs	r3, #52	; 0x34
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3b01      	subs	r3, #1
 8006394:	f021 0201 	bic.w	r2, r1, #1
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4403      	add	r3, r0
 800639c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800639e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	3348      	adds	r3, #72	; 0x48
 80063ac:	443b      	add	r3, r7
 80063ae:	3b30      	subs	r3, #48	; 0x30
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01f      	beq.n	80063f6 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80063b6:	4917      	ldr	r1, [pc, #92]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80063b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	3348      	adds	r3, #72	; 0x48
 80063c6:	443b      	add	r3, r7
 80063c8:	3b30      	subs	r3, #48	; 0x30
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	480f      	ldr	r0, [pc, #60]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80063d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	3348      	adds	r3, #72	; 0x48
 80063e4:	443b      	add	r3, r7
 80063e6:	3b30      	subs	r3, #48	; 0x30
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f021 0210 	bic.w	r2, r1, #16
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80063f6:	4907      	ldr	r1, [pc, #28]	; (8006414 <HAL_OSPIM_Config+0x3b4>)
 80063f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	3348      	adds	r3, #72	; 0x48
 8006406:	443b      	add	r3, r7
 8006408:	3b2c      	subs	r3, #44	; 0x2c
 800640a:	e005      	b.n	8006418 <HAL_OSPIM_Config+0x3b8>
 800640c:	a0001000 	.word	0xa0001000
 8006410:	a0001400 	.word	0xa0001400
 8006414:	50061c00 	.word	0x50061c00
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	48a6      	ldr	r0, [pc, #664]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006424:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	3348      	adds	r3, #72	; 0x48
 8006432:	443b      	add	r3, r7
 8006434:	3b2c      	subs	r3, #44	; 0x2c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3b01      	subs	r3, #1
 800643a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4403      	add	r3, r0
 8006442:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006444:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	3348      	adds	r3, #72	; 0x48
 8006452:	443b      	add	r3, r7
 8006454:	3b28      	subs	r3, #40	; 0x28
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d023      	beq.n	80064a4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800645c:	4997      	ldr	r1, [pc, #604]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800645e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	3348      	adds	r3, #72	; 0x48
 800646c:	443b      	add	r3, r7
 800646e:	3b28      	subs	r3, #40	; 0x28
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3b01      	subs	r3, #1
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	6859      	ldr	r1, [r3, #4]
 800647e:	488f      	ldr	r0, [pc, #572]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006480:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3348      	adds	r3, #72	; 0x48
 800648e:	443b      	add	r3, r7
 8006490:	3b28      	subs	r3, #40	; 0x28
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3b01      	subs	r3, #1
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4403      	add	r3, r0
 80064a2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80064a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	3348      	adds	r3, #72	; 0x48
 80064b2:	443b      	add	r3, r7
 80064b4:	3b24      	subs	r3, #36	; 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d023      	beq.n	8006504 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80064bc:	497f      	ldr	r1, [pc, #508]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 80064be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	3348      	adds	r3, #72	; 0x48
 80064cc:	443b      	add	r3, r7
 80064ce:	3b24      	subs	r3, #36	; 0x24
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	4877      	ldr	r0, [pc, #476]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 80064e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	3348      	adds	r3, #72	; 0x48
 80064ee:	443b      	add	r3, r7
 80064f0:	3b24      	subs	r3, #36	; 0x24
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4403      	add	r3, r0
 8006502:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006504:	4a6d      	ldr	r2, [pc, #436]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	3b01      	subs	r3, #1
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006518:	025b      	lsls	r3, r3, #9
 800651a:	431a      	orrs	r2, r3
 800651c:	4967      	ldr	r1, [pc, #412]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	3b01      	subs	r3, #1
 8006524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	440b      	add	r3, r1
 800652c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800652e:	4a63      	ldr	r2, [pc, #396]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 0203 	bic.w	r2, r3, #3
 8006540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	431a      	orrs	r2, r3
 8006546:	495d      	ldr	r1, [pc, #372]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d014      	beq.n	800658a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006560:	4a56      	ldr	r2, [pc, #344]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	3b01      	subs	r3, #1
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006574:	015b      	lsls	r3, r3, #5
 8006576:	431a      	orrs	r2, r3
 8006578:	4950      	ldr	r1, [pc, #320]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	3b01      	subs	r3, #1
 8006580:	f042 0210 	orr.w	r2, r2, #16
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d019      	beq.n	80065ca <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006596:	4a49      	ldr	r2, [pc, #292]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	3b01      	subs	r3, #1
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80065ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ae:	049b      	lsls	r3, r3, #18
 80065b0:	431a      	orrs	r2, r3
 80065b2:	4942      	ldr	r1, [pc, #264]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	e01c      	b.n	8006604 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d018      	beq.n	8006604 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80065d2:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	3b01      	subs	r3, #1
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	069b      	lsls	r3, r3, #26
 80065ec:	431a      	orrs	r2, r3
 80065ee:	4933      	ldr	r1, [pc, #204]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d019      	beq.n	8006644 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006610:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	3b01      	subs	r3, #1
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006628:	049b      	lsls	r3, r3, #18
 800662a:	431a      	orrs	r2, r3
 800662c:	4923      	ldr	r1, [pc, #140]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	3b01      	subs	r3, #1
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	605a      	str	r2, [r3, #4]
 8006642:	e01c      	b.n	800667e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d018      	beq.n	800667e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800664c:	4a1b      	ldr	r2, [pc, #108]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	3b01      	subs	r3, #1
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006664:	069b      	lsls	r3, r3, #26
 8006666:	431a      	orrs	r2, r3
 8006668:	4914      	ldr	r1, [pc, #80]	; (80066bc <HAL_OSPIM_Config+0x65c>)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	3b01      	subs	r3, #1
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	440b      	add	r3, r1
 800667c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800667e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <HAL_OSPIM_Config+0x660>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a0c      	ldr	r2, [pc, #48]	; (80066c0 <HAL_OSPIM_Config+0x660>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006696:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <HAL_OSPIM_Config+0x664>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a07      	ldr	r2, [pc, #28]	; (80066c4 <HAL_OSPIM_Config+0x664>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80066ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3748      	adds	r7, #72	; 0x48
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	50061c00 	.word	0x50061c00
 80066c0:	a0001000 	.word	0xa0001000
 80066c4:	a0001400 	.word	0xa0001400

080066c8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80066d8:	e01a      	b.n	8006710 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d016      	beq.n	8006710 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e2:	f7fd f92d 	bl	8003940 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006704:	f043 0201 	orr.w	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e00e      	b.n	800672e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2301      	movne	r3, #1
 8006720:	2300      	moveq	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d1d6      	bne.n	80066da <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	6039      	str	r1, [r7, #0]
 8006742:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006748:	2300      	movs	r3, #0
 800674a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <OSPIM_GetConfig+0x26>
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d802      	bhi.n	800675e <OSPIM_GetConfig+0x26>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	75fb      	strb	r3, [r7, #23]
 8006762:	e08e      	b.n	8006882 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2200      	movs	r2, #0
 800676e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d101      	bne.n	800678c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006788:	4b41      	ldr	r3, [pc, #260]	; (8006890 <OSPIM_GetConfig+0x158>)
 800678a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e074      	b.n	800687c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006792:	4a40      	ldr	r2, [pc, #256]	; (8006894 <OSPIM_GetConfig+0x15c>)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4053      	eors	r3, r2
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4053      	eors	r3, r2
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4053      	eors	r3, r2
 80067ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d018      	beq.n	800683a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	4053      	eors	r3, r2
 800680e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d111      	bne.n	800683a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e005      	b.n	800683a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d018      	beq.n	8006876 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4053      	eors	r3, r2
 800684a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d111      	bne.n	8006876 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	611a      	str	r2, [r3, #16]
 8006868:	e005      	b.n	8006876 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	3301      	adds	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d987      	bls.n	8006792 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	04040222 	.word	0x04040222
 8006894:	50061c00 	.word	0x50061c00

08006898 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006898:	b480      	push	{r7}
 800689a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a6:	6013      	str	r3, [r2, #0]
}
 80068a8:	bf00      	nop
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40007000 	.word	0x40007000

080068b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068bc:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c8:	d102      	bne.n	80068d0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80068ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ce:	e00b      	b.n	80068e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80068d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d102      	bne.n	80068e6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80068e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e4:	e000      	b.n	80068e8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80068e6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40007000 	.word	0x40007000

080068f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d141      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006906:	4b4b      	ldr	r3, [pc, #300]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d131      	bne.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006914:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006924:	4b43      	ldr	r3, [pc, #268]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692c:	4a41      	ldr	r2, [pc, #260]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006934:	4b40      	ldr	r3, [pc, #256]	; (8006a38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2232      	movs	r2, #50	; 0x32
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	4a3f      	ldr	r2, [pc, #252]	; (8006a3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	0c9b      	lsrs	r3, r3, #18
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694a:	e002      	b.n	8006952 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3b01      	subs	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d102      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f2      	bne.n	800694c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006966:	4b33      	ldr	r3, [pc, #204]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006972:	d158      	bne.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e057      	b.n	8006a28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006978:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	4a2d      	ldr	r2, [pc, #180]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006988:	e04d      	b.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006990:	d141      	bne.n	8006a16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006992:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800699a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800699e:	d131      	bne.n	8006a04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069a0:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a6:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069b0:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2232      	movs	r2, #50	; 0x32
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	4a1c      	ldr	r2, [pc, #112]	; (8006a3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	0c9b      	lsrs	r3, r3, #18
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069d6:	e002      	b.n	80069de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3b01      	subs	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d102      	bne.n	80069f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f2      	bne.n	80069d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fe:	d112      	bne.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e011      	b.n	8006a28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a14:	e007      	b.n	8006a26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a16:	4b07      	ldr	r3, [pc, #28]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a1e:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a24:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40007000 	.word	0x40007000
 8006a38:	20000004 	.word	0x20000004
 8006a3c:	431bde83 	.word	0x431bde83

08006a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f000 bc08 	b.w	8007264 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a54:	4b96      	ldr	r3, [pc, #600]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 030c 	and.w	r3, r3, #12
 8006a5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a5e:	4b94      	ldr	r3, [pc, #592]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80e4 	beq.w	8006c3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4c>
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b0c      	cmp	r3, #12
 8006a80:	f040 808b 	bne.w	8006b9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	f040 8087 	bne.w	8006b9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a8c:	4b88      	ldr	r3, [pc, #544]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x64>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e3df      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	4b81      	ldr	r3, [pc, #516]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <HAL_RCC_OscConfig+0x7e>
 8006ab4:	4b7e      	ldr	r3, [pc, #504]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abc:	e005      	b.n	8006aca <HAL_RCC_OscConfig+0x8a>
 8006abe:	4b7c      	ldr	r3, [pc, #496]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d223      	bcs.n	8006b16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fdcc 	bl	8007670 <RCC_SetFlashLatencyFromMSIRange>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e3c0      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae2:	4b73      	ldr	r3, [pc, #460]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a72      	ldr	r2, [pc, #456]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ae8:	f043 0308 	orr.w	r3, r3, #8
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	4b70      	ldr	r3, [pc, #448]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	496d      	ldr	r1, [pc, #436]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b00:	4b6b      	ldr	r3, [pc, #428]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	4968      	ldr	r1, [pc, #416]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	604b      	str	r3, [r1, #4]
 8006b14:	e025      	b.n	8006b62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b16:	4b66      	ldr	r3, [pc, #408]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a65      	ldr	r2, [pc, #404]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b1c:	f043 0308 	orr.w	r3, r3, #8
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b63      	ldr	r3, [pc, #396]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	4960      	ldr	r1, [pc, #384]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b34:	4b5e      	ldr	r3, [pc, #376]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	495b      	ldr	r1, [pc, #364]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fd8c 	bl	8007670 <RCC_SetFlashLatencyFromMSIRange>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e380      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006b62:	f000 fcc1 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	4950      	ldr	r1, [pc, #320]	; (8006cb4 <HAL_RCC_OscConfig+0x274>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7e:	4a4e      	ldr	r2, [pc, #312]	; (8006cb8 <HAL_RCC_OscConfig+0x278>)
 8006b80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006b82:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <HAL_RCC_OscConfig+0x27c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fc fe8a 	bl	80038a0 <HAL_InitTick>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d052      	beq.n	8006c3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	e364      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d032      	beq.n	8006c08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ba2:	4b43      	ldr	r3, [pc, #268]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a42      	ldr	r2, [pc, #264]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bae:	f7fc fec7 	bl	8003940 <HAL_GetTick>
 8006bb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bb6:	f7fc fec3 	bl	8003940 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e34d      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bc8:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f0      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bd4:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a35      	ldr	r2, [pc, #212]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006bda:	f043 0308 	orr.w	r3, r3, #8
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	4930      	ldr	r1, [pc, #192]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006bf2:	4b2f      	ldr	r3, [pc, #188]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	492b      	ldr	r1, [pc, #172]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	604b      	str	r3, [r1, #4]
 8006c06:	e01a      	b.n	8006c3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c08:	4b29      	ldr	r3, [pc, #164]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c14:	f7fc fe94 	bl	8003940 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c1c:	f7fc fe90 	bl	8003940 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e31a      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c2e:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x1dc>
 8006c3a:	e000      	b.n	8006c3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d073      	beq.n	8006d32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d005      	beq.n	8006c5c <HAL_RCC_OscConfig+0x21c>
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b0c      	cmp	r3, #12
 8006c54:	d10e      	bne.n	8006c74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d10b      	bne.n	8006c74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5c:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d063      	beq.n	8006d30 <HAL_RCC_OscConfig+0x2f0>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d15f      	bne.n	8006d30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e2f7      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCC_OscConfig+0x24c>
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a0b      	ldr	r2, [pc, #44]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	e025      	b.n	8006cd8 <HAL_RCC_OscConfig+0x298>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c94:	d114      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x280>
 8006c96:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a05      	ldr	r2, [pc, #20]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a02      	ldr	r2, [pc, #8]	; (8006cb0 <HAL_RCC_OscConfig+0x270>)
 8006ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e013      	b.n	8006cd8 <HAL_RCC_OscConfig+0x298>
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	0800c0d8 	.word	0x0800c0d8
 8006cb8:	20000004 	.word	0x20000004
 8006cbc:	20000008 	.word	0x20000008
 8006cc0:	4ba0      	ldr	r3, [pc, #640]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a9f      	ldr	r2, [pc, #636]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	4b9d      	ldr	r3, [pc, #628]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a9c      	ldr	r2, [pc, #624]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d013      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc fe2e 	bl	8003940 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce8:	f7fc fe2a 	bl	8003940 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b64      	cmp	r3, #100	; 0x64
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e2b4      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cfa:	4b92      	ldr	r3, [pc, #584]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0f0      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x2a8>
 8006d06:	e014      	b.n	8006d32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d08:	f7fc fe1a 	bl	8003940 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d0e:	e008      	b.n	8006d22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d10:	f7fc fe16 	bl	8003940 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b64      	cmp	r3, #100	; 0x64
 8006d1c:	d901      	bls.n	8006d22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e2a0      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d22:	4b88      	ldr	r3, [pc, #544]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1f0      	bne.n	8006d10 <HAL_RCC_OscConfig+0x2d0>
 8006d2e:	e000      	b.n	8006d32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d060      	beq.n	8006e00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d005      	beq.n	8006d50 <HAL_RCC_OscConfig+0x310>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b0c      	cmp	r3, #12
 8006d48:	d119      	bne.n	8006d7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d116      	bne.n	8006d7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d50:	4b7c      	ldr	r3, [pc, #496]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_OscConfig+0x328>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e27d      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d68:	4b76      	ldr	r3, [pc, #472]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	4973      	ldr	r1, [pc, #460]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d7c:	e040      	b.n	8006e00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d023      	beq.n	8006dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d86:	4b6f      	ldr	r3, [pc, #444]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6e      	ldr	r2, [pc, #440]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d92:	f7fc fdd5 	bl	8003940 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d9a:	f7fc fdd1 	bl	8003940 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e25b      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dac:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f0      	beq.n	8006d9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db8:	4b62      	ldr	r3, [pc, #392]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	061b      	lsls	r3, r3, #24
 8006dc6:	495f      	ldr	r1, [pc, #380]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]
 8006dcc:	e018      	b.n	8006e00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dce:	4b5d      	ldr	r3, [pc, #372]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a5c      	ldr	r2, [pc, #368]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fc fdb1 	bl	8003940 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de2:	f7fc fdad 	bl	8003940 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e237      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006df4:	4b53      	ldr	r3, [pc, #332]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1f0      	bne.n	8006de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d03c      	beq.n	8006e86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01c      	beq.n	8006e4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e14:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e1a:	4a4a      	ldr	r2, [pc, #296]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e1c:	f043 0301 	orr.w	r3, r3, #1
 8006e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e24:	f7fc fd8c 	bl	8003940 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e2c:	f7fc fd88 	bl	8003940 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e212      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e3e:	4b41      	ldr	r3, [pc, #260]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0ef      	beq.n	8006e2c <HAL_RCC_OscConfig+0x3ec>
 8006e4c:	e01b      	b.n	8006e86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e4e:	4b3d      	ldr	r3, [pc, #244]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e54:	4a3b      	ldr	r2, [pc, #236]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e56:	f023 0301 	bic.w	r3, r3, #1
 8006e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5e:	f7fc fd6f 	bl	8003940 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e66:	f7fc fd6b 	bl	8003940 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e1f5      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e78:	4b32      	ldr	r3, [pc, #200]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ef      	bne.n	8006e66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80a6 	beq.w	8006fe0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e94:	2300      	movs	r3, #0
 8006e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e98:	4b2a      	ldr	r3, [pc, #168]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10d      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea4:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eae:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb0:	4b24      	ldr	r3, [pc, #144]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ec0:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_RCC_OscConfig+0x508>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d118      	bne.n	8006efe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ecc:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <HAL_RCC_OscConfig+0x508>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_RCC_OscConfig+0x508>)
 8006ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ed8:	f7fc fd32 	bl	8003940 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee0:	f7fc fd2e 	bl	8003940 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e1b8      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <HAL_RCC_OscConfig+0x508>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d108      	bne.n	8006f18 <HAL_RCC_OscConfig+0x4d8>
 8006f06:	4b0f      	ldr	r3, [pc, #60]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0c:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f16:	e029      	b.n	8006f6c <HAL_RCC_OscConfig+0x52c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b05      	cmp	r3, #5
 8006f1e:	d115      	bne.n	8006f4c <HAL_RCC_OscConfig+0x50c>
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f26:	4a07      	ldr	r2, [pc, #28]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f28:	f043 0304 	orr.w	r3, r3, #4
 8006f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <HAL_RCC_OscConfig+0x504>)
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f40:	e014      	b.n	8006f6c <HAL_RCC_OscConfig+0x52c>
 8006f42:	bf00      	nop
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40007000 	.word	0x40007000
 8006f4c:	4b9d      	ldr	r3, [pc, #628]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	4a9c      	ldr	r2, [pc, #624]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f5c:	4b99      	ldr	r3, [pc, #612]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f62:	4a98      	ldr	r2, [pc, #608]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006f64:	f023 0304 	bic.w	r3, r3, #4
 8006f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d016      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fc fce4 	bl	8003940 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7c:	f7fc fce0 	bl	8003940 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e168      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f92:	4b8c      	ldr	r3, [pc, #560]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0ed      	beq.n	8006f7c <HAL_RCC_OscConfig+0x53c>
 8006fa0:	e015      	b.n	8006fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fc fccd 	bl	8003940 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fa8:	e00a      	b.n	8006fc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fc fcc9 	bl	8003940 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e151      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fc0:	4b80      	ldr	r3, [pc, #512]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1ed      	bne.n	8006faa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fce:	7ffb      	ldrb	r3, [r7, #31]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d105      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd4:	4b7b      	ldr	r3, [pc, #492]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	4a7a      	ldr	r2, [pc, #488]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fde:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d03c      	beq.n	8007066 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01c      	beq.n	800702e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ff4:	4b73      	ldr	r3, [pc, #460]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ffa:	4a72      	ldr	r2, [pc, #456]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007004:	f7fc fc9c 	bl	8003940 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800700c:	f7fc fc98 	bl	8003940 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e122      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800701e:	4b69      	ldr	r3, [pc, #420]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0ef      	beq.n	800700c <HAL_RCC_OscConfig+0x5cc>
 800702c:	e01b      	b.n	8007066 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800702e:	4b65      	ldr	r3, [pc, #404]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007034:	4a63      	ldr	r2, [pc, #396]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703e:	f7fc fc7f 	bl	8003940 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007046:	f7fc fc7b 	bl	8003940 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e105      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007058:	4b5a      	ldr	r3, [pc, #360]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800705a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ef      	bne.n	8007046 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80f9 	beq.w	8007262 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	2b02      	cmp	r3, #2
 8007076:	f040 80cf 	bne.w	8007218 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800707a:	4b52      	ldr	r3, [pc, #328]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f003 0203 	and.w	r2, r3, #3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	429a      	cmp	r2, r3
 800708c:	d12c      	bne.n	80070e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	3b01      	subs	r3, #1
 800709a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800709c:	429a      	cmp	r2, r3
 800709e:	d123      	bne.n	80070e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d11b      	bne.n	80070e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070bc:	429a      	cmp	r2, r3
 80070be:	d113      	bne.n	80070e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	3b01      	subs	r3, #1
 80070ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d109      	bne.n	80070e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	085b      	lsrs	r3, r3, #1
 80070e0:	3b01      	subs	r3, #1
 80070e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d071      	beq.n	80071cc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	2b0c      	cmp	r3, #12
 80070ec:	d068      	beq.n	80071c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070ee:	4b35      	ldr	r3, [pc, #212]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80070fa:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e0ac      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800710a:	4b2e      	ldr	r3, [pc, #184]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007114:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007116:	f7fc fc13 	bl	8003940 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800711e:	f7fc fc0f 	bl	8003940 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e099      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007130:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800713c:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800713e:	68da      	ldr	r2, [r3, #12]
 8007140:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <HAL_RCC_OscConfig+0x788>)
 8007142:	4013      	ands	r3, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800714c:	3a01      	subs	r2, #1
 800714e:	0112      	lsls	r2, r2, #4
 8007150:	4311      	orrs	r1, r2
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007156:	0212      	lsls	r2, r2, #8
 8007158:	4311      	orrs	r1, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800715e:	0852      	lsrs	r2, r2, #1
 8007160:	3a01      	subs	r2, #1
 8007162:	0552      	lsls	r2, r2, #21
 8007164:	4311      	orrs	r1, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800716a:	0852      	lsrs	r2, r2, #1
 800716c:	3a01      	subs	r2, #1
 800716e:	0652      	lsls	r2, r2, #25
 8007170:	4311      	orrs	r1, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007176:	06d2      	lsls	r2, r2, #27
 8007178:	430a      	orrs	r2, r1
 800717a:	4912      	ldr	r1, [pc, #72]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800717c:	4313      	orrs	r3, r2
 800717e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007180:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800718a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 8007192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007196:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007198:	f7fc fbd2 	bl	8003940 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a0:	f7fc fbce 	bl	8003940 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e058      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_RCC_OscConfig+0x784>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071be:	e050      	b.n	8007262 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e04f      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
 80071c4:	40021000 	.word	0x40021000
 80071c8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071cc:	4b27      	ldr	r3, [pc, #156]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d144      	bne.n	8007262 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a23      	ldr	r2, [pc, #140]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 80071de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071e4:	4b21      	ldr	r3, [pc, #132]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	4a20      	ldr	r2, [pc, #128]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 80071ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071f0:	f7fc fba6 	bl	8003940 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f8:	f7fc fba2 	bl	8003940 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e02c      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800720a:	4b18      	ldr	r3, [pc, #96]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x7b8>
 8007216:	e024      	b.n	8007262 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d01f      	beq.n	800725e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a12      	ldr	r2, [pc, #72]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 8007224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722a:	f7fc fb89 	bl	8003940 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007232:	f7fc fb85 	bl	8003940 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e00f      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	4905      	ldr	r1, [pc, #20]	; (800726c <HAL_RCC_OscConfig+0x82c>)
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_RCC_OscConfig+0x830>)
 8007258:	4013      	ands	r3, r2
 800725a:	60cb      	str	r3, [r1, #12]
 800725c:	e001      	b.n	8007262 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40021000 	.word	0x40021000
 8007270:	feeefffc 	.word	0xfeeefffc

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e11d      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800728c:	4b90      	ldr	r3, [pc, #576]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d910      	bls.n	80072bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 020f 	bic.w	r2, r3, #15
 80072a2:	498b      	ldr	r1, [pc, #556]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e105      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d010      	beq.n	80072ea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	4b81      	ldr	r3, [pc, #516]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d908      	bls.n	80072ea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d8:	4b7e      	ldr	r3, [pc, #504]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	497b      	ldr	r1, [pc, #492]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d079      	beq.n	80073ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d11e      	bne.n	800733c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072fe:	4b75      	ldr	r3, [pc, #468]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e0dc      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800730e:	f000 fa09 	bl	8007724 <RCC_GetSysClockFreqFromPLLSource>
 8007312:	4603      	mov	r3, r0
 8007314:	4a70      	ldr	r2, [pc, #448]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d946      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800731a:	4b6e      	ldr	r3, [pc, #440]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d140      	bne.n	80073a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007326:	4b6b      	ldr	r3, [pc, #428]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732e:	4a69      	ldr	r2, [pc, #420]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007334:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007336:	2380      	movs	r3, #128	; 0x80
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	e035      	b.n	80073a8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d107      	bne.n	8007354 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007344:	4b63      	ldr	r3, [pc, #396]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d115      	bne.n	800737c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0b9      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d107      	bne.n	800736c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800735c:	4b5d      	ldr	r3, [pc, #372]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e0ad      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800736c:	4b59      	ldr	r3, [pc, #356]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0a5      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800737c:	f000 f8b4 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 8007380:	4603      	mov	r3, r0
 8007382:	4a55      	ldr	r2, [pc, #340]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d90f      	bls.n	80073a8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007388:	4b52      	ldr	r3, [pc, #328]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007394:	4b4f      	ldr	r3, [pc, #316]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800739c:	4a4d      	ldr	r2, [pc, #308]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800739e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073a8:	4b4a      	ldr	r3, [pc, #296]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f023 0203 	bic.w	r2, r3, #3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	4947      	ldr	r1, [pc, #284]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ba:	f7fc fac1 	bl	8003940 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c0:	e00a      	b.n	80073d8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c2:	f7fc fabd 	bl	8003940 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e077      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d8:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 020c 	and.w	r2, r3, #12
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d1eb      	bne.n	80073c2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d105      	bne.n	80073fc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80073f0:	4b38      	ldr	r3, [pc, #224]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	4a37      	ldr	r2, [pc, #220]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80073f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073fa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007414:	429a      	cmp	r2, r3
 8007416:	d208      	bcs.n	800742a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007418:	4b2e      	ldr	r3, [pc, #184]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	492b      	ldr	r1, [pc, #172]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007426:	4313      	orrs	r3, r2
 8007428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d210      	bcs.n	800745a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007438:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f023 020f 	bic.w	r2, r3, #15
 8007440:	4923      	ldr	r1, [pc, #140]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	4313      	orrs	r3, r2
 8007446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCC_ClockConfig+0x25c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 030f 	and.w	r3, r3, #15
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d001      	beq.n	800745a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e036      	b.n	80074c8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	4918      	ldr	r1, [pc, #96]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007474:	4313      	orrs	r3, r2
 8007476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007484:	4b13      	ldr	r3, [pc, #76]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4910      	ldr	r1, [pc, #64]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007494:	4313      	orrs	r3, r2
 8007496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007498:	f000 f826 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 800749c:	4602      	mov	r2, r0
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 030f 	and.w	r3, r3, #15
 80074a8:	490c      	ldr	r1, [pc, #48]	; (80074dc <HAL_RCC_ClockConfig+0x268>)
 80074aa:	5ccb      	ldrb	r3, [r1, r3]
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	4a0a      	ldr	r2, [pc, #40]	; (80074e0 <HAL_RCC_ClockConfig+0x26c>)
 80074b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc f9ef 	bl	80038a0 <HAL_InitTick>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40022000 	.word	0x40022000
 80074d4:	40021000 	.word	0x40021000
 80074d8:	04c4b400 	.word	0x04c4b400
 80074dc:	0800c0d8 	.word	0x0800c0d8
 80074e0:	20000004 	.word	0x20000004
 80074e4:	20000008 	.word	0x20000008

080074e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	2300      	movs	r3, #0
 80074f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f6:	4b3e      	ldr	r3, [pc, #248]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007500:	4b3b      	ldr	r3, [pc, #236]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d005      	beq.n	800751c <HAL_RCC_GetSysClockFreq+0x34>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b0c      	cmp	r3, #12
 8007514:	d121      	bne.n	800755a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d11e      	bne.n	800755a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800751c:	4b34      	ldr	r3, [pc, #208]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d107      	bne.n	8007538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007528:	4b31      	ldr	r3, [pc, #196]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800752a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800752e:	0a1b      	lsrs	r3, r3, #8
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	e005      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007538:	4b2d      	ldr	r3, [pc, #180]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	091b      	lsrs	r3, r3, #4
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007544:	4a2b      	ldr	r2, [pc, #172]	; (80075f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d102      	bne.n	8007566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e004      	b.n	8007570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d101      	bne.n	8007570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <HAL_RCC_GetSysClockFreq+0x114>)
 800756e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b0c      	cmp	r3, #12
 8007574:	d134      	bne.n	80075e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007576:	4b1e      	ldr	r3, [pc, #120]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d003      	beq.n	800758e <HAL_RCC_GetSysClockFreq+0xa6>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d003      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0xac>
 800758c:	e005      	b.n	800759a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800758e:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007590:	617b      	str	r3, [r7, #20]
      break;
 8007592:	e005      	b.n	80075a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007594:	4b19      	ldr	r3, [pc, #100]	; (80075fc <HAL_RCC_GetSysClockFreq+0x114>)
 8007596:	617b      	str	r3, [r7, #20]
      break;
 8007598:	e002      	b.n	80075a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	617b      	str	r3, [r7, #20]
      break;
 800759e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	3301      	adds	r3, #1
 80075ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80075ae:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	0a1b      	lsrs	r3, r3, #8
 80075b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	fb03 f202 	mul.w	r2, r3, r2
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	0e5b      	lsrs	r3, r3, #25
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	3301      	adds	r3, #1
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	fbb2 f3f3 	udiv	r3, r2, r3
 80075de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80075e0:	69bb      	ldr	r3, [r7, #24]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3724      	adds	r7, #36	; 0x24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40021000 	.word	0x40021000
 80075f4:	0800c0f0 	.word	0x0800c0f0
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	007a1200 	.word	0x007a1200

08007600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <HAL_RCC_GetHCLKFreq+0x14>)
 8007606:	681b      	ldr	r3, [r3, #0]
}
 8007608:	4618      	mov	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20000004 	.word	0x20000004

08007618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800761c:	f7ff fff0 	bl	8007600 <HAL_RCC_GetHCLKFreq>
 8007620:	4602      	mov	r2, r0
 8007622:	4b06      	ldr	r3, [pc, #24]	; (800763c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	4904      	ldr	r1, [pc, #16]	; (8007640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800762e:	5ccb      	ldrb	r3, [r1, r3]
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40021000 	.word	0x40021000
 8007640:	0800c0e8 	.word	0x0800c0e8

08007644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007648:	f7ff ffda 	bl	8007600 <HAL_RCC_GetHCLKFreq>
 800764c:	4602      	mov	r2, r0
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	0adb      	lsrs	r3, r3, #11
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	4904      	ldr	r1, [pc, #16]	; (800766c <HAL_RCC_GetPCLK2Freq+0x28>)
 800765a:	5ccb      	ldrb	r3, [r1, r3]
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40021000 	.word	0x40021000
 800766c:	0800c0e8 	.word	0x0800c0e8

08007670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800767c:	4b27      	ldr	r3, [pc, #156]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007688:	f7ff f916 	bl	80068b8 <HAL_PWREx_GetVoltageRange>
 800768c:	6178      	str	r0, [r7, #20]
 800768e:	e014      	b.n	80076ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007690:	4b22      	ldr	r3, [pc, #136]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007694:	4a21      	ldr	r2, [pc, #132]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769a:	6593      	str	r3, [r2, #88]	; 0x58
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800769e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80076a8:	f7ff f906 	bl	80068b8 <HAL_PWREx_GetVoltageRange>
 80076ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b2:	4a1a      	ldr	r2, [pc, #104]	; (800771c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80076b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c0:	d10b      	bne.n	80076da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d913      	bls.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2ba0      	cmp	r3, #160	; 0xa0
 80076cc:	d902      	bls.n	80076d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80076ce:	2302      	movs	r3, #2
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e00d      	b.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076d4:	2301      	movs	r3, #1
 80076d6:	613b      	str	r3, [r7, #16]
 80076d8:	e00a      	b.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b7f      	cmp	r3, #127	; 0x7f
 80076de:	d902      	bls.n	80076e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80076e0:	2302      	movs	r3, #2
 80076e2:	613b      	str	r3, [r7, #16]
 80076e4:	e004      	b.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b70      	cmp	r3, #112	; 0x70
 80076ea:	d101      	bne.n	80076f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80076ec:	2301      	movs	r3, #1
 80076ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f023 020f 	bic.w	r2, r3, #15
 80076f8:	4909      	ldr	r1, [pc, #36]	; (8007720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	429a      	cmp	r2, r3
 800770c:	d001      	beq.n	8007712 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3718      	adds	r7, #24
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40021000 	.word	0x40021000
 8007720:	40022000 	.word	0x40022000

08007724 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800772a:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d00b      	beq.n	8007752 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b03      	cmp	r3, #3
 800773e:	d825      	bhi.n	800778c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d008      	beq.n	8007758 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d11f      	bne.n	800778c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800774c:	4b25      	ldr	r3, [pc, #148]	; (80077e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800774e:	613b      	str	r3, [r7, #16]
    break;
 8007750:	e01f      	b.n	8007792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007752:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007754:	613b      	str	r3, [r7, #16]
    break;
 8007756:	e01c      	b.n	8007792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007758:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e005      	b.n	8007780 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	091b      	lsrs	r3, r3, #4
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007780:	4a1a      	ldr	r2, [pc, #104]	; (80077ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007788:	613b      	str	r3, [r7, #16]
    break;
 800778a:	e002      	b.n	8007792 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
    break;
 8007790:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	091b      	lsrs	r3, r3, #4
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	3301      	adds	r3, #1
 800779e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	0a1b      	lsrs	r3, r3, #8
 80077a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	fb03 f202 	mul.w	r2, r3, r2
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077b8:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	0e5b      	lsrs	r3, r3, #25
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	3301      	adds	r3, #1
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80077d2:	683b      	ldr	r3, [r7, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	40021000 	.word	0x40021000
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	007a1200 	.word	0x007a1200
 80077ec:	0800c0f0 	.word	0x0800c0f0

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077f8:	2300      	movs	r3, #0
 80077fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077fc:	2300      	movs	r3, #0
 80077fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007808:	2b00      	cmp	r3, #0
 800780a:	d040      	beq.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d02a      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007814:	2b80      	cmp	r3, #128	; 0x80
 8007816:	d825      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007818:	2b60      	cmp	r3, #96	; 0x60
 800781a:	d026      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800781c:	2b60      	cmp	r3, #96	; 0x60
 800781e:	d821      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d006      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d81d      	bhi.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800782c:	2b20      	cmp	r3, #32
 800782e:	d010      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007830:	e018      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007832:	4b89      	ldr	r3, [pc, #548]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4a88      	ldr	r2, [pc, #544]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800783e:	e015      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fb12 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007850:	e00c      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3320      	adds	r3, #32
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fbfd 	bl	8008058 <RCCEx_PLLSAI2_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007862:	e003      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	74fb      	strb	r3, [r7, #19]
      break;
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800786a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800786c:	7cfb      	ldrb	r3, [r7, #19]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007872:	4b79      	ldr	r3, [pc, #484]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007878:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007880:	4975      	ldr	r1, [pc, #468]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007888:	e001      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788a:	7cfb      	ldrb	r3, [r7, #19]
 800788c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d047      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a2:	d030      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a8:	d82a      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ae:	d02a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80078b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b4:	d824      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ba:	d008      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80078bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c0:	d81e      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ca:	d010      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078cc:	e018      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80078ce:	4b62      	ldr	r3, [pc, #392]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	4a61      	ldr	r2, [pc, #388]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80078d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078da:	e015      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3304      	adds	r3, #4
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fac4 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078ec:	e00c      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3320      	adds	r3, #32
 80078f2:	2100      	movs	r1, #0
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fbaf 	bl	8008058 <RCCEx_PLLSAI2_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	74fb      	strb	r3, [r7, #19]
      break;
 8007904:	e000      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007908:	7cfb      	ldrb	r3, [r7, #19]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800790e:	4b52      	ldr	r3, [pc, #328]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791c:	494e      	ldr	r1, [pc, #312]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007924:	e001      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007926:	7cfb      	ldrb	r3, [r7, #19]
 8007928:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 809f 	beq.w	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007938:	2300      	movs	r3, #0
 800793a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800793c:	4b46      	ldr	r3, [pc, #280]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800793e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00d      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007952:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795c:	6593      	str	r3, [r2, #88]	; 0x58
 800795e:	4b3e      	ldr	r3, [pc, #248]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800796a:	2301      	movs	r3, #1
 800796c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800796e:	4b3b      	ldr	r3, [pc, #236]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a3a      	ldr	r2, [pc, #232]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800797a:	f7fb ffe1 	bl	8003940 <HAL_GetTick>
 800797e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007980:	e009      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007982:	f7fb ffdd 	bl	8003940 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d902      	bls.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	74fb      	strb	r3, [r7, #19]
        break;
 8007994:	e005      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007996:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0ef      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80079a2:	7cfb      	ldrb	r3, [r7, #19]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d15b      	bne.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079a8:	4b2b      	ldr	r3, [pc, #172]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01f      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d019      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079d2:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e8:	4a1b      	ldr	r2, [pc, #108]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80079f2:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d016      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a04:	f7fb ff9c 	bl	8003940 <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0c:	f7fb ff98 	bl	8003940 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d902      	bls.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	74fb      	strb	r3, [r7, #19]
            break;
 8007a22:	e006      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d0ec      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8007a32:	7cfb      	ldrb	r3, [r7, #19]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10c      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a38:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a48:	4903      	ldr	r1, [pc, #12]	; (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a50:	e008      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a52:	7cfb      	ldrb	r3, [r7, #19]
 8007a54:	74bb      	strb	r3, [r7, #18]
 8007a56:	e005      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a60:	7cfb      	ldrb	r3, [r7, #19]
 8007a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a64:	7c7b      	ldrb	r3, [r7, #17]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d105      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a6a:	4ba0      	ldr	r3, [pc, #640]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	4a9f      	ldr	r2, [pc, #636]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a82:	4b9a      	ldr	r3, [pc, #616]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	f023 0203 	bic.w	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a90:	4996      	ldr	r1, [pc, #600]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aa4:	4b91      	ldr	r3, [pc, #580]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	f023 020c 	bic.w	r2, r3, #12
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	498e      	ldr	r1, [pc, #568]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ac6:	4b89      	ldr	r3, [pc, #548]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad4:	4985      	ldr	r1, [pc, #532]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ae8:	4b80      	ldr	r3, [pc, #512]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	497d      	ldr	r1, [pc, #500]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0310 	and.w	r3, r3, #16
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b0a:	4b78      	ldr	r3, [pc, #480]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b18:	4974      	ldr	r1, [pc, #464]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b2c:	4b6f      	ldr	r3, [pc, #444]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b3a:	496c      	ldr	r1, [pc, #432]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b4e:	4b67      	ldr	r3, [pc, #412]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5c:	4963      	ldr	r1, [pc, #396]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b70:	4b5e      	ldr	r3, [pc, #376]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b7e:	495b      	ldr	r1, [pc, #364]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b92:	4b56      	ldr	r3, [pc, #344]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba0:	4952      	ldr	r1, [pc, #328]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bb4:	4b4d      	ldr	r3, [pc, #308]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc2:	494a      	ldr	r1, [pc, #296]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bd6:	4b45      	ldr	r3, [pc, #276]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	4941      	ldr	r1, [pc, #260]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bf8:	4b3c      	ldr	r3, [pc, #240]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bfe:	f023 0203 	bic.w	r2, r3, #3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c06:	4939      	ldr	r1, [pc, #228]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d028      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c1a:	4b34      	ldr	r3, [pc, #208]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c28:	4930      	ldr	r1, [pc, #192]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c38:	d106      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c3a:	4b2c      	ldr	r3, [pc, #176]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	4a2b      	ldr	r2, [pc, #172]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c44:	60d3      	str	r3, [r2, #12]
 8007c46:	e011      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2101      	movs	r1, #1
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f909 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c62:	7cfb      	ldrb	r3, [r7, #19]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007c68:	7cfb      	ldrb	r3, [r7, #19]
 8007c6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d04d      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c80:	d108      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007c82:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c88:	4a18      	ldr	r2, [pc, #96]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007c92:	e012      	b.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c9a:	4a14      	ldr	r2, [pc, #80]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007ca4:	4b11      	ldr	r3, [pc, #68]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb2:	490e      	ldr	r1, [pc, #56]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc2:	d106      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a08      	ldr	r2, [pc, #32]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cce:	60d3      	str	r3, [r2, #12]
 8007cd0:	e020      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cda:	d109      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cdc:	4b03      	ldr	r3, [pc, #12]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4a02      	ldr	r2, [pc, #8]	; (8007cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce6:	60d3      	str	r3, [r2, #12]
 8007ce8:	e014      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007cea:	bf00      	nop
 8007cec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f8b5 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d0a:	7cfb      	ldrb	r3, [r7, #19]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007d10:	7cfb      	ldrb	r3, [r7, #19]
 8007d12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d028      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d20:	4b4a      	ldr	r3, [pc, #296]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d2e:	4947      	ldr	r1, [pc, #284]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	4a41      	ldr	r2, [pc, #260]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d4a:	60d3      	str	r3, [r2, #12]
 8007d4c:	e011      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d56:	d10c      	bne.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f886 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d68:	7cfb      	ldrb	r3, [r7, #19]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007d6e:	7cfb      	ldrb	r3, [r7, #19]
 8007d70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01e      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d7e:	4b33      	ldr	r3, [pc, #204]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d8e:	492f      	ldr	r1, [pc, #188]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da0:	d10c      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f861 	bl	8007e70 <RCCEx_PLLSAI1_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007db2:	7cfb      	ldrb	r3, [r7, #19]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007db8:	7cfb      	ldrb	r3, [r7, #19]
 8007dba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dc8:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dce:	f023 0204 	bic.w	r2, r3, #4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd8:	491c      	ldr	r1, [pc, #112]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007df2:	f023 0218 	bic.w	r2, r3, #24
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	4913      	ldr	r1, [pc, #76]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d017      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e20:	490a      	ldr	r1, [pc, #40]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e32:	d105      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	4a04      	ldr	r2, [pc, #16]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40021000 	.word	0x40021000

08007e50 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007e5a:	f043 0304 	orr.w	r3, r3, #4
 8007e5e:	6013      	str	r3, [r2, #0]
}
 8007e60:	bf00      	nop
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40021000 	.word	0x40021000

08007e70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e7e:	4b72      	ldr	r3, [pc, #456]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00e      	beq.n	8007ea8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007e8a:	4b6f      	ldr	r3, [pc, #444]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f003 0203 	and.w	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d103      	bne.n	8007ea2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d142      	bne.n	8007f28 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	73fb      	strb	r3, [r7, #15]
 8007ea6:	e03f      	b.n	8007f28 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d018      	beq.n	8007ee2 <RCCEx_PLLSAI1_Config+0x72>
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d825      	bhi.n	8007f00 <RCCEx_PLLSAI1_Config+0x90>
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d002      	beq.n	8007ebe <RCCEx_PLLSAI1_Config+0x4e>
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d009      	beq.n	8007ed0 <RCCEx_PLLSAI1_Config+0x60>
 8007ebc:	e020      	b.n	8007f00 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ebe:	4b62      	ldr	r3, [pc, #392]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d11d      	bne.n	8007f06 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ece:	e01a      	b.n	8007f06 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ed0:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d116      	bne.n	8007f0a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ee0:	e013      	b.n	8007f0a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ee2:	4b59      	ldr	r3, [pc, #356]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10f      	bne.n	8007f0e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007eee:	4b56      	ldr	r3, [pc, #344]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007efe:	e006      	b.n	8007f0e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	73fb      	strb	r3, [r7, #15]
      break;
 8007f04:	e004      	b.n	8007f10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d108      	bne.n	8007f28 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007f16:	4b4c      	ldr	r3, [pc, #304]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f023 0203 	bic.w	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4949      	ldr	r1, [pc, #292]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f040 8086 	bne.w	800803c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007f30:	4b45      	ldr	r3, [pc, #276]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a44      	ldr	r2, [pc, #272]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3c:	f7fb fd00 	bl	8003940 <HAL_GetTick>
 8007f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f42:	e009      	b.n	8007f58 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f44:	f7fb fcfc 	bl	8003940 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d902      	bls.n	8007f58 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	73fb      	strb	r3, [r7, #15]
        break;
 8007f56:	e005      	b.n	8007f64 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007f58:	4b3b      	ldr	r3, [pc, #236]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1ef      	bne.n	8007f44 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d168      	bne.n	800803c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d113      	bne.n	8007f98 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f70:	4b35      	ldr	r3, [pc, #212]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	4b35      	ldr	r3, [pc, #212]	; (800804c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f76:	4013      	ands	r3, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6892      	ldr	r2, [r2, #8]
 8007f7c:	0211      	lsls	r1, r2, #8
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	68d2      	ldr	r2, [r2, #12]
 8007f82:	06d2      	lsls	r2, r2, #27
 8007f84:	4311      	orrs	r1, r2
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6852      	ldr	r2, [r2, #4]
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	0112      	lsls	r2, r2, #4
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	492d      	ldr	r1, [pc, #180]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	610b      	str	r3, [r1, #16]
 8007f96:	e02d      	b.n	8007ff4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d115      	bne.n	8007fca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007f9e:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	4b2b      	ldr	r3, [pc, #172]	; (8008050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6892      	ldr	r2, [r2, #8]
 8007faa:	0211      	lsls	r1, r2, #8
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6912      	ldr	r2, [r2, #16]
 8007fb0:	0852      	lsrs	r2, r2, #1
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	0552      	lsls	r2, r2, #21
 8007fb6:	4311      	orrs	r1, r2
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	6852      	ldr	r2, [r2, #4]
 8007fbc:	3a01      	subs	r2, #1
 8007fbe:	0112      	lsls	r2, r2, #4
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	4921      	ldr	r1, [pc, #132]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	610b      	str	r3, [r1, #16]
 8007fc8:	e014      	b.n	8007ff4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	4b21      	ldr	r3, [pc, #132]	; (8008054 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6892      	ldr	r2, [r2, #8]
 8007fd6:	0211      	lsls	r1, r2, #8
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6952      	ldr	r2, [r2, #20]
 8007fdc:	0852      	lsrs	r2, r2, #1
 8007fde:	3a01      	subs	r2, #1
 8007fe0:	0652      	lsls	r2, r2, #25
 8007fe2:	4311      	orrs	r1, r2
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	6852      	ldr	r2, [r2, #4]
 8007fe8:	3a01      	subs	r2, #1
 8007fea:	0112      	lsls	r2, r2, #4
 8007fec:	430a      	orrs	r2, r1
 8007fee:	4916      	ldr	r1, [pc, #88]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007ff4:	4b14      	ldr	r3, [pc, #80]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a13      	ldr	r2, [pc, #76]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ffe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008000:	f7fb fc9e 	bl	8003940 <HAL_GetTick>
 8008004:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008006:	e009      	b.n	800801c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008008:	f7fb fc9a 	bl	8003940 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d902      	bls.n	800801c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	73fb      	strb	r3, [r7, #15]
          break;
 800801a:	e005      	b.n	8008028 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0ef      	beq.n	8008008 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	4904      	ldr	r1, [pc, #16]	; (8008048 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008038:	4313      	orrs	r3, r2
 800803a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	40021000 	.word	0x40021000
 800804c:	07ff800f 	.word	0x07ff800f
 8008050:	ff9f800f 	.word	0xff9f800f
 8008054:	f9ff800f 	.word	0xf9ff800f

08008058 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008066:	4b72      	ldr	r3, [pc, #456]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00e      	beq.n	8008090 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008072:	4b6f      	ldr	r3, [pc, #444]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	f003 0203 	and.w	r2, r3, #3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d103      	bne.n	800808a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
       ||
 8008086:	2b00      	cmp	r3, #0
 8008088:	d142      	bne.n	8008110 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	e03f      	b.n	8008110 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d018      	beq.n	80080ca <RCCEx_PLLSAI2_Config+0x72>
 8008098:	2b03      	cmp	r3, #3
 800809a:	d825      	bhi.n	80080e8 <RCCEx_PLLSAI2_Config+0x90>
 800809c:	2b01      	cmp	r3, #1
 800809e:	d002      	beq.n	80080a6 <RCCEx_PLLSAI2_Config+0x4e>
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d009      	beq.n	80080b8 <RCCEx_PLLSAI2_Config+0x60>
 80080a4:	e020      	b.n	80080e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080a6:	4b62      	ldr	r3, [pc, #392]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d11d      	bne.n	80080ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080b6:	e01a      	b.n	80080ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080b8:	4b5d      	ldr	r3, [pc, #372]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d116      	bne.n	80080f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080c8:	e013      	b.n	80080f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80080ca:	4b59      	ldr	r3, [pc, #356]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10f      	bne.n	80080f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80080d6:	4b56      	ldr	r3, [pc, #344]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080e6:	e006      	b.n	80080f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
      break;
 80080ec:	e004      	b.n	80080f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80080f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d108      	bne.n	8008110 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80080fe:	4b4c      	ldr	r3, [pc, #304]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f023 0203 	bic.w	r2, r3, #3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4949      	ldr	r1, [pc, #292]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 800810c:	4313      	orrs	r3, r2
 800810e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 8086 	bne.w	8008224 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008118:	4b45      	ldr	r3, [pc, #276]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a44      	ldr	r2, [pc, #272]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 800811e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008124:	f7fb fc0c 	bl	8003940 <HAL_GetTick>
 8008128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800812a:	e009      	b.n	8008140 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800812c:	f7fb fc08 	bl	8003940 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d902      	bls.n	8008140 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	73fb      	strb	r3, [r7, #15]
        break;
 800813e:	e005      	b.n	800814c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008140:	4b3b      	ldr	r3, [pc, #236]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1ef      	bne.n	800812c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d168      	bne.n	8008224 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d113      	bne.n	8008180 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008158:	4b35      	ldr	r3, [pc, #212]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 800815a:	695a      	ldr	r2, [r3, #20]
 800815c:	4b35      	ldr	r3, [pc, #212]	; (8008234 <RCCEx_PLLSAI2_Config+0x1dc>)
 800815e:	4013      	ands	r3, r2
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6892      	ldr	r2, [r2, #8]
 8008164:	0211      	lsls	r1, r2, #8
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68d2      	ldr	r2, [r2, #12]
 800816a:	06d2      	lsls	r2, r2, #27
 800816c:	4311      	orrs	r1, r2
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	6852      	ldr	r2, [r2, #4]
 8008172:	3a01      	subs	r2, #1
 8008174:	0112      	lsls	r2, r2, #4
 8008176:	430a      	orrs	r2, r1
 8008178:	492d      	ldr	r1, [pc, #180]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 800817a:	4313      	orrs	r3, r2
 800817c:	614b      	str	r3, [r1, #20]
 800817e:	e02d      	b.n	80081dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d115      	bne.n	80081b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008186:	4b2a      	ldr	r3, [pc, #168]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	4b2b      	ldr	r3, [pc, #172]	; (8008238 <RCCEx_PLLSAI2_Config+0x1e0>)
 800818c:	4013      	ands	r3, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6892      	ldr	r2, [r2, #8]
 8008192:	0211      	lsls	r1, r2, #8
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	6912      	ldr	r2, [r2, #16]
 8008198:	0852      	lsrs	r2, r2, #1
 800819a:	3a01      	subs	r2, #1
 800819c:	0552      	lsls	r2, r2, #21
 800819e:	4311      	orrs	r1, r2
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	3a01      	subs	r2, #1
 80081a6:	0112      	lsls	r2, r2, #4
 80081a8:	430a      	orrs	r2, r1
 80081aa:	4921      	ldr	r1, [pc, #132]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	614b      	str	r3, [r1, #20]
 80081b0:	e014      	b.n	80081dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081b2:	4b1f      	ldr	r3, [pc, #124]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	4b21      	ldr	r3, [pc, #132]	; (800823c <RCCEx_PLLSAI2_Config+0x1e4>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6892      	ldr	r2, [r2, #8]
 80081be:	0211      	lsls	r1, r2, #8
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6952      	ldr	r2, [r2, #20]
 80081c4:	0852      	lsrs	r2, r2, #1
 80081c6:	3a01      	subs	r2, #1
 80081c8:	0652      	lsls	r2, r2, #25
 80081ca:	4311      	orrs	r1, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6852      	ldr	r2, [r2, #4]
 80081d0:	3a01      	subs	r2, #1
 80081d2:	0112      	lsls	r2, r2, #4
 80081d4:	430a      	orrs	r2, r1
 80081d6:	4916      	ldr	r1, [pc, #88]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80081dc:	4b14      	ldr	r3, [pc, #80]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a13      	ldr	r2, [pc, #76]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 80081e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e8:	f7fb fbaa 	bl	8003940 <HAL_GetTick>
 80081ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80081ee:	e009      	b.n	8008204 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80081f0:	f7fb fba6 	bl	8003940 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d902      	bls.n	8008204 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	73fb      	strb	r3, [r7, #15]
          break;
 8008202:	e005      	b.n	8008210 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008204:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d0ef      	beq.n	80081f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d106      	bne.n	8008224 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008220:	4313      	orrs	r3, r2
 8008222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008224:	7bfb      	ldrb	r3, [r7, #15]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40021000 	.word	0x40021000
 8008234:	07ff800f 	.word	0x07ff800f
 8008238:	ff9f800f 	.word	0xff9f800f
 800823c:	f9ff800f 	.word	0xf9ff800f

08008240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e095      	b.n	800837e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d108      	bne.n	800826c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008262:	d009      	beq.n	8008278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	61da      	str	r2, [r3, #28]
 800826a:	e005      	b.n	8008278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7f9 ff3a 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082b8:	d902      	bls.n	80082c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e002      	b.n	80082c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082ce:	d007      	beq.n	80082e0 <HAL_SPI_Init+0xa0>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082d8:	d002      	beq.n	80082e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082f0:	431a      	orrs	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	431a      	orrs	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008322:	ea42 0103 	orr.w	r1, r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	0c1b      	lsrs	r3, r3, #16
 800833c:	f003 0204 	and.w	r2, r3, #4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800835c:	ea42 0103 	orr.w	r1, r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b08a      	sub	sp, #40	; 0x28
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008394:	2301      	movs	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_SPI_TransmitReceive+0x26>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e1fb      	b.n	80087a4 <HAL_SPI_TransmitReceive+0x41e>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083b4:	f7fb fac4 	bl	8003940 <HAL_GetTick>
 80083b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80083c8:	887b      	ldrh	r3, [r7, #2]
 80083ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083d0:	7efb      	ldrb	r3, [r7, #27]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d00e      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x6e>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083dc:	d106      	bne.n	80083ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <HAL_SPI_TransmitReceive+0x66>
 80083e6:	7efb      	ldrb	r3, [r7, #27]
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d003      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80083ec:	2302      	movs	r3, #2
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80083f2:	e1cd      	b.n	8008790 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <HAL_SPI_TransmitReceive+0x80>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_SPI_TransmitReceive+0x80>
 8008400:	887b      	ldrh	r3, [r7, #2]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d103      	bne.n	800840e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800840c:	e1c0      	b.n	8008790 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b04      	cmp	r3, #4
 8008418:	d003      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2205      	movs	r2, #5
 800841e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	887a      	ldrh	r2, [r7, #2]
 8008432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	887a      	ldrh	r2, [r7, #2]
 800843a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	887a      	ldrh	r2, [r7, #2]
 8008448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	887a      	ldrh	r2, [r7, #2]
 800844e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008464:	d802      	bhi.n	800846c <HAL_SPI_TransmitReceive+0xe6>
 8008466:	8a3b      	ldrh	r3, [r7, #16]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d908      	bls.n	800847e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800847a:	605a      	str	r2, [r3, #4]
 800847c:	e007      	b.n	800848e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800848c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d007      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084b4:	d97c      	bls.n	80085b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x13e>
 80084be:	8a7b      	ldrh	r3, [r7, #18]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d169      	bne.n	8008598 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	881a      	ldrh	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d4:	1c9a      	adds	r2, r3, #2
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084de:	b29b      	uxth	r3, r3
 80084e0:	3b01      	subs	r3, #1
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e8:	e056      	b.n	8008598 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d11b      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x1aa>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d016      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x1aa>
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	2b01      	cmp	r3, #1
 8008506:	d113      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	881a      	ldrh	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	1c9a      	adds	r2, r3, #2
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	d11c      	bne.n	8008578 <HAL_SPI_TransmitReceive+0x1f2>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d016      	beq.n	8008578 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	b292      	uxth	r2, r2
 8008556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	1c9a      	adds	r2, r3, #2
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008568:	b29b      	uxth	r3, r3
 800856a:	3b01      	subs	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008574:	2301      	movs	r3, #1
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008578:	f7fb f9e2 	bl	8003940 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008584:	429a      	cmp	r2, r3
 8008586:	d807      	bhi.n	8008598 <HAL_SPI_TransmitReceive+0x212>
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d003      	beq.n	8008598 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008596:	e0fb      	b.n	8008790 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1a3      	bne.n	80084ea <HAL_SPI_TransmitReceive+0x164>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d19d      	bne.n	80084ea <HAL_SPI_TransmitReceive+0x164>
 80085ae:	e0df      	b.n	8008770 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <HAL_SPI_TransmitReceive+0x23a>
 80085b8:	8a7b      	ldrh	r3, [r7, #18]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	f040 80cb 	bne.w	8008756 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d912      	bls.n	80085f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ce:	881a      	ldrh	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	1c9a      	adds	r2, r3, #2
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b02      	subs	r3, #2
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085ee:	e0b2      	b.n	8008756 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	330c      	adds	r3, #12
 80085fa:	7812      	ldrb	r2, [r2, #0]
 80085fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008616:	e09e      	b.n	8008756 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b02      	cmp	r3, #2
 8008624:	d134      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x30a>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d02f      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x30a>
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b01      	cmp	r3, #1
 8008634:	d12c      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	d912      	bls.n	8008666 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	881a      	ldrh	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	1c9a      	adds	r2, r3, #2
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800865a:	b29b      	uxth	r3, r3
 800865c:	3b02      	subs	r3, #2
 800865e:	b29a      	uxth	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008664:	e012      	b.n	800868c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	1c5a      	adds	r2, r3, #1
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b01      	cmp	r3, #1
 800869c:	d148      	bne.n	8008730 <HAL_SPI_TransmitReceive+0x3aa>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d042      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d923      	bls.n	80086fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	b292      	uxth	r2, r2
 80086c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	1c9a      	adds	r2, r3, #2
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b02      	subs	r3, #2
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d81f      	bhi.n	800872c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086fa:	605a      	str	r2, [r3, #4]
 80086fc:	e016      	b.n	800872c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f103 020c 	add.w	r2, r3, #12
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	7812      	ldrb	r2, [r2, #0]
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800872c:	2301      	movs	r3, #1
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008730:	f7fb f906 	bl	8003940 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873c:	429a      	cmp	r2, r3
 800873e:	d803      	bhi.n	8008748 <HAL_SPI_TransmitReceive+0x3c2>
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d102      	bne.n	800874e <HAL_SPI_TransmitReceive+0x3c8>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2b00      	cmp	r3, #0
 800874c:	d103      	bne.n	8008756 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008754:	e01c      	b.n	8008790 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f af5b 	bne.w	8008618 <HAL_SPI_TransmitReceive+0x292>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008768:	b29b      	uxth	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	f47f af54 	bne.w	8008618 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f945 	bl	8008a04 <SPI_EndRxTxTransaction>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	661a      	str	r2, [r3, #96]	; 0x60
 800878c:	e000      	b.n	8008790 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800878e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3728      	adds	r7, #40	; 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80087ba:	b2db      	uxtb	r3, r3
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087d8:	f7fb f8b2 	bl	8003940 <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	1a9b      	subs	r3, r3, r2
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4413      	add	r3, r2
 80087e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087e8:	f7fb f8aa 	bl	8003940 <HAL_GetTick>
 80087ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087ee:	4b39      	ldr	r3, [pc, #228]	; (80088d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	015b      	lsls	r3, r3, #5
 80087f4:	0d1b      	lsrs	r3, r3, #20
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	fb02 f303 	mul.w	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087fe:	e054      	b.n	80088aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d050      	beq.n	80088aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008808:	f7fb f89a 	bl	8003940 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	429a      	cmp	r2, r3
 8008816:	d902      	bls.n	800881e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d13d      	bne.n	800889a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800882c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008836:	d111      	bne.n	800885c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008840:	d004      	beq.n	800884c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800884a:	d107      	bne.n	800885c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008864:	d10f      	bne.n	8008886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e017      	b.n	80088ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	4013      	ands	r3, r2
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	bf0c      	ite	eq
 80088ba:	2301      	moveq	r3, #1
 80088bc:	2300      	movne	r3, #0
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d19b      	bne.n	8008800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000004 	.word	0x20000004

080088d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b08a      	sub	sp, #40	; 0x28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088ea:	f7fb f829 	bl	8003940 <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	4413      	add	r3, r2
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088fa:	f7fb f821 	bl	8003940 <HAL_GetTick>
 80088fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	330c      	adds	r3, #12
 8008906:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008908:	4b3d      	ldr	r3, [pc, #244]	; (8008a00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	00da      	lsls	r2, r3, #3
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	0d1b      	lsrs	r3, r3, #20
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	fb02 f303 	mul.w	r3, r2, r3
 800891e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008920:	e060      	b.n	80089e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008928:	d107      	bne.n	800893a <SPI_WaitFifoStateUntilTimeout+0x62>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008938:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d050      	beq.n	80089e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008942:	f7fa fffd 	bl	8003940 <HAL_GetTick>
 8008946:	4602      	mov	r2, r0
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894e:	429a      	cmp	r2, r3
 8008950:	d902      	bls.n	8008958 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	d13d      	bne.n	80089d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008966:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008970:	d111      	bne.n	8008996 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897a:	d004      	beq.n	8008986 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008984:	d107      	bne.n	8008996 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008994:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800899e:	d10f      	bne.n	80089c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e010      	b.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d196      	bne.n	8008922 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3728      	adds	r7, #40	; 0x28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000004 	.word	0x20000004

08008a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff ff5b 	bl	80088d8 <SPI_WaitFifoStateUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2c:	f043 0220 	orr.w	r2, r3, #32
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e027      	b.n	8008a88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2180      	movs	r1, #128	; 0x80
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff fec0 	bl	80087c8 <SPI_WaitFlagStateUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d007      	beq.n	8008a5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a52:	f043 0220 	orr.w	r2, r3, #32
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e014      	b.n	8008a88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff ff34 	bl	80088d8 <SPI_WaitFifoStateUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d007      	beq.n	8008a86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7a:	f043 0220 	orr.w	r2, r3, #32
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e000      	b.n	8008a88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e042      	b.n	8008b28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7f9 fdb5 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2224      	movs	r2, #36	; 0x24
 8008abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8c4 	bl	8008c60 <UART_SetConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e022      	b.n	8008b28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fbb4 	bl	8009258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fc3b 	bl	800939c <UART_CheckIdleState>
 8008b26:	4603      	mov	r3, r0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	f040 8084 	bne.w	8008c54 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_UART_Transmit+0x28>
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e07c      	b.n	8008c56 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_UART_Transmit+0x3a>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e075      	b.n	8008c56 <HAL_UART_Transmit+0x126>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2221      	movs	r2, #33	; 0x21
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b82:	f7fa fedd 	bl	8003940 <HAL_GetTick>
 8008b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba0:	d108      	bne.n	8008bb4 <HAL_UART_Transmit+0x84>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e003      	b.n	8008bbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008bc4:	e02d      	b.n	8008c22 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2180      	movs	r1, #128	; 0x80
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 fc2e 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e03a      	b.n	8008c56 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bf2:	b292      	uxth	r2, r2
 8008bf4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	3302      	adds	r3, #2
 8008bfa:	61bb      	str	r3, [r7, #24]
 8008bfc:	e008      	b.n	8008c10 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	b292      	uxth	r2, r2
 8008c08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1cb      	bne.n	8008bc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2200      	movs	r2, #0
 8008c36:	2140      	movs	r1, #64	; 0x40
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fbfa 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e006      	b.n	8008c56 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2220      	movs	r2, #32
 8008c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008c54:	2302      	movs	r3, #2
  }
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3720      	adds	r7, #32
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c64:	b08c      	sub	sp, #48	; 0x30
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4baa      	ldr	r3, [pc, #680]	; (8008f38 <UART_SetConfig+0x2d8>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	6812      	ldr	r2, [r2, #0]
 8008c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a9f      	ldr	r2, [pc, #636]	; (8008f3c <UART_SetConfig+0x2dc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008cd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cea:	f023 010f 	bic.w	r1, r3, #15
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a90      	ldr	r2, [pc, #576]	; (8008f40 <UART_SetConfig+0x2e0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d125      	bne.n	8008d50 <UART_SetConfig+0xf0>
 8008d04:	4b8f      	ldr	r3, [pc, #572]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d81a      	bhi.n	8008d48 <UART_SetConfig+0xe8>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0xb8>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d41 	.word	0x08008d41
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2e:	e116      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008d30:	2302      	movs	r3, #2
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d36:	e112      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d3e:	e10e      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008d40:	2308      	movs	r3, #8
 8008d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d46:	e10a      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d4e:	e106      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a7c      	ldr	r2, [pc, #496]	; (8008f48 <UART_SetConfig+0x2e8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d138      	bne.n	8008dcc <UART_SetConfig+0x16c>
 8008d5a:	4b7a      	ldr	r3, [pc, #488]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d60:	f003 030c 	and.w	r3, r3, #12
 8008d64:	2b0c      	cmp	r3, #12
 8008d66:	d82d      	bhi.n	8008dc4 <UART_SetConfig+0x164>
 8008d68:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <UART_SetConfig+0x110>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008da5 	.word	0x08008da5
 8008d74:	08008dc5 	.word	0x08008dc5
 8008d78:	08008dc5 	.word	0x08008dc5
 8008d7c:	08008dc5 	.word	0x08008dc5
 8008d80:	08008db5 	.word	0x08008db5
 8008d84:	08008dc5 	.word	0x08008dc5
 8008d88:	08008dc5 	.word	0x08008dc5
 8008d8c:	08008dc5 	.word	0x08008dc5
 8008d90:	08008dad 	.word	0x08008dad
 8008d94:	08008dc5 	.word	0x08008dc5
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	08008dc5 	.word	0x08008dc5
 8008da0:	08008dbd 	.word	0x08008dbd
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008daa:	e0d8      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008dac:	2302      	movs	r3, #2
 8008dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008db2:	e0d4      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008db4:	2304      	movs	r3, #4
 8008db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dba:	e0d0      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dc2:	e0cc      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dca:	e0c8      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a5e      	ldr	r2, [pc, #376]	; (8008f4c <UART_SetConfig+0x2ec>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d125      	bne.n	8008e22 <UART_SetConfig+0x1c2>
 8008dd6:	4b5b      	ldr	r3, [pc, #364]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ddc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008de0:	2b30      	cmp	r3, #48	; 0x30
 8008de2:	d016      	beq.n	8008e12 <UART_SetConfig+0x1b2>
 8008de4:	2b30      	cmp	r3, #48	; 0x30
 8008de6:	d818      	bhi.n	8008e1a <UART_SetConfig+0x1ba>
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d00a      	beq.n	8008e02 <UART_SetConfig+0x1a2>
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d814      	bhi.n	8008e1a <UART_SetConfig+0x1ba>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <UART_SetConfig+0x19a>
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	d008      	beq.n	8008e0a <UART_SetConfig+0x1aa>
 8008df8:	e00f      	b.n	8008e1a <UART_SetConfig+0x1ba>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e00:	e0ad      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e02:	2302      	movs	r3, #2
 8008e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e08:	e0a9      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e0a:	2304      	movs	r3, #4
 8008e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e10:	e0a5      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e12:	2308      	movs	r3, #8
 8008e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e18:	e0a1      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e1a:	2310      	movs	r3, #16
 8008e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e20:	e09d      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a4a      	ldr	r2, [pc, #296]	; (8008f50 <UART_SetConfig+0x2f0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d125      	bne.n	8008e78 <UART_SetConfig+0x218>
 8008e2c:	4b45      	ldr	r3, [pc, #276]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e36:	2bc0      	cmp	r3, #192	; 0xc0
 8008e38:	d016      	beq.n	8008e68 <UART_SetConfig+0x208>
 8008e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e3c:	d818      	bhi.n	8008e70 <UART_SetConfig+0x210>
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d00a      	beq.n	8008e58 <UART_SetConfig+0x1f8>
 8008e42:	2b80      	cmp	r3, #128	; 0x80
 8008e44:	d814      	bhi.n	8008e70 <UART_SetConfig+0x210>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <UART_SetConfig+0x1f0>
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	d008      	beq.n	8008e60 <UART_SetConfig+0x200>
 8008e4e:	e00f      	b.n	8008e70 <UART_SetConfig+0x210>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e56:	e082      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5e:	e07e      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e60:	2304      	movs	r3, #4
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e66:	e07a      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e68:	2308      	movs	r3, #8
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e6e:	e076      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e70:	2310      	movs	r3, #16
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e76:	e072      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a35      	ldr	r2, [pc, #212]	; (8008f54 <UART_SetConfig+0x2f4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d12a      	bne.n	8008ed8 <UART_SetConfig+0x278>
 8008e82:	4b30      	ldr	r3, [pc, #192]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e90:	d01a      	beq.n	8008ec8 <UART_SetConfig+0x268>
 8008e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e96:	d81b      	bhi.n	8008ed0 <UART_SetConfig+0x270>
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9c:	d00c      	beq.n	8008eb8 <UART_SetConfig+0x258>
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea2:	d815      	bhi.n	8008ed0 <UART_SetConfig+0x270>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <UART_SetConfig+0x250>
 8008ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eac:	d008      	beq.n	8008ec0 <UART_SetConfig+0x260>
 8008eae:	e00f      	b.n	8008ed0 <UART_SetConfig+0x270>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb6:	e052      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebe:	e04e      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec6:	e04a      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ece:	e046      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	e042      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a17      	ldr	r2, [pc, #92]	; (8008f3c <UART_SetConfig+0x2dc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d13a      	bne.n	8008f58 <UART_SetConfig+0x2f8>
 8008ee2:	4b18      	ldr	r3, [pc, #96]	; (8008f44 <UART_SetConfig+0x2e4>)
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ef0:	d01a      	beq.n	8008f28 <UART_SetConfig+0x2c8>
 8008ef2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ef6:	d81b      	bhi.n	8008f30 <UART_SetConfig+0x2d0>
 8008ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008efc:	d00c      	beq.n	8008f18 <UART_SetConfig+0x2b8>
 8008efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f02:	d815      	bhi.n	8008f30 <UART_SetConfig+0x2d0>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <UART_SetConfig+0x2b0>
 8008f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f0c:	d008      	beq.n	8008f20 <UART_SetConfig+0x2c0>
 8008f0e:	e00f      	b.n	8008f30 <UART_SetConfig+0x2d0>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f16:	e022      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f1e:	e01e      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008f20:	2304      	movs	r3, #4
 8008f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f26:	e01a      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008f28:	2308      	movs	r3, #8
 8008f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f2e:	e016      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008f30:	2310      	movs	r3, #16
 8008f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f36:	e012      	b.n	8008f5e <UART_SetConfig+0x2fe>
 8008f38:	cfff69f3 	.word	0xcfff69f3
 8008f3c:	40008000 	.word	0x40008000
 8008f40:	40013800 	.word	0x40013800
 8008f44:	40021000 	.word	0x40021000
 8008f48:	40004400 	.word	0x40004400
 8008f4c:	40004800 	.word	0x40004800
 8008f50:	40004c00 	.word	0x40004c00
 8008f54:	40005000 	.word	0x40005000
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4aae      	ldr	r2, [pc, #696]	; (800921c <UART_SetConfig+0x5bc>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	f040 8097 	bne.w	8009098 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f6e:	2b08      	cmp	r3, #8
 8008f70:	d823      	bhi.n	8008fba <UART_SetConfig+0x35a>
 8008f72:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <UART_SetConfig+0x318>)
 8008f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f78:	08008f9d 	.word	0x08008f9d
 8008f7c:	08008fbb 	.word	0x08008fbb
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fbb 	.word	0x08008fbb
 8008f88:	08008fab 	.word	0x08008fab
 8008f8c:	08008fbb 	.word	0x08008fbb
 8008f90:	08008fbb 	.word	0x08008fbb
 8008f94:	08008fbb 	.word	0x08008fbb
 8008f98:	08008fb3 	.word	0x08008fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f9c:	f7fe fb3c 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 8008fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fa2:	e010      	b.n	8008fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fa4:	4b9e      	ldr	r3, [pc, #632]	; (8009220 <UART_SetConfig+0x5c0>)
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fa8:	e00d      	b.n	8008fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008faa:	f7fe fa9d 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fb0:	e009      	b.n	8008fc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fb8:	e005      	b.n	8008fc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008fc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8130 	beq.w	800922e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	4a94      	ldr	r2, [pc, #592]	; (8009224 <UART_SetConfig+0x5c4>)
 8008fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fe0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	4413      	add	r3, r2
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d305      	bcc.n	8008ffe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d903      	bls.n	8009006 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009004:	e113      	b.n	800922e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	2200      	movs	r2, #0
 800900a:	60bb      	str	r3, [r7, #8]
 800900c:	60fa      	str	r2, [r7, #12]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	4a84      	ldr	r2, [pc, #528]	; (8009224 <UART_SetConfig+0x5c4>)
 8009014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009018:	b29b      	uxth	r3, r3
 800901a:	2200      	movs	r2, #0
 800901c:	603b      	str	r3, [r7, #0]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009024:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009028:	f7f7 f93a 	bl	80002a0 <__aeabi_uldivmod>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4610      	mov	r0, r2
 8009032:	4619      	mov	r1, r3
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	020b      	lsls	r3, r1, #8
 800903e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009042:	0202      	lsls	r2, r0, #8
 8009044:	6979      	ldr	r1, [r7, #20]
 8009046:	6849      	ldr	r1, [r1, #4]
 8009048:	0849      	lsrs	r1, r1, #1
 800904a:	2000      	movs	r0, #0
 800904c:	460c      	mov	r4, r1
 800904e:	4605      	mov	r5, r0
 8009050:	eb12 0804 	adds.w	r8, r2, r4
 8009054:	eb43 0905 	adc.w	r9, r3, r5
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	469a      	mov	sl, r3
 8009060:	4693      	mov	fp, r2
 8009062:	4652      	mov	r2, sl
 8009064:	465b      	mov	r3, fp
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 f919 	bl	80002a0 <__aeabi_uldivmod>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4613      	mov	r3, r2
 8009074:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800907c:	d308      	bcc.n	8009090 <UART_SetConfig+0x430>
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009084:	d204      	bcs.n	8009090 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	e0ce      	b.n	800922e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009096:	e0ca      	b.n	800922e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090a0:	d166      	bne.n	8009170 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80090a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d827      	bhi.n	80090fa <UART_SetConfig+0x49a>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <UART_SetConfig+0x450>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090d5 	.word	0x080090d5
 80090b4:	080090dd 	.word	0x080090dd
 80090b8:	080090e5 	.word	0x080090e5
 80090bc:	080090fb 	.word	0x080090fb
 80090c0:	080090eb 	.word	0x080090eb
 80090c4:	080090fb 	.word	0x080090fb
 80090c8:	080090fb 	.word	0x080090fb
 80090cc:	080090fb 	.word	0x080090fb
 80090d0:	080090f3 	.word	0x080090f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d4:	f7fe faa0 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 80090d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090da:	e014      	b.n	8009106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090dc:	f7fe fab2 	bl	8007644 <HAL_RCC_GetPCLK2Freq>
 80090e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090e2:	e010      	b.n	8009106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <UART_SetConfig+0x5c0>)
 80090e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090e8:	e00d      	b.n	8009106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ea:	f7fe f9fd 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 80090ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090f0:	e009      	b.n	8009106 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090f8:	e005      	b.n	8009106 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009104:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8090 	beq.w	800922e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	4a44      	ldr	r2, [pc, #272]	; (8009224 <UART_SetConfig+0x5c4>)
 8009114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009118:	461a      	mov	r2, r3
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009120:	005a      	lsls	r2, r3, #1
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	441a      	add	r2, r3
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	2b0f      	cmp	r3, #15
 8009138:	d916      	bls.n	8009168 <UART_SetConfig+0x508>
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009140:	d212      	bcs.n	8009168 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f023 030f 	bic.w	r3, r3, #15
 800914a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	085b      	lsrs	r3, r3, #1
 8009150:	b29b      	uxth	r3, r3
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	b29a      	uxth	r2, r3
 8009158:	8bfb      	ldrh	r3, [r7, #30]
 800915a:	4313      	orrs	r3, r2
 800915c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	8bfa      	ldrh	r2, [r7, #30]
 8009164:	60da      	str	r2, [r3, #12]
 8009166:	e062      	b.n	800922e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800916e:	e05e      	b.n	800922e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009170:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009174:	2b08      	cmp	r3, #8
 8009176:	d828      	bhi.n	80091ca <UART_SetConfig+0x56a>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <UART_SetConfig+0x520>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	080091a5 	.word	0x080091a5
 8009184:	080091ad 	.word	0x080091ad
 8009188:	080091b5 	.word	0x080091b5
 800918c:	080091cb 	.word	0x080091cb
 8009190:	080091bb 	.word	0x080091bb
 8009194:	080091cb 	.word	0x080091cb
 8009198:	080091cb 	.word	0x080091cb
 800919c:	080091cb 	.word	0x080091cb
 80091a0:	080091c3 	.word	0x080091c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a4:	f7fe fa38 	bl	8007618 <HAL_RCC_GetPCLK1Freq>
 80091a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091aa:	e014      	b.n	80091d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ac:	f7fe fa4a 	bl	8007644 <HAL_RCC_GetPCLK2Freq>
 80091b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091b2:	e010      	b.n	80091d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091b4:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <UART_SetConfig+0x5c0>)
 80091b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091b8:	e00d      	b.n	80091d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ba:	f7fe f995 	bl	80074e8 <HAL_RCC_GetSysClockFreq>
 80091be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091c0:	e009      	b.n	80091d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091c8:	e005      	b.n	80091d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091d4:	bf00      	nop
    }

    if (pclk != 0U)
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d028      	beq.n	800922e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	4a10      	ldr	r2, [pc, #64]	; (8009224 <UART_SetConfig+0x5c4>)
 80091e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e6:	461a      	mov	r2, r3
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b0f      	cmp	r3, #15
 8009204:	d910      	bls.n	8009228 <UART_SetConfig+0x5c8>
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800920c:	d20c      	bcs.n	8009228 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	b29a      	uxth	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60da      	str	r2, [r3, #12]
 8009218:	e009      	b.n	800922e <UART_SetConfig+0x5ce>
 800921a:	bf00      	nop
 800921c:	40008000 	.word	0x40008000
 8009220:	00f42400 	.word	0x00f42400
 8009224:	0800c120 	.word	0x0800c120
      }
      else
      {
        ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2201      	movs	r2, #1
 8009232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2201      	movs	r2, #1
 800923a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2200      	movs	r2, #0
 8009242:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2200      	movs	r2, #0
 8009248:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800924a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800924e:	4618      	mov	r0, r3
 8009250:	3730      	adds	r7, #48	; 0x30
 8009252:	46bd      	mov	sp, r7
 8009254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0310 	and.w	r3, r3, #16
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01a      	beq.n	800936e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009356:	d10a      	bne.n	800936e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	605a      	str	r2, [r3, #4]
  }
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093ac:	f7fa fac8 	bl	8003940 <HAL_GetTick>
 80093b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d10e      	bne.n	80093de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f82f 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e025      	b.n	800942a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d10e      	bne.n	800940a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f819 	bl	8009432 <UART_WaitOnFlagUntilTimeout>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e00f      	b.n	800942a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2220      	movs	r2, #32
 8009416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b09c      	sub	sp, #112	; 0x70
 8009436:	af00      	add	r7, sp, #0
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	603b      	str	r3, [r7, #0]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009442:	e0a9      	b.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944a:	f000 80a5 	beq.w	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800944e:	f7fa fa77 	bl	8003940 <HAL_GetTick>
 8009452:	4602      	mov	r2, r0
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800945a:	429a      	cmp	r2, r3
 800945c:	d302      	bcc.n	8009464 <UART_WaitOnFlagUntilTimeout+0x32>
 800945e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009460:	2b00      	cmp	r3, #0
 8009462:	d140      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009478:	667b      	str	r3, [r7, #100]	; 0x64
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e6      	bne.n	8009464 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3308      	adds	r3, #8
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	663b      	str	r3, [r7, #96]	; 0x60
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80094b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e5      	bne.n	8009496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e069      	b.n	80095ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d051      	beq.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009502:	d149      	bne.n	8009598 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800950c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	e853 3f00 	ldrex	r3, [r3]
 800951a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	461a      	mov	r2, r3
 800952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
 800952e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e6      	bne.n	800950e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	613b      	str	r3, [r7, #16]
   return(result);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	66bb      	str	r3, [r7, #104]	; 0x68
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009560:	623a      	str	r2, [r7, #32]
 8009562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	69f9      	ldr	r1, [r7, #28]
 8009566:	6a3a      	ldr	r2, [r7, #32]
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	61bb      	str	r3, [r7, #24]
   return(result);
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e5      	bne.n	8009540 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2220      	movs	r2, #32
 8009578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2220      	movs	r2, #32
 8009580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e010      	b.n	80095ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	69da      	ldr	r2, [r3, #28]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	bf0c      	ite	eq
 80095a8:	2301      	moveq	r3, #1
 80095aa:	2300      	movne	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	f43f af46 	beq.w	8009444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3770      	adds	r7, #112	; 0x70
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e027      	b.n	8009628 <HAL_UARTEx_DisableFifoMode+0x66>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2224      	movs	r2, #36	; 0x24
 80095e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0201 	bic.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009606:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2220      	movs	r2, #32
 800961a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009648:	2302      	movs	r3, #2
 800964a:	e02d      	b.n	80096a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	; 0x24
 8009658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0201 	bic.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f84f 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d101      	bne.n	80096c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096c4:	2302      	movs	r3, #2
 80096c6:	e02d      	b.n	8009724 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2224      	movs	r2, #36	; 0x24
 80096d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0201 	bic.w	r2, r2, #1
 80096ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f811 	bl	800972c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800974c:	e031      	b.n	80097b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800974e:	2308      	movs	r3, #8
 8009750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009752:	2308      	movs	r3, #8
 8009754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	0e5b      	lsrs	r3, r3, #25
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	0f5b      	lsrs	r3, r3, #29
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009776:	7bbb      	ldrb	r3, [r7, #14]
 8009778:	7b3a      	ldrb	r2, [r7, #12]
 800977a:	4911      	ldr	r1, [pc, #68]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800977c:	5c8a      	ldrb	r2, [r1, r2]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009782:	7b3a      	ldrb	r2, [r7, #12]
 8009784:	490f      	ldr	r1, [pc, #60]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 8009786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009794:	7bfb      	ldrb	r3, [r7, #15]
 8009796:	7b7a      	ldrb	r2, [r7, #13]
 8009798:	4909      	ldr	r1, [pc, #36]	; (80097c0 <UARTEx_SetNbDataToProcess+0x94>)
 800979a:	5c8a      	ldrb	r2, [r1, r2]
 800979c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097a0:	7b7a      	ldrb	r2, [r7, #13]
 80097a2:	4908      	ldr	r1, [pc, #32]	; (80097c4 <UARTEx_SetNbDataToProcess+0x98>)
 80097a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	0800c138 	.word	0x0800c138
 80097c4:	0800c140 	.word	0x0800c140

080097c8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08c      	sub	sp, #48	; 0x30
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	603b      	str	r3, [r7, #0]
 80097d0:	4603      	mov	r3, r0
 80097d2:	71fb      	strb	r3, [r7, #7]
 80097d4:	460b      	mov	r3, r1
 80097d6:	71bb      	strb	r3, [r7, #6]
 80097d8:	4613      	mov	r3, r2
 80097da:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80097e0:	79bb      	ldrb	r3, [r7, #6]
 80097e2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80097e4:	797b      	ldrb	r3, [r7, #5]
 80097e6:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	2207      	movs	r2, #7
 80097ee:	2100      	movs	r1, #0
 80097f0:	4618      	mov	r0, r3
 80097f2:	f001 fca0 	bl	800b136 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097f6:	f107 0318 	add.w	r3, r7, #24
 80097fa:	2218      	movs	r2, #24
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 fc99 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009804:	233f      	movs	r3, #63	; 0x3f
 8009806:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8009808:	238a      	movs	r3, #138	; 0x8a
 800980a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800980c:	f107 0314 	add.w	r3, r7, #20
 8009810:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8009812:	2303      	movs	r3, #3
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8009816:	f107 030c 	add.w	r3, r7, #12
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800981c:	2307      	movs	r3, #7
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009820:	f107 0318 	add.w	r3, r7, #24
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f000 ffd6 	bl	800a7d8 <hci_send_req>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	da01      	bge.n	8009836 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8009832:	23ff      	movs	r3, #255	; 0xff
 8009834:	e014      	b.n	8009860 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009836:	7b3b      	ldrb	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800983c:	7b3b      	ldrb	r3, [r7, #12]
 800983e:	e00f      	b.n	8009860 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8009840:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8009844:	b29a      	uxth	r2, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800984a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800984e:	b29a      	uxth	r2, r3
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009854:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009858:	b29a      	uxth	r2, r3
 800985a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800985c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3730      	adds	r7, #48	; 0x30
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08e      	sub	sp, #56	; 0x38
 800986c:	af00      	add	r7, sp, #0
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800987c:	f107 0314 	add.w	r3, r7, #20
 8009880:	2207      	movs	r2, #7
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fc56 	bl	800b136 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800988a:	f107 0320 	add.w	r3, r7, #32
 800988e:	2218      	movs	r2, #24
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f001 fc4f 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009898:	233f      	movs	r3, #63	; 0x3f
 800989a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800989c:	238a      	movs	r3, #138	; 0x8a
 800989e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 80098a0:	f107 031c 	add.w	r3, r7, #28
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 80098a6:	2301      	movs	r3, #1
 80098a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 80098aa:	f107 0314 	add.w	r3, r7, #20
 80098ae:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80098b0:	2307      	movs	r3, #7
 80098b2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80098b4:	f107 0320 	add.w	r3, r7, #32
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 ff8c 	bl	800a7d8 <hci_send_req>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da01      	bge.n	80098ca <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80098c6:	23ff      	movs	r3, #255	; 0xff
 80098c8:	e014      	b.n	80098f4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80098ca:	7d3b      	ldrb	r3, [r7, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80098d0:	7d3b      	ldrb	r3, [r7, #20]
 80098d2:	e00f      	b.n	80098f4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80098d4:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80098de:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80098e8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3738      	adds	r7, #56	; 0x38
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b095      	sub	sp, #84	; 0x54
 8009900:	af00      	add	r7, sp, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	461a      	mov	r2, r3
 800990a:	4623      	mov	r3, r4
 800990c:	71fb      	strb	r3, [r7, #7]
 800990e:	4603      	mov	r3, r0
 8009910:	80bb      	strh	r3, [r7, #4]
 8009912:	460b      	mov	r3, r1
 8009914:	807b      	strh	r3, [r7, #2]
 8009916:	4613      	mov	r3, r2
 8009918:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009920:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8009924:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009928:	4413      	add	r3, r2
 800992a:	330e      	adds	r3, #14
 800992c:	2b28      	cmp	r3, #40	; 0x28
 800992e:	d901      	bls.n	8009934 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8009930:	2342      	movs	r3, #66	; 0x42
 8009932:	e0c9      	b.n	8009ac8 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8009934:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009938:	3350      	adds	r3, #80	; 0x50
 800993a:	443b      	add	r3, r7
 800993c:	79fa      	ldrb	r2, [r7, #7]
 800993e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009946:	3301      	adds	r3, #1
 8009948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800994c:	88bb      	ldrh	r3, [r7, #4]
 800994e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009950:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009954:	f107 0208 	add.w	r2, r7, #8
 8009958:	4413      	add	r3, r2
 800995a:	88ba      	ldrh	r2, [r7, #4]
 800995c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800995e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009962:	3302      	adds	r3, #2
 8009964:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009968:	887b      	ldrh	r3, [r7, #2]
 800996a:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800996c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009970:	f107 0208 	add.w	r2, r7, #8
 8009974:	4413      	add	r3, r2
 8009976:	887a      	ldrh	r2, [r7, #2]
 8009978:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800997a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800997e:	3302      	adds	r3, #2
 8009980:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8009984:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009988:	3350      	adds	r3, #80	; 0x50
 800998a:	443b      	add	r3, r7
 800998c:	79ba      	ldrb	r2, [r7, #6]
 800998e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009996:	3301      	adds	r3, #1
 8009998:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800999c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099a0:	3350      	adds	r3, #80	; 0x50
 80099a2:	443b      	add	r3, r7
 80099a4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80099a8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80099ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099b0:	3301      	adds	r3, #1
 80099b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 80099b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099ba:	3350      	adds	r3, #80	; 0x50
 80099bc:	443b      	add	r3, r7
 80099be:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80099c2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80099c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099ca:	3301      	adds	r3, #1
 80099cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80099d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099d4:	f107 0208 	add.w	r2, r7, #8
 80099d8:	4413      	add	r3, r2
 80099da:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80099de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fb9a 	bl	800b11a <memcpy>
  indx +=  LocalNameLen;
 80099e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80099ea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80099ee:	4413      	add	r3, r2
 80099f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80099f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099f8:	3350      	adds	r3, #80	; 0x50
 80099fa:	443b      	add	r3, r7
 80099fc:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009a00:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009a04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a08:	3301      	adds	r3, #1
 8009a0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009a0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a12:	f107 0208 	add.w	r2, r7, #8
 8009a16:	4413      	add	r3, r2
 8009a18:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8009a1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 fb7b 	bl	800b11a <memcpy>
  indx +=  ServiceUUIDLen;  
 8009a24:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009a28:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8009a32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8009a36:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009a3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a3e:	f107 0208 	add.w	r2, r7, #8
 8009a42:	4413      	add	r3, r2
 8009a44:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8009a48:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009a4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a4e:	3302      	adds	r3, #2
 8009a50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8009a54:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8009a58:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009a5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a60:	f107 0208 	add.w	r2, r7, #8
 8009a64:	4413      	add	r3, r2
 8009a66:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8009a6a:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a70:	3302      	adds	r3, #2
 8009a72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a7a:	2218      	movs	r2, #24
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f001 fb59 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009a84:	233f      	movs	r3, #63	; 0x3f
 8009a86:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009a88:	2383      	movs	r3, #131	; 0x83
 8009a8a:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8009a8c:	f107 0308 	add.w	r3, r7, #8
 8009a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8009a92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a96:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8009a98:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009aa2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 fe95 	bl	800a7d8 <hci_send_req>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	da01      	bge.n	8009ab8 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8009ab4:	23ff      	movs	r3, #255	; 0xff
 8009ab6:	e007      	b.n	8009ac8 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8009ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <aci_gap_set_discoverable+0x1ca>
    return status;
 8009ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ac4:	e000      	b.n	8009ac8 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3754      	adds	r7, #84	; 0x54
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd90      	pop	{r4, r7, pc}

08009ad0 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b091      	sub	sp, #68	; 0x44
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	603a      	str	r2, [r7, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4603      	mov	r3, r0
 8009adc:	71fb      	strb	r3, [r7, #7]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	71bb      	strb	r3, [r7, #6]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8009aea:	79bb      	ldrb	r3, [r7, #6]
 8009aec:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009aee:	79bb      	ldrb	r3, [r7, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	f107 030e 	add.w	r3, r7, #14
 8009afa:	6814      	ldr	r4, [r2, #0]
 8009afc:	6850      	ldr	r0, [r2, #4]
 8009afe:	6891      	ldr	r1, [r2, #8]
 8009b00:	68d2      	ldr	r2, [r2, #12]
 8009b02:	601c      	str	r4, [r3, #0]
 8009b04:	6058      	str	r0, [r3, #4]
 8009b06:	6099      	str	r1, [r3, #8]
 8009b08:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009b0a:	797b      	ldrb	r3, [r7, #5]
 8009b0c:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009b0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009b12:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8009b14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009b18:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8009b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b1e:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 8009b22:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009b26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b2e:	2218      	movs	r2, #24
 8009b30:	2100      	movs	r1, #0
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 faff 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009b38:	233f      	movs	r3, #63	; 0x3f
 8009b3a:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009b3c:	2386      	movs	r3, #134	; 0x86
 8009b3e:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8009b40:	f107 030c 	add.w	r3, r7, #12
 8009b44:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8009b46:	231a      	movs	r3, #26
 8009b48:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8009b4a:	f107 030b 	add.w	r3, r7, #11
 8009b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8009b50:	2301      	movs	r3, #1
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8009b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fe3c 	bl	800a7d8 <hci_send_req>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da01      	bge.n	8009b6a <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009b66:	23ff      	movs	r3, #255	; 0xff
 8009b68:	e005      	b.n	8009b76 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	e000      	b.n	8009b76 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3744      	adds	r7, #68	; 0x44
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd90      	pop	{r4, r7, pc}

08009b7e <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b092      	sub	sp, #72	; 0x48
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	4603      	mov	r3, r0
 8009b88:	81fb      	strh	r3, [r7, #14]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	81bb      	strh	r3, [r7, #12]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8009b92:	89fb      	ldrh	r3, [r7, #14]
 8009b94:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8009b96:	89bb      	ldrh	r3, [r7, #12]
 8009b98:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	f107 031d 	add.w	r3, r7, #29
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	6019      	str	r1, [r3, #0]
 8009ba8:	8892      	ldrh	r2, [r2, #4]
 8009baa:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8009bac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8009bb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8009bba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8009bbe:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8009bc0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009bc4:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8009bc6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8009bca:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8009bcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009bd0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8009bd2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009bd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bdc:	2218      	movs	r2, #24
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 faa8 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009be6:	233f      	movs	r3, #63	; 0x3f
 8009be8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8009bea:	239c      	movs	r3, #156	; 0x9c
 8009bec:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8009bee:	f107 0318 	add.w	r3, r7, #24
 8009bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 8009bf4:	2318      	movs	r3, #24
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8009bf8:	230f      	movs	r3, #15
 8009bfa:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8009bfc:	f107 0317 	add.w	r3, r7, #23
 8009c00:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8009c02:	2301      	movs	r3, #1
 8009c04:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fde3 	bl	800a7d8 <hci_send_req>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da01      	bge.n	8009c1c <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009c18:	23ff      	movs	r3, #255	; 0xff
 8009c1a:	e000      	b.n	8009c1e <aci_gap_create_connection+0xa0>

  return status;
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3748      	adds	r7, #72	; 0x48
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b088      	sub	sp, #32
 8009c2a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c2c:	f107 0308 	add.w	r3, r7, #8
 8009c30:	2218      	movs	r2, #24
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fa7e 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c3a:	233f      	movs	r3, #63	; 0x3f
 8009c3c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8009c3e:	f240 1301 	movw	r3, #257	; 0x101
 8009c42:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c44:	1dfb      	adds	r3, r7, #7
 8009c46:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009c4c:	f107 0308 	add.w	r3, r7, #8
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fdc0 	bl	800a7d8 <hci_send_req>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da01      	bge.n	8009c62 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8009c5e:	23ff      	movs	r3, #255	; 0xff
 8009c60:	e000      	b.n	8009c64 <aci_gatt_init+0x3e>

  return status;
 8009c62:	79fb      	ldrb	r3, [r7, #7]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b090      	sub	sp, #64	; 0x40
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6039      	str	r1, [r7, #0]
 8009c74:	4611      	mov	r1, r2
 8009c76:	461a      	mov	r2, r3
 8009c78:	4603      	mov	r3, r0
 8009c7a:	71fb      	strb	r3, [r7, #7]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	71bb      	strb	r3, [r7, #6]
 8009c80:	4613      	mov	r3, r2
 8009c82:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8009c8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009c8e:	3340      	adds	r3, #64	; 0x40
 8009c90:	443b      	add	r3, r7
 8009c92:	79fa      	ldrb	r2, [r7, #7]
 8009c94:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009c98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d103      	bne.n	8009cb0 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009cae:	e002      	b.n	8009cb6 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009cb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cba:	f107 020c 	add.w	r2, r7, #12
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fa27 	bl	800b11a <memcpy>
  indx +=  uuid_len;
 8009ccc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8009cd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8009cda:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cde:	3340      	adds	r3, #64	; 0x40
 8009ce0:	443b      	add	r3, r7
 8009ce2:	79ba      	ldrb	r2, [r7, #6]
 8009ce4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009ce8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cec:	3301      	adds	r3, #1
 8009cee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8009cf2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009cf6:	3340      	adds	r3, #64	; 0x40
 8009cf8:	443b      	add	r3, r7
 8009cfa:	797a      	ldrb	r2, [r7, #5]
 8009cfc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009d00:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d04:	3301      	adds	r3, #1
 8009d06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009d0a:	f107 0320 	add.w	r3, r7, #32
 8009d0e:	2203      	movs	r2, #3
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 fa0f 	bl	800b136 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d1c:	2218      	movs	r2, #24
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 fa08 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d26:	233f      	movs	r3, #63	; 0x3f
 8009d28:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8009d2a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 8009d30:	f107 030c 	add.w	r3, r7, #12
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8009d36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8009d3c:	f107 0320 	add.w	r3, r7, #32
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009d42:	2303      	movs	r3, #3
 8009d44:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8009d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fd43 	bl	800a7d8 <hci_send_req>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da01      	bge.n	8009d5c <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8009d58:	23ff      	movs	r3, #255	; 0xff
 8009d5a:	e00c      	b.n	8009d76 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8009d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <aci_gatt_add_serv+0xfe>
    return resp.status;
 8009d64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d68:	e005      	b.n	8009d76 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8009d6a:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d72:	801a      	strh	r2, [r3, #0]

  return 0;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3740      	adds	r7, #64	; 0x40
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b092      	sub	sp, #72	; 0x48
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	603a      	str	r2, [r7, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	4603      	mov	r3, r0
 8009d8a:	80fb      	strh	r3, [r7, #6]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	717b      	strb	r3, [r7, #5]
 8009d90:	4613      	mov	r3, r2
 8009d92:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8009d9a:	88fb      	ldrh	r3, [r7, #6]
 8009d9c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009d9e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009da2:	f107 020c 	add.w	r2, r7, #12
 8009da6:	4413      	add	r3, r2
 8009da8:	88fa      	ldrh	r2, [r7, #6]
 8009daa:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009dac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009db0:	3302      	adds	r3, #2
 8009db2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8009db6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009dba:	3348      	adds	r3, #72	; 0x48
 8009dbc:	443b      	add	r3, r7
 8009dbe:	797a      	ldrb	r2, [r7, #5]
 8009dc0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009dc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009dc8:	3301      	adds	r3, #1
 8009dca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8009dce:	797b      	ldrb	r3, [r7, #5]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d103      	bne.n	8009ddc <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009dda:	e002      	b.n	8009de2 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8009ddc:	2310      	movs	r3, #16
 8009dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009de2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009de6:	f107 020c 	add.w	r2, r7, #12
 8009dea:	4413      	add	r3, r2
 8009dec:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 f991 	bl	800b11a <memcpy>
  indx +=  uuid_len;
 8009df8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8009dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e00:	4413      	add	r3, r2
 8009e02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8009e06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e0a:	3348      	adds	r3, #72	; 0x48
 8009e0c:	443b      	add	r3, r7
 8009e0e:	793a      	ldrb	r2, [r7, #4]
 8009e10:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e18:	3301      	adds	r3, #1
 8009e1a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8009e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e22:	3348      	adds	r3, #72	; 0x48
 8009e24:	443b      	add	r3, r7
 8009e26:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009e2a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e32:	3301      	adds	r3, #1
 8009e34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8009e38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e3c:	3348      	adds	r3, #72	; 0x48
 8009e3e:	443b      	add	r3, r7
 8009e40:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8009e44:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8009e52:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e56:	3348      	adds	r3, #72	; 0x48
 8009e58:	443b      	add	r3, r7
 8009e5a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8009e5e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e62:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e66:	3301      	adds	r3, #1
 8009e68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8009e6c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e70:	3348      	adds	r3, #72	; 0x48
 8009e72:	443b      	add	r3, r7
 8009e74:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8009e78:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e80:	3301      	adds	r3, #1
 8009e82:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8009e86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e8a:	3348      	adds	r3, #72	; 0x48
 8009e8c:	443b      	add	r3, r7
 8009e8e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8009e92:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009e96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ea4:	2203      	movs	r2, #3
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f944 	bl	800b136 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009eb2:	2218      	movs	r2, #24
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 f93d 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009ebc:	233f      	movs	r3, #63	; 0x3f
 8009ebe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009ec0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8009ec6:	f107 030c 	add.w	r3, r7, #12
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8009ecc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8009ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fc78 	bl	800a7d8 <hci_send_req>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	da01      	bge.n	8009ef2 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009eee:	23ff      	movs	r3, #255	; 0xff
 8009ef0:	e00c      	b.n	8009f0c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <aci_gatt_add_char+0x182>
    return resp.status;
 8009efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009efe:	e005      	b.n	8009f0c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009f00:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f08:	801a      	strh	r2, [r3, #0]

  return 0;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3748      	adds	r7, #72	; 0x48
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b0ab      	sub	sp, #172	; 0xac
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	4608      	mov	r0, r1
 8009f1e:	4611      	mov	r1, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	4623      	mov	r3, r4
 8009f24:	80fb      	strh	r3, [r7, #6]
 8009f26:	4603      	mov	r3, r0
 8009f28:	80bb      	strh	r3, [r7, #4]
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	70fb      	strb	r3, [r7, #3]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009f38:	78bb      	ldrb	r3, [r7, #2]
 8009f3a:	2b7a      	cmp	r3, #122	; 0x7a
 8009f3c:	d901      	bls.n	8009f42 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009f3e:	2342      	movs	r3, #66	; 0x42
 8009f40:	e074      	b.n	800a02c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009f46:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f4a:	f107 0208 	add.w	r2, r7, #8
 8009f4e:	4413      	add	r3, r2
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009f54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f58:	3302      	adds	r3, #2
 8009f5a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8009f5e:	88bb      	ldrh	r3, [r7, #4]
 8009f60:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009f62:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f66:	f107 0208 	add.w	r2, r7, #8
 8009f6a:	4413      	add	r3, r2
 8009f6c:	88ba      	ldrh	r2, [r7, #4]
 8009f6e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009f70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f74:	3302      	adds	r3, #2
 8009f76:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8009f7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f7e:	33a8      	adds	r3, #168	; 0xa8
 8009f80:	443b      	add	r3, r7
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009f88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8009f92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009f96:	33a8      	adds	r3, #168	; 0xa8
 8009f98:	443b      	add	r3, r7
 8009f9a:	78ba      	ldrb	r2, [r7, #2]
 8009f9c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009fa0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009faa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009fae:	f107 0208 	add.w	r2, r7, #8
 8009fb2:	4413      	add	r3, r2
 8009fb4:	78ba      	ldrb	r2, [r7, #2]
 8009fb6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 f8ad 	bl	800b11a <memcpy>
  indx +=  charValueLen;
 8009fc0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8009fc4:	78bb      	ldrb	r3, [r7, #2]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009fcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009fd0:	2218      	movs	r2, #24
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 f8ae 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009fda:	233f      	movs	r3, #63	; 0x3f
 8009fdc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009fe0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009fe4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8009ff0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8009ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8009ff8:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8009ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800a000:	2301      	movs	r3, #1
 800a002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a006:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a00a:	2100      	movs	r1, #0
 800a00c:	4618      	mov	r0, r3
 800a00e:	f000 fbe3 	bl	800a7d8 <hci_send_req>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	da01      	bge.n	800a01c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 800a018:	23ff      	movs	r3, #255	; 0xff
 800a01a:	e007      	b.n	800a02c <aci_gatt_update_char_value+0x118>

  if (status) {
 800a01c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <aci_gatt_update_char_value+0x116>
    return status;
 800a024:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800a028:	e000      	b.n	800a02c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	37ac      	adds	r7, #172	; 0xac
 800a030:	46bd      	mov	sp, r7
 800a032:	bd90      	pop	{r4, r7, pc}

0800a034 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800a034:	b590      	push	{r4, r7, lr}
 800a036:	b091      	sub	sp, #68	; 0x44
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	461a      	mov	r2, r3
 800a042:	4623      	mov	r3, r4
 800a044:	80fb      	strh	r3, [r7, #6]
 800a046:	4603      	mov	r3, r0
 800a048:	80bb      	strh	r3, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	807b      	strh	r3, [r7, #2]
 800a04e:	4613      	mov	r3, r2
 800a050:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a05c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a060:	f107 020c 	add.w	r2, r7, #12
 800a064:	4413      	add	r3, r2
 800a066:	88fa      	ldrh	r2, [r7, #6]
 800a068:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a06a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a06e:	3302      	adds	r3, #2
 800a070:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 800a074:	88bb      	ldrh	r3, [r7, #4]
 800a076:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800a078:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a07c:	f107 020c 	add.w	r2, r7, #12
 800a080:	4413      	add	r3, r2
 800a082:	88ba      	ldrh	r2, [r7, #4]
 800a084:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a086:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a08a:	3302      	adds	r3, #2
 800a08c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 800a090:	887b      	ldrh	r3, [r7, #2]
 800a092:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800a094:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a098:	f107 020c 	add.w	r2, r7, #12
 800a09c:	4413      	add	r3, r2
 800a09e:	887a      	ldrh	r2, [r7, #2]
 800a0a0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a0a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a0a6:	3302      	adds	r3, #2
 800a0a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 800a0ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a0b0:	3340      	adds	r3, #64	; 0x40
 800a0b2:	443b      	add	r3, r7
 800a0b4:	787a      	ldrb	r2, [r7, #1]
 800a0b6:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800a0ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a0be:	3301      	adds	r3, #1
 800a0c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800a0c4:	787b      	ldrb	r3, [r7, #1]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d103      	bne.n	800a0d2 <aci_gatt_disc_charac_by_uuid+0x9e>
    uuid_len = 2;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a0d0:	e002      	b.n	800a0d8 <aci_gatt_disc_charac_by_uuid+0xa4>
  }
  else {
    uuid_len = 16;
 800a0d2:	2310      	movs	r3, #16
 800a0d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800a0d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a0dc:	f107 020c 	add.w	r2, r7, #12
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a0e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 f816 	bl	800b11a <memcpy>
  indx +=  uuid_len;
 800a0ee:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800a0f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a100:	2218      	movs	r2, #24
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f001 f816 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a10a:	233f      	movs	r3, #63	; 0x3f
 800a10c:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800a10e:	f44f 738b 	mov.w	r3, #278	; 0x116
 800a112:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 800a11a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a11e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 800a120:	230f      	movs	r3, #15
 800a122:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 800a124:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800a128:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 800a12a:	2301      	movs	r3, #1
 800a12c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800a12e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a132:	2100      	movs	r1, #0
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fb4f 	bl	800a7d8 <hci_send_req>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	da01      	bge.n	800a144 <aci_gatt_disc_charac_by_uuid+0x110>
    return BLE_STATUS_TIMEOUT;
 800a140:	23ff      	movs	r3, #255	; 0xff
 800a142:	e001      	b.n	800a148 <aci_gatt_disc_charac_by_uuid+0x114>

  return status;
 800a144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3744      	adds	r7, #68	; 0x44
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}

0800a150 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b0ac      	sub	sp, #176	; 0xb0
 800a154:	af00      	add	r7, sp, #0
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	4603      	mov	r3, r0
 800a15a:	81fb      	strh	r3, [r7, #14]
 800a15c:	460b      	mov	r3, r1
 800a15e:	81bb      	strh	r3, [r7, #12]
 800a160:	4613      	mov	r3, r2
 800a162:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b7b      	cmp	r3, #123	; 0x7b
 800a16e:	d901      	bls.n	800a174 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 800a170:	2342      	movs	r3, #66	; 0x42
 800a172:	e064      	b.n	800a23e <aci_gatt_write_charac_descriptor+0xee>

  conn_handle = htobs(conn_handle);
 800a174:	89fb      	ldrh	r3, [r7, #14]
 800a176:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800a178:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a17c:	f107 0210 	add.w	r2, r7, #16
 800a180:	4413      	add	r3, r2
 800a182:	89fa      	ldrh	r2, [r7, #14]
 800a184:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a186:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a18a:	3302      	adds	r3, #2
 800a18c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 800a190:	89bb      	ldrh	r3, [r7, #12]
 800a192:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800a194:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a198:	f107 0210 	add.w	r2, r7, #16
 800a19c:	4413      	add	r3, r2
 800a19e:	89ba      	ldrh	r2, [r7, #12]
 800a1a0:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800a1a2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 800a1ac:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a1b0:	33b0      	adds	r3, #176	; 0xb0
 800a1b2:	443b      	add	r3, r7
 800a1b4:	7afa      	ldrb	r2, [r7, #11]
 800a1b6:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a1ba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a1be:	3301      	adds	r3, #1
 800a1c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800a1c4:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a1c8:	f107 0210 	add.w	r2, r7, #16
 800a1cc:	4413      	add	r3, r2
 800a1ce:	7afa      	ldrb	r2, [r7, #11]
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ffa1 	bl	800b11a <memcpy>
  indx +=  value_len;
 800a1d8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a1e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a1e8:	2218      	movs	r2, #24
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 ffa2 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a1f2:	233f      	movs	r3, #63	; 0x3f
 800a1f4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800a1f8:	f240 1321 	movw	r3, #289	; 0x121
 800a1fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 800a208:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800a20c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 800a210:	230f      	movs	r3, #15
 800a212:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800a216:	f107 0393 	add.w	r3, r7, #147	; 0x93
 800a21a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 800a21e:	2301      	movs	r3, #1
 800a220:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 800a224:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800a228:	2100      	movs	r1, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 fad4 	bl	800a7d8 <hci_send_req>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	da01      	bge.n	800a23a <aci_gatt_write_charac_descriptor+0xea>
    return BLE_STATUS_TIMEOUT;
 800a236:	23ff      	movs	r3, #255	; 0xff
 800a238:	e001      	b.n	800a23e <aci_gatt_write_charac_descriptor+0xee>

  return status;
 800a23a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800a23e:	4618      	mov	r0, r3
 800a240:	37b0      	adds	r7, #176	; 0xb0
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b092      	sub	sp, #72	; 0x48
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	607b      	str	r3, [r7, #4]
 800a24e:	4603      	mov	r3, r0
 800a250:	81fb      	strh	r3, [r7, #14]
 800a252:	460b      	mov	r3, r1
 800a254:	81bb      	strh	r3, [r7, #12]
 800a256:	4613      	mov	r3, r2
 800a258:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800a25a:	7afb      	ldrb	r3, [r7, #11]
 800a25c:	2b14      	cmp	r3, #20
 800a25e:	d901      	bls.n	800a264 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800a260:	2342      	movs	r3, #66	; 0x42
 800a262:	e031      	b.n	800a2c8 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 800a264:	89fb      	ldrh	r3, [r7, #14]
 800a266:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 800a268:	89bb      	ldrh	r3, [r7, #12]
 800a26a:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800a26c:	7afb      	ldrb	r3, [r7, #11]
 800a26e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800a270:	7afa      	ldrb	r2, [r7, #11]
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	3305      	adds	r3, #5
 800a278:	6879      	ldr	r1, [r7, #4]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 ff4d 	bl	800b11a <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a280:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a284:	2218      	movs	r2, #24
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 ff54 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a28e:	233f      	movs	r3, #63	; 0x3f
 800a290:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800a292:	f240 1323 	movw	r3, #291	; 0x123
 800a296:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800a29e:	7afb      	ldrb	r3, [r7, #11]
 800a2a0:	3305      	adds	r3, #5
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800a2a4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a2a8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800a2ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fa8f 	bl	800a7d8 <hci_send_req>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da01      	bge.n	800a2c4 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800a2c0:	23ff      	movs	r3, #255	; 0xff
 800a2c2:	e001      	b.n	800a2c8 <aci_gatt_write_without_response+0x82>

  return status;
 800a2c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3748      	adds	r7, #72	; 0x48
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b0aa      	sub	sp, #168	; 0xa8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	603a      	str	r2, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800a2e6:	79bb      	ldrb	r3, [r7, #6]
 800a2e8:	2b7e      	cmp	r3, #126	; 0x7e
 800a2ea:	d901      	bls.n	800a2f0 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 800a2ec:	2342      	movs	r3, #66	; 0x42
 800a2ee:	e050      	b.n	800a392 <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 800a2f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a2f4:	33a8      	adds	r3, #168	; 0xa8
 800a2f6:	443b      	add	r3, r7
 800a2f8:	79fa      	ldrb	r2, [r7, #7]
 800a2fa:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a2fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a302:	3301      	adds	r3, #1
 800a304:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 800a308:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a30c:	33a8      	adds	r3, #168	; 0xa8
 800a30e:	443b      	add	r3, r7
 800a310:	79ba      	ldrb	r2, [r7, #6]
 800a312:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800a316:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a31a:	3301      	adds	r3, #1
 800a31c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800a320:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a324:	f107 0208 	add.w	r2, r7, #8
 800a328:	4413      	add	r3, r2
 800a32a:	79ba      	ldrb	r2, [r7, #6]
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fef3 	bl	800b11a <memcpy>
  indx +=  len;
 800a334:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800a338:	79bb      	ldrb	r3, [r7, #6]
 800a33a:	4413      	add	r3, r2
 800a33c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a340:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a344:	2218      	movs	r2, #24
 800a346:	2100      	movs	r1, #0
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fef4 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a34e:	233f      	movs	r3, #63	; 0x3f
 800a350:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800a354:	230c      	movs	r3, #12
 800a356:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 800a362:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800a36a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800a36e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800a372:	2301      	movs	r3, #1
 800a374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800a378:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a37c:	2100      	movs	r1, #0
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fa2a 	bl	800a7d8 <hci_send_req>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	da01      	bge.n	800a38e <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800a38a:	23ff      	movs	r3, #255	; 0xff
 800a38c:	e001      	b.n	800a392 <aci_hal_write_config_data+0xc2>

  return status;
 800a38e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 800a392:	4618      	mov	r0, r3
 800a394:	37a8      	adds	r7, #168	; 0xa8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b08a      	sub	sp, #40	; 0x28
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	460a      	mov	r2, r1
 800a3a4:	71fb      	strb	r3, [r7, #7]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800a3ae:	79bb      	ldrb	r3, [r7, #6]
 800a3b0:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a3b2:	f107 0310 	add.w	r3, r7, #16
 800a3b6:	2218      	movs	r2, #24
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 febb 	bl	800b136 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800a3c0:	233f      	movs	r3, #63	; 0x3f
 800a3c2:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a3c4:	230f      	movs	r3, #15
 800a3c6:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 800a3c8:	f107 030c 	add.w	r3, r7, #12
 800a3cc:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800a3d2:	f107 030b 	add.w	r3, r7, #11
 800a3d6:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 800a3dc:	f107 0310 	add.w	r3, r7, #16
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f9f8 	bl	800a7d8 <hci_send_req>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da01      	bge.n	800a3f2 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800a3ee:	23ff      	movs	r3, #255	; 0xff
 800a3f0:	e000      	b.n	800a3f4 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800a3f2:	7afb      	ldrb	r3, [r7, #11]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3728      	adds	r7, #40	; 0x28
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a3fc:	b590      	push	{r4, r7, lr}
 800a3fe:	b089      	sub	sp, #36	; 0x24
 800a400:	af02      	add	r7, sp, #8
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a406:	f107 0410 	add.w	r4, r7, #16
 800a40a:	f107 0215 	add.w	r2, r7, #21
 800a40e:	f107 0112 	add.w	r1, r7, #18
 800a412:	f107 0016 	add.w	r0, r7, #22
 800a416:	f107 030e 	add.w	r3, r7, #14
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	4623      	mov	r3, r4
 800a41e:	f000 f853 	bl	800a4c8 <hci_le_read_local_version>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d126      	bne.n	800a47a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 800a42c:	8a7b      	ldrh	r3, [r7, #18]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	b2da      	uxtb	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a438:	8a7b      	ldrh	r3, [r7, #18]
 800a43a:	021b      	lsls	r3, r3, #8
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b21a      	sxth	r2, r3
 800a448:	89fb      	ldrh	r3, [r7, #14]
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	011b      	lsls	r3, r3, #4
 800a450:	b21b      	sxth	r3, r3
 800a452:	b2db      	uxtb	r3, r3
 800a454:	b21b      	sxth	r3, r3
 800a456:	4313      	orrs	r3, r2
 800a458:	b21b      	sxth	r3, r3
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	881b      	ldrh	r3, [r3, #0]
 800a464:	b21a      	sxth	r2, r3
 800a466:	89fb      	ldrh	r3, [r7, #14]
 800a468:	b21b      	sxth	r3, r3
 800a46a:	f003 030f 	and.w	r3, r3, #15
 800a46e:	b21b      	sxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b21b      	sxth	r3, r3
 800a474:	b29a      	uxth	r2, r3
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	371c      	adds	r7, #28
 800a480:	46bd      	mov	sp, r7
 800a482:	bd90      	pop	{r4, r7, pc}

0800a484 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a48a:	f107 0308 	add.w	r3, r7, #8
 800a48e:	2218      	movs	r2, #24
 800a490:	2100      	movs	r1, #0
 800a492:	4618      	mov	r0, r3
 800a494:	f000 fe4f 	bl	800b136 <memset>
  rq.ogf = OGF_HOST_CTL;
 800a498:	2303      	movs	r3, #3
 800a49a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800a49c:	2303      	movs	r3, #3
 800a49e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a4a0:	1dfb      	adds	r3, r7, #7
 800a4a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a4a8:	f107 0308 	add.w	r3, r7, #8
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f992 	bl	800a7d8 <hci_send_req>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	da01      	bge.n	800a4be <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 800a4ba:	23ff      	movs	r3, #255	; 0xff
 800a4bc:	e000      	b.n	800a4c0 <hci_reset+0x3c>
  
  return status;  
 800a4be:	79fb      	ldrb	r3, [r7, #7]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08e      	sub	sp, #56	; 0x38
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a4d6:	f107 0314 	add.w	r3, r7, #20
 800a4da:	2209      	movs	r2, #9
 800a4dc:	2100      	movs	r1, #0
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fe29 	bl	800b136 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a4e4:	f107 0320 	add.w	r3, r7, #32
 800a4e8:	2218      	movs	r2, #24
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fe22 	bl	800b136 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800a4f2:	2304      	movs	r3, #4
 800a4f4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800a502:	f107 0314 	add.w	r3, r7, #20
 800a506:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a508:	2309      	movs	r3, #9
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a50c:	f107 0320 	add.w	r3, r7, #32
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f960 	bl	800a7d8 <hci_send_req>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	da01      	bge.n	800a522 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a51e:	23ff      	movs	r3, #255	; 0xff
 800a520:	e018      	b.n	800a554 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800a522:	7d3b      	ldrb	r3, [r7, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <hci_le_read_local_version+0x64>
    return resp.status;
 800a528:	7d3b      	ldrb	r3, [r7, #20]
 800a52a:	e013      	b.n	800a554 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800a52c:	7d7a      	ldrb	r2, [r7, #21]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800a532:	8afa      	ldrh	r2, [r7, #22]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a538:	7e3a      	ldrb	r2, [r7, #24]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a53e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800a542:	b29a      	uxth	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a548:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a550:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3738      	adds	r7, #56	; 0x38
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b092      	sub	sp, #72	; 0x48
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	2220      	movs	r2, #32
 800a56e:	2100      	movs	r1, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fde0 	bl	800b136 <memset>
  scan_resp_cp.length = length;
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	2b1f      	cmp	r3, #31
 800a57e:	bf28      	it	cs
 800a580:	231f      	movcs	r3, #31
 800a582:	b2db      	uxtb	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	f107 0310 	add.w	r3, r7, #16
 800a58a:	3301      	adds	r3, #1
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fdc3 	bl	800b11a <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a598:	2218      	movs	r2, #24
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f000 fdca 	bl	800b136 <memset>
  rq.ogf = OGF_LE_CTL;
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a5a6:	2309      	movs	r3, #9
 800a5a8:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 800a5aa:	f107 0310 	add.w	r3, r7, #16
 800a5ae:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a5b0:	2320      	movs	r3, #32
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800a5b4:	f107 030f 	add.w	r3, r7, #15
 800a5b8:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a5be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 f907 	bl	800a7d8 <hci_send_req>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	da01      	bge.n	800a5d4 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800a5d0:	23ff      	movs	r3, #255	; 0xff
 800a5d2:	e000      	b.n	800a5d6 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3748      	adds	r7, #72	; 0x48
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d001      	beq.n	800a5f8 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e00c      	b.n	800a612 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3302      	adds	r3, #2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a606:	3b03      	subs	r3, #3
 800a608:	429a      	cmp	r2, r3
 800a60a:	d001      	beq.n	800a610 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800a60c:	2302      	movs	r3, #2
 800a60e:	e000      	b.n	800a612 <verify_packet+0x34>
  
  return 0;      
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b0a6      	sub	sp, #152	; 0x98
 800a624:	af00      	add	r7, sp, #0
 800a626:	607b      	str	r3, [r7, #4]
 800a628:	4603      	mov	r3, r0
 800a62a:	81fb      	strh	r3, [r7, #14]
 800a62c:	460b      	mov	r3, r1
 800a62e:	81bb      	strh	r3, [r7, #12]
 800a630:	4613      	mov	r3, r2
 800a632:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a63c:	b21a      	sxth	r2, r3
 800a63e:	89fb      	ldrh	r3, [r7, #14]
 800a640:	029b      	lsls	r3, r3, #10
 800a642:	b21b      	sxth	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b21b      	sxth	r3, r3
 800a648:	b29b      	uxth	r3, r3
 800a64a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800a64c:	7afb      	ldrb	r3, [r7, #11]
 800a64e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800a650:	2301      	movs	r3, #1
 800a652:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a654:	f107 0318 	add.w	r3, r7, #24
 800a658:	3301      	adds	r3, #1
 800a65a:	461a      	mov	r2, r3
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	8819      	ldrh	r1, [r3, #0]
 800a662:	789b      	ldrb	r3, [r3, #2]
 800a664:	8011      	strh	r1, [r2, #0]
 800a666:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a668:	f107 0318 	add.w	r3, r7, #24
 800a66c:	3304      	adds	r3, #4
 800a66e:	7afa      	ldrb	r2, [r7, #11]
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fd51 	bl	800b11a <memcpy>
  
  if (hciContext.io.Send)
 800a678:	4b08      	ldr	r3, [pc, #32]	; (800a69c <send_cmd+0x7c>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a680:	4b06      	ldr	r3, [pc, #24]	; (800a69c <send_cmd+0x7c>)
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	7afa      	ldrb	r2, [r7, #11]
 800a686:	b292      	uxth	r2, r2
 800a688:	3204      	adds	r2, #4
 800a68a:	b291      	uxth	r1, r2
 800a68c:	f107 0218 	add.w	r2, r7, #24
 800a690:	4610      	mov	r0, r2
 800a692:	4798      	blx	r3
  }
}
 800a694:	bf00      	nop
 800a696:	3798      	adds	r7, #152	; 0x98
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	2000099c 	.word	0x2000099c

0800a6a0 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a6aa:	e00a      	b.n	800a6c2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a6ac:	f107 030c 	add.w	r3, r7, #12
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	6838      	ldr	r0, [r7, #0]
 800a6b4:	f000 faea 	bl	800ac8c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa51 	bl	800ab64 <list_insert_head>
  while (!list_is_empty(src_list))
 800a6c2:	6838      	ldr	r0, [r7, #0]
 800a6c4:	f000 fa2c 	bl	800ab20 <list_is_empty>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0ee      	beq.n	800a6ac <move_list+0xc>
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a6de:	e009      	b.n	800a6f4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a6e0:	1d3b      	adds	r3, r7, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4809      	ldr	r0, [pc, #36]	; (800a70c <free_event_list+0x34>)
 800a6e6:	f000 faaa 	bl	800ac3e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4808      	ldr	r0, [pc, #32]	; (800a710 <free_event_list+0x38>)
 800a6f0:	f000 fa5e 	bl	800abb0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a6f4:	4806      	ldr	r0, [pc, #24]	; (800a710 <free_event_list+0x38>)
 800a6f6:	f000 faf0 	bl	800acda <list_get_size>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	ddef      	ble.n	800a6e0 <free_event_list+0x8>
  }
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200006d8 	.word	0x200006d8
 800a710:	200006d0 	.word	0x200006d0

0800a714 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a724:	4a18      	ldr	r2, [pc, #96]	; (800a788 <hci_init+0x74>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a72a:	4818      	ldr	r0, [pc, #96]	; (800a78c <hci_init+0x78>)
 800a72c:	f000 f9e8 	bl	800ab00 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a730:	4817      	ldr	r0, [pc, #92]	; (800a790 <hci_init+0x7c>)
 800a732:	f000 f9e5 	bl	800ab00 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a736:	f7f6 f87b 	bl	8000830 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a73a:	2300      	movs	r3, #0
 800a73c:	73fb      	strb	r3, [r7, #15]
 800a73e:	e00c      	b.n	800a75a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	228c      	movs	r2, #140	; 0x8c
 800a744:	fb02 f303 	mul.w	r3, r2, r3
 800a748:	4a12      	ldr	r2, [pc, #72]	; (800a794 <hci_init+0x80>)
 800a74a:	4413      	add	r3, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	480f      	ldr	r0, [pc, #60]	; (800a78c <hci_init+0x78>)
 800a750:	f000 fa2e 	bl	800abb0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	3301      	adds	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d9ef      	bls.n	800a740 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <hci_init+0x74>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d003      	beq.n	800a770 <hci_init+0x5c>
 800a768:	4b07      	ldr	r3, [pc, #28]	; (800a788 <hci_init+0x74>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2000      	movs	r0, #0
 800a76e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <hci_init+0x74>)
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <hci_init+0x6a>
 800a778:	4b03      	ldr	r3, [pc, #12]	; (800a788 <hci_init+0x74>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	4798      	blx	r3
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	2000099c 	.word	0x2000099c
 800a78c:	200006d0 	.word	0x200006d0
 800a790:	200006d8 	.word	0x200006d8
 800a794:	200006e0 	.word	0x200006e0

0800a798 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a0b      	ldr	r2, [pc, #44]	; (800a7d4 <hci_register_io_bus+0x3c>)
 800a7a6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4a09      	ldr	r2, [pc, #36]	; (800a7d4 <hci_register_io_bus+0x3c>)
 800a7ae:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	4a07      	ldr	r2, [pc, #28]	; (800a7d4 <hci_register_io_bus+0x3c>)
 800a7b6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	4a05      	ldr	r2, [pc, #20]	; (800a7d4 <hci_register_io_bus+0x3c>)
 800a7be:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4a03      	ldr	r2, [pc, #12]	; (800a7d4 <hci_register_io_bus+0x3c>)
 800a7c6:	6093      	str	r3, [r2, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	2000099c 	.word	0x2000099c

0800a7d8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08e      	sub	sp, #56	; 0x38
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	885b      	ldrh	r3, [r3, #2]
 800a7e8:	b21b      	sxth	r3, r3
 800a7ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7ee:	b21a      	sxth	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	029b      	lsls	r3, r3, #10
 800a7f6:	b21b      	sxth	r3, r3
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f97a 	bl	800ab00 <list_init_head>

  free_event_list();
 800a80c:	f7ff ff64 	bl	800a6d8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	8818      	ldrh	r0, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8859      	ldrh	r1, [r3, #2]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f7ff fefd 	bl	800a620 <send_cmd>
  
  if (async)
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <hci_send_req+0x58>
  {
    return 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	e0e5      	b.n	800a9fc <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a830:	f7f9 f886 	bl	8003940 <HAL_GetTick>
 800a834:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a836:	f7f9 f883 	bl	8003940 <HAL_GetTick>
 800a83a:	4602      	mov	r2, r0
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a844:	f200 80b6 	bhi.w	800a9b4 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a848:	486e      	ldr	r0, [pc, #440]	; (800aa04 <hci_send_req+0x22c>)
 800a84a:	f000 f969 	bl	800ab20 <list_is_empty>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d000      	beq.n	800a856 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a854:	e7ef      	b.n	800a836 <hci_send_req+0x5e>
      {
        break;
 800a856:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a858:	f107 0310 	add.w	r3, r7, #16
 800a85c:	4619      	mov	r1, r3
 800a85e:	4869      	ldr	r0, [pc, #420]	; (800aa04 <hci_send_req+0x22c>)
 800a860:	f000 f9ed 	bl	800ac3e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3308      	adds	r3, #8
 800a868:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d17b      	bne.n	800a96a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	3301      	adds	r3, #1
 800a876:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	3308      	adds	r3, #8
 800a87c:	3303      	adds	r3, #3
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a886:	3b03      	subs	r3, #3
 800a888:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	2b3e      	cmp	r3, #62	; 0x3e
 800a890:	d04d      	beq.n	800a92e <hci_send_req+0x156>
 800a892:	2b3e      	cmp	r3, #62	; 0x3e
 800a894:	dc6b      	bgt.n	800a96e <hci_send_req+0x196>
 800a896:	2b10      	cmp	r3, #16
 800a898:	f000 808e 	beq.w	800a9b8 <hci_send_req+0x1e0>
 800a89c:	2b10      	cmp	r3, #16
 800a89e:	dc66      	bgt.n	800a96e <hci_send_req+0x196>
 800a8a0:	2b0e      	cmp	r3, #14
 800a8a2:	d024      	beq.n	800a8ee <hci_send_req+0x116>
 800a8a4:	2b0f      	cmp	r3, #15
 800a8a6:	d162      	bne.n	800a96e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	885b      	ldrh	r3, [r3, #2]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	f040 8081 	bne.w	800a9bc <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b0f      	cmp	r3, #15
 800a8c0:	d004      	beq.n	800a8cc <hci_send_req+0xf4>
          if (cs->status) {
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d053      	beq.n	800a972 <hci_send_req+0x19a>
            goto failed;
 800a8ca:	e07a      	b.n	800a9c2 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	695a      	ldr	r2, [r3, #20]
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	bf28      	it	cs
 800a8d6:	461a      	movcs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6918      	ldr	r0, [r3, #16]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8e8:	f000 fc17 	bl	800b11a <memcpy>
        goto done;
 800a8ec:	e07a      	b.n	800a9e4 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f0:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d15f      	bne.n	800a9c0 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	3303      	adds	r3, #3
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	3b03      	subs	r3, #3
 800a90a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	429a      	cmp	r2, r3
 800a914:	bf28      	it	cs
 800a916:	461a      	movcs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6918      	ldr	r0, [r3, #16]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	461a      	mov	r2, r3
 800a926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a928:	f000 fbf7 	bl	800b11a <memcpy>
        goto done;
 800a92c:	e05a      	b.n	800a9e4 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d11a      	bne.n	800a976 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	3b01      	subs	r3, #1
 800a944:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	695a      	ldr	r2, [r3, #20]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	bf28      	it	cs
 800a950:	461a      	movcs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6918      	ldr	r0, [r3, #16]
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	1c59      	adds	r1, r3, #1
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	461a      	mov	r2, r3
 800a964:	f000 fbd9 	bl	800b11a <memcpy>
        goto done;
 800a968:	e03c      	b.n	800a9e4 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800a96a:	bf00      	nop
 800a96c:	e004      	b.n	800a978 <hci_send_req+0x1a0>
        break;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <hci_send_req+0x1a0>
          break;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <hci_send_req+0x1a0>
          break;
 800a976:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a978:	4823      	ldr	r0, [pc, #140]	; (800aa08 <hci_send_req+0x230>)
 800a97a:	f000 f8d1 	bl	800ab20 <list_is_empty>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00d      	beq.n	800a9a0 <hci_send_req+0x1c8>
 800a984:	481f      	ldr	r0, [pc, #124]	; (800aa04 <hci_send_req+0x22c>)
 800a986:	f000 f8cb 	bl	800ab20 <list_is_empty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d007      	beq.n	800a9a0 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4619      	mov	r1, r3
 800a994:	481c      	ldr	r0, [pc, #112]	; (800aa08 <hci_send_req+0x230>)
 800a996:	f000 f90b 	bl	800abb0 <list_insert_tail>
      hciReadPacket=NULL;
 800a99a:	2300      	movs	r3, #0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	e008      	b.n	800a9b2 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f901 	bl	800abb0 <list_insert_tail>
      hciReadPacket=NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	613b      	str	r3, [r7, #16]
  {
 800a9b2:	e73d      	b.n	800a830 <hci_send_req+0x58>
        goto failed;
 800a9b4:	bf00      	nop
 800a9b6:	e004      	b.n	800a9c2 <hci_send_req+0x1ea>
        goto failed;
 800a9b8:	bf00      	nop
 800a9ba:	e002      	b.n	800a9c2 <hci_send_req+0x1ea>
          goto failed;
 800a9bc:	bf00      	nop
 800a9be:	e000      	b.n	800a9c2 <hci_send_req+0x1ea>
          goto failed;
 800a9c0:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	480e      	ldr	r0, [pc, #56]	; (800aa08 <hci_send_req+0x230>)
 800a9ce:	f000 f8c9 	bl	800ab64 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	480a      	ldr	r0, [pc, #40]	; (800aa04 <hci_send_req+0x22c>)
 800a9da:	f7ff fe61 	bl	800a6a0 <move_list>

  return -1;
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e2:	e00b      	b.n	800a9fc <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4807      	ldr	r0, [pc, #28]	; (800aa08 <hci_send_req+0x230>)
 800a9ea:	f000 f8bb 	bl	800ab64 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4803      	ldr	r0, [pc, #12]	; (800aa04 <hci_send_req+0x22c>)
 800a9f6:	f7ff fe53 	bl	800a6a0 <move_list>

  return 0;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3738      	adds	r7, #56	; 0x38
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200006d8 	.word	0x200006d8
 800aa08:	200006d0 	.word	0x200006d0

0800aa0c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800aa16:	e013      	b.n	800aa40 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800aa18:	1d3b      	adds	r3, r7, #4
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	480e      	ldr	r0, [pc, #56]	; (800aa58 <hci_user_evt_proc+0x4c>)
 800aa1e:	f000 f90e 	bl	800ac3e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800aa22:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <hci_user_evt_proc+0x50>)
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d005      	beq.n	800aa36 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <hci_user_evt_proc+0x50>)
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	3208      	adds	r2, #8
 800aa32:	4610      	mov	r0, r2
 800aa34:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4809      	ldr	r0, [pc, #36]	; (800aa60 <hci_user_evt_proc+0x54>)
 800aa3c:	f000 f8b8 	bl	800abb0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <hci_user_evt_proc+0x4c>)
 800aa42:	f000 f86d 	bl	800ab20 <list_is_empty>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0e5      	beq.n	800aa18 <hci_user_evt_proc+0xc>
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	200006d8 	.word	0x200006d8
 800aa5c:	2000099c 	.word	0x2000099c
 800aa60:	200006d0 	.word	0x200006d0

0800aa64 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800aa74:	481f      	ldr	r0, [pc, #124]	; (800aaf4 <hci_notify_asynch_evt+0x90>)
 800aa76:	f000 f853 	bl	800ab20 <list_is_empty>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d132      	bne.n	800aae6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800aa80:	f107 030c 	add.w	r3, r7, #12
 800aa84:	4619      	mov	r1, r3
 800aa86:	481b      	ldr	r0, [pc, #108]	; (800aaf4 <hci_notify_asynch_evt+0x90>)
 800aa88:	f000 f8d9 	bl	800ac3e <list_remove_head>
    
    if (hciContext.io.Receive)
 800aa8c:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <hci_notify_asynch_evt+0x94>)
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d02a      	beq.n	800aaea <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800aa94:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <hci_notify_asynch_evt+0x94>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	3208      	adds	r2, #8
 800aa9c:	2180      	movs	r1, #128	; 0x80
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800aaa6:	7cfb      	ldrb	r3, [r7, #19]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d016      	beq.n	800aada <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	7cfa      	ldrb	r2, [r7, #19]
 800aab0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff fd91 	bl	800a5de <verify_packet>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4619      	mov	r1, r3
 800aac6:	480d      	ldr	r0, [pc, #52]	; (800aafc <hci_notify_asynch_evt+0x98>)
 800aac8:	f000 f872 	bl	800abb0 <list_insert_tail>
 800aacc:	e00d      	b.n	800aaea <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4619      	mov	r1, r3
 800aad2:	4808      	ldr	r0, [pc, #32]	; (800aaf4 <hci_notify_asynch_evt+0x90>)
 800aad4:	f000 f846 	bl	800ab64 <list_insert_head>
 800aad8:	e007      	b.n	800aaea <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4619      	mov	r1, r3
 800aade:	4805      	ldr	r0, [pc, #20]	; (800aaf4 <hci_notify_asynch_evt+0x90>)
 800aae0:	f000 f840 	bl	800ab64 <list_insert_head>
 800aae4:	e001      	b.n	800aaea <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800aae6:	2301      	movs	r3, #1
 800aae8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800aaea:	697b      	ldr	r3, [r7, #20]

}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3718      	adds	r7, #24
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	200006d0 	.word	0x200006d0
 800aaf8:	2000099c 	.word	0x2000099c
 800aafc:	200006d8 	.word	0x200006d8

0800ab00 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	605a      	str	r2, [r3, #4]
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab28:	f3ef 8310 	mrs	r3, PRIMASK
 800ab2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab32:	b672      	cpsid	i
}
 800ab34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d102      	bne.n	800ab46 <list_is_empty+0x26>
  {
    return_value = 1;
 800ab40:	2301      	movs	r3, #1
 800ab42:	75fb      	strb	r3, [r7, #23]
 800ab44:	e001      	b.n	800ab4a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	f383 8810 	msr	PRIMASK, r3
}
 800ab54:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ab72:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab74:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab78:	b672      	cpsid	i
}
 800ab7a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	605a      	str	r2, [r3, #4]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f383 8810 	msr	PRIMASK, r3
}
 800aba2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800aba4:	bf00      	nop
 800aba6:	371c      	adds	r7, #28
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abba:	f3ef 8310 	mrs	r3, PRIMASK
 800abbe:	60fb      	str	r3, [r7, #12]
  return(result);
 800abc0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abc4:	b672      	cpsid	i
}
 800abc6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f383 8810 	msr	PRIMASK, r3
}
 800abee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac04:	f3ef 8310 	mrs	r3, PRIMASK
 800ac08:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac0e:	b672      	cpsid	i
}
 800ac10:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6852      	ldr	r2, [r2, #4]
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	f383 8810 	msr	PRIMASK, r3
}
 800ac30:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac48:	f3ef 8310 	mrs	r3, PRIMASK
 800ac4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac52:	b672      	cpsid	i
}
 800ac54:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff ffca 	bl	800abfc <list_remove_node>
  (*node)->next = NULL;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2200      	movs	r2, #0
 800ac76:	605a      	str	r2, [r3, #4]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	f383 8810 	msr	PRIMASK, r3
}
 800ac82:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800ac84:	bf00      	nop
 800ac86:	3718      	adds	r7, #24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac96:	f3ef 8310 	mrs	r3, PRIMASK
 800ac9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aca0:	b672      	cpsid	i
}
 800aca2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff ffa3 	bl	800abfc <list_remove_node>
  (*node)->next = NULL;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2200      	movs	r2, #0
 800acc4:	605a      	str	r2, [r3, #4]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f383 8810 	msr	PRIMASK, r3
}
 800acd0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800acd2:	bf00      	nop
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800acda:	b480      	push	{r7}
 800acdc:	b089      	sub	sp, #36	; 0x24
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  int size = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ace6:	f3ef 8310 	mrs	r3, PRIMASK
 800acea:	613b      	str	r3, [r7, #16]
  return(result);
 800acec:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800acee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acf0:	b672      	cpsid	i
}
 800acf2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800acfa:	e005      	b.n	800ad08 <list_get_size+0x2e>
  {
    size++;
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	3301      	adds	r3, #1
 800ad00:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800ad08:	69ba      	ldr	r2, [r7, #24]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d1f5      	bne.n	800acfc <list_get_size+0x22>
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f383 8810 	msr	PRIMASK, r3
}
 800ad1a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800ad1c:	69fb      	ldr	r3, [r7, #28]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3724      	adds	r7, #36	; 0x24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
	...

0800ad2c <__errno>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <__errno+0x8>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000010 	.word	0x20000010

0800ad38 <__sflush_r>:
 800ad38:	898a      	ldrh	r2, [r1, #12]
 800ad3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3e:	4605      	mov	r5, r0
 800ad40:	0710      	lsls	r0, r2, #28
 800ad42:	460c      	mov	r4, r1
 800ad44:	d458      	bmi.n	800adf8 <__sflush_r+0xc0>
 800ad46:	684b      	ldr	r3, [r1, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dc05      	bgt.n	800ad58 <__sflush_r+0x20>
 800ad4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	dc02      	bgt.n	800ad58 <__sflush_r+0x20>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad5a:	2e00      	cmp	r6, #0
 800ad5c:	d0f9      	beq.n	800ad52 <__sflush_r+0x1a>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad64:	682f      	ldr	r7, [r5, #0]
 800ad66:	602b      	str	r3, [r5, #0]
 800ad68:	d032      	beq.n	800add0 <__sflush_r+0x98>
 800ad6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	075a      	lsls	r2, r3, #29
 800ad70:	d505      	bpl.n	800ad7e <__sflush_r+0x46>
 800ad72:	6863      	ldr	r3, [r4, #4]
 800ad74:	1ac0      	subs	r0, r0, r3
 800ad76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad78:	b10b      	cbz	r3, 800ad7e <__sflush_r+0x46>
 800ad7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad7c:	1ac0      	subs	r0, r0, r3
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4602      	mov	r2, r0
 800ad82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad84:	6a21      	ldr	r1, [r4, #32]
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b0      	blx	r6
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	89a3      	ldrh	r3, [r4, #12]
 800ad8e:	d106      	bne.n	800ad9e <__sflush_r+0x66>
 800ad90:	6829      	ldr	r1, [r5, #0]
 800ad92:	291d      	cmp	r1, #29
 800ad94:	d82c      	bhi.n	800adf0 <__sflush_r+0xb8>
 800ad96:	4a2a      	ldr	r2, [pc, #168]	; (800ae40 <__sflush_r+0x108>)
 800ad98:	40ca      	lsrs	r2, r1
 800ad9a:	07d6      	lsls	r6, r2, #31
 800ad9c:	d528      	bpl.n	800adf0 <__sflush_r+0xb8>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	6062      	str	r2, [r4, #4]
 800ada2:	04d9      	lsls	r1, r3, #19
 800ada4:	6922      	ldr	r2, [r4, #16]
 800ada6:	6022      	str	r2, [r4, #0]
 800ada8:	d504      	bpl.n	800adb4 <__sflush_r+0x7c>
 800adaa:	1c42      	adds	r2, r0, #1
 800adac:	d101      	bne.n	800adb2 <__sflush_r+0x7a>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	b903      	cbnz	r3, 800adb4 <__sflush_r+0x7c>
 800adb2:	6560      	str	r0, [r4, #84]	; 0x54
 800adb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb6:	602f      	str	r7, [r5, #0]
 800adb8:	2900      	cmp	r1, #0
 800adba:	d0ca      	beq.n	800ad52 <__sflush_r+0x1a>
 800adbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d002      	beq.n	800adca <__sflush_r+0x92>
 800adc4:	4628      	mov	r0, r5
 800adc6:	f000 f9bf 	bl	800b148 <_free_r>
 800adca:	2000      	movs	r0, #0
 800adcc:	6360      	str	r0, [r4, #52]	; 0x34
 800adce:	e7c1      	b.n	800ad54 <__sflush_r+0x1c>
 800add0:	6a21      	ldr	r1, [r4, #32]
 800add2:	2301      	movs	r3, #1
 800add4:	4628      	mov	r0, r5
 800add6:	47b0      	blx	r6
 800add8:	1c41      	adds	r1, r0, #1
 800adda:	d1c7      	bne.n	800ad6c <__sflush_r+0x34>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0c4      	beq.n	800ad6c <__sflush_r+0x34>
 800ade2:	2b1d      	cmp	r3, #29
 800ade4:	d001      	beq.n	800adea <__sflush_r+0xb2>
 800ade6:	2b16      	cmp	r3, #22
 800ade8:	d101      	bne.n	800adee <__sflush_r+0xb6>
 800adea:	602f      	str	r7, [r5, #0]
 800adec:	e7b1      	b.n	800ad52 <__sflush_r+0x1a>
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	e7ad      	b.n	800ad54 <__sflush_r+0x1c>
 800adf8:	690f      	ldr	r7, [r1, #16]
 800adfa:	2f00      	cmp	r7, #0
 800adfc:	d0a9      	beq.n	800ad52 <__sflush_r+0x1a>
 800adfe:	0793      	lsls	r3, r2, #30
 800ae00:	680e      	ldr	r6, [r1, #0]
 800ae02:	bf08      	it	eq
 800ae04:	694b      	ldreq	r3, [r1, #20]
 800ae06:	600f      	str	r7, [r1, #0]
 800ae08:	bf18      	it	ne
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	eba6 0807 	sub.w	r8, r6, r7
 800ae10:	608b      	str	r3, [r1, #8]
 800ae12:	f1b8 0f00 	cmp.w	r8, #0
 800ae16:	dd9c      	ble.n	800ad52 <__sflush_r+0x1a>
 800ae18:	6a21      	ldr	r1, [r4, #32]
 800ae1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae1c:	4643      	mov	r3, r8
 800ae1e:	463a      	mov	r2, r7
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b0      	blx	r6
 800ae24:	2800      	cmp	r0, #0
 800ae26:	dc06      	bgt.n	800ae36 <__sflush_r+0xfe>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e78e      	b.n	800ad54 <__sflush_r+0x1c>
 800ae36:	4407      	add	r7, r0
 800ae38:	eba8 0800 	sub.w	r8, r8, r0
 800ae3c:	e7e9      	b.n	800ae12 <__sflush_r+0xda>
 800ae3e:	bf00      	nop
 800ae40:	20400001 	.word	0x20400001

0800ae44 <_fflush_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	690b      	ldr	r3, [r1, #16]
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	b913      	cbnz	r3, 800ae54 <_fflush_r+0x10>
 800ae4e:	2500      	movs	r5, #0
 800ae50:	4628      	mov	r0, r5
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	b118      	cbz	r0, 800ae5e <_fflush_r+0x1a>
 800ae56:	6983      	ldr	r3, [r0, #24]
 800ae58:	b90b      	cbnz	r3, 800ae5e <_fflush_r+0x1a>
 800ae5a:	f000 f899 	bl	800af90 <__sinit>
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <_fflush_r+0x6c>)
 800ae60:	429c      	cmp	r4, r3
 800ae62:	d11b      	bne.n	800ae9c <_fflush_r+0x58>
 800ae64:	686c      	ldr	r4, [r5, #4]
 800ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0ef      	beq.n	800ae4e <_fflush_r+0xa>
 800ae6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae70:	07d0      	lsls	r0, r2, #31
 800ae72:	d404      	bmi.n	800ae7e <_fflush_r+0x3a>
 800ae74:	0599      	lsls	r1, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_fflush_r+0x3a>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f000 f94c 	bl	800b116 <__retarget_lock_acquire_recursive>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	4621      	mov	r1, r4
 800ae82:	f7ff ff59 	bl	800ad38 <__sflush_r>
 800ae86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae88:	07da      	lsls	r2, r3, #31
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	d4e0      	bmi.n	800ae50 <_fflush_r+0xc>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d4dd      	bmi.n	800ae50 <_fflush_r+0xc>
 800ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae96:	f000 f93f 	bl	800b118 <__retarget_lock_release_recursive>
 800ae9a:	e7d9      	b.n	800ae50 <_fflush_r+0xc>
 800ae9c:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <_fflush_r+0x70>)
 800ae9e:	429c      	cmp	r4, r3
 800aea0:	d101      	bne.n	800aea6 <_fflush_r+0x62>
 800aea2:	68ac      	ldr	r4, [r5, #8]
 800aea4:	e7df      	b.n	800ae66 <_fflush_r+0x22>
 800aea6:	4b04      	ldr	r3, [pc, #16]	; (800aeb8 <_fflush_r+0x74>)
 800aea8:	429c      	cmp	r4, r3
 800aeaa:	bf08      	it	eq
 800aeac:	68ec      	ldreq	r4, [r5, #12]
 800aeae:	e7da      	b.n	800ae66 <_fflush_r+0x22>
 800aeb0:	0800c168 	.word	0x0800c168
 800aeb4:	0800c188 	.word	0x0800c188
 800aeb8:	0800c148 	.word	0x0800c148

0800aebc <fflush>:
 800aebc:	4601      	mov	r1, r0
 800aebe:	b920      	cbnz	r0, 800aeca <fflush+0xe>
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <fflush+0x18>)
 800aec2:	4905      	ldr	r1, [pc, #20]	; (800aed8 <fflush+0x1c>)
 800aec4:	6818      	ldr	r0, [r3, #0]
 800aec6:	f000 b8e1 	b.w	800b08c <_fwalk_reent>
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <fflush+0x20>)
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f7ff bfb9 	b.w	800ae44 <_fflush_r>
 800aed2:	bf00      	nop
 800aed4:	0800c1a8 	.word	0x0800c1a8
 800aed8:	0800ae45 	.word	0x0800ae45
 800aedc:	20000010 	.word	0x20000010

0800aee0 <std>:
 800aee0:	2300      	movs	r3, #0
 800aee2:	b510      	push	{r4, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeee:	6083      	str	r3, [r0, #8]
 800aef0:	8181      	strh	r1, [r0, #12]
 800aef2:	6643      	str	r3, [r0, #100]	; 0x64
 800aef4:	81c2      	strh	r2, [r0, #14]
 800aef6:	6183      	str	r3, [r0, #24]
 800aef8:	4619      	mov	r1, r3
 800aefa:	2208      	movs	r2, #8
 800aefc:	305c      	adds	r0, #92	; 0x5c
 800aefe:	f000 f91a 	bl	800b136 <memset>
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <std+0x38>)
 800af04:	6263      	str	r3, [r4, #36]	; 0x24
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <std+0x3c>)
 800af08:	62a3      	str	r3, [r4, #40]	; 0x28
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x40>)
 800af0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x44>)
 800af10:	6224      	str	r4, [r4, #32]
 800af12:	6323      	str	r3, [r4, #48]	; 0x30
 800af14:	bd10      	pop	{r4, pc}
 800af16:	bf00      	nop
 800af18:	0800b471 	.word	0x0800b471
 800af1c:	0800b493 	.word	0x0800b493
 800af20:	0800b4cb 	.word	0x0800b4cb
 800af24:	0800b4ef 	.word	0x0800b4ef

0800af28 <_cleanup_r>:
 800af28:	4901      	ldr	r1, [pc, #4]	; (800af30 <_cleanup_r+0x8>)
 800af2a:	f000 b8af 	b.w	800b08c <_fwalk_reent>
 800af2e:	bf00      	nop
 800af30:	0800ae45 	.word	0x0800ae45

0800af34 <__sfmoreglue>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	2268      	movs	r2, #104	; 0x68
 800af38:	1e4d      	subs	r5, r1, #1
 800af3a:	4355      	muls	r5, r2
 800af3c:	460e      	mov	r6, r1
 800af3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af42:	f000 f96d 	bl	800b220 <_malloc_r>
 800af46:	4604      	mov	r4, r0
 800af48:	b140      	cbz	r0, 800af5c <__sfmoreglue+0x28>
 800af4a:	2100      	movs	r1, #0
 800af4c:	e9c0 1600 	strd	r1, r6, [r0]
 800af50:	300c      	adds	r0, #12
 800af52:	60a0      	str	r0, [r4, #8]
 800af54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af58:	f000 f8ed 	bl	800b136 <memset>
 800af5c:	4620      	mov	r0, r4
 800af5e:	bd70      	pop	{r4, r5, r6, pc}

0800af60 <__sfp_lock_acquire>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__sfp_lock_acquire+0x8>)
 800af62:	f000 b8d8 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800af66:	bf00      	nop
 800af68:	200009bd 	.word	0x200009bd

0800af6c <__sfp_lock_release>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__sfp_lock_release+0x8>)
 800af6e:	f000 b8d3 	b.w	800b118 <__retarget_lock_release_recursive>
 800af72:	bf00      	nop
 800af74:	200009bd 	.word	0x200009bd

0800af78 <__sinit_lock_acquire>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__sinit_lock_acquire+0x8>)
 800af7a:	f000 b8cc 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800af7e:	bf00      	nop
 800af80:	200009be 	.word	0x200009be

0800af84 <__sinit_lock_release>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__sinit_lock_release+0x8>)
 800af86:	f000 b8c7 	b.w	800b118 <__retarget_lock_release_recursive>
 800af8a:	bf00      	nop
 800af8c:	200009be 	.word	0x200009be

0800af90 <__sinit>:
 800af90:	b510      	push	{r4, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	f7ff fff0 	bl	800af78 <__sinit_lock_acquire>
 800af98:	69a3      	ldr	r3, [r4, #24]
 800af9a:	b11b      	cbz	r3, 800afa4 <__sinit+0x14>
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f7ff bff0 	b.w	800af84 <__sinit_lock_release>
 800afa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afa8:	6523      	str	r3, [r4, #80]	; 0x50
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <__sinit+0x68>)
 800afac:	4a13      	ldr	r2, [pc, #76]	; (800affc <__sinit+0x6c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	bf04      	itt	eq
 800afb6:	2301      	moveq	r3, #1
 800afb8:	61a3      	streq	r3, [r4, #24]
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 f820 	bl	800b000 <__sfp>
 800afc0:	6060      	str	r0, [r4, #4]
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f81c 	bl	800b000 <__sfp>
 800afc8:	60a0      	str	r0, [r4, #8]
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f818 	bl	800b000 <__sfp>
 800afd0:	2200      	movs	r2, #0
 800afd2:	60e0      	str	r0, [r4, #12]
 800afd4:	2104      	movs	r1, #4
 800afd6:	6860      	ldr	r0, [r4, #4]
 800afd8:	f7ff ff82 	bl	800aee0 <std>
 800afdc:	68a0      	ldr	r0, [r4, #8]
 800afde:	2201      	movs	r2, #1
 800afe0:	2109      	movs	r1, #9
 800afe2:	f7ff ff7d 	bl	800aee0 <std>
 800afe6:	68e0      	ldr	r0, [r4, #12]
 800afe8:	2202      	movs	r2, #2
 800afea:	2112      	movs	r1, #18
 800afec:	f7ff ff78 	bl	800aee0 <std>
 800aff0:	2301      	movs	r3, #1
 800aff2:	61a3      	str	r3, [r4, #24]
 800aff4:	e7d2      	b.n	800af9c <__sinit+0xc>
 800aff6:	bf00      	nop
 800aff8:	0800c1a8 	.word	0x0800c1a8
 800affc:	0800af29 	.word	0x0800af29

0800b000 <__sfp>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	4607      	mov	r7, r0
 800b004:	f7ff ffac 	bl	800af60 <__sfp_lock_acquire>
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <__sfp+0x84>)
 800b00a:	681e      	ldr	r6, [r3, #0]
 800b00c:	69b3      	ldr	r3, [r6, #24]
 800b00e:	b913      	cbnz	r3, 800b016 <__sfp+0x16>
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbd 	bl	800af90 <__sinit>
 800b016:	3648      	adds	r6, #72	; 0x48
 800b018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	d503      	bpl.n	800b028 <__sfp+0x28>
 800b020:	6833      	ldr	r3, [r6, #0]
 800b022:	b30b      	cbz	r3, 800b068 <__sfp+0x68>
 800b024:	6836      	ldr	r6, [r6, #0]
 800b026:	e7f7      	b.n	800b018 <__sfp+0x18>
 800b028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b02c:	b9d5      	cbnz	r5, 800b064 <__sfp+0x64>
 800b02e:	4b16      	ldr	r3, [pc, #88]	; (800b088 <__sfp+0x88>)
 800b030:	60e3      	str	r3, [r4, #12]
 800b032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b036:	6665      	str	r5, [r4, #100]	; 0x64
 800b038:	f000 f86c 	bl	800b114 <__retarget_lock_init_recursive>
 800b03c:	f7ff ff96 	bl	800af6c <__sfp_lock_release>
 800b040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b048:	6025      	str	r5, [r4, #0]
 800b04a:	61a5      	str	r5, [r4, #24]
 800b04c:	2208      	movs	r2, #8
 800b04e:	4629      	mov	r1, r5
 800b050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b054:	f000 f86f 	bl	800b136 <memset>
 800b058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b05c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b060:	4620      	mov	r0, r4
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b064:	3468      	adds	r4, #104	; 0x68
 800b066:	e7d9      	b.n	800b01c <__sfp+0x1c>
 800b068:	2104      	movs	r1, #4
 800b06a:	4638      	mov	r0, r7
 800b06c:	f7ff ff62 	bl	800af34 <__sfmoreglue>
 800b070:	4604      	mov	r4, r0
 800b072:	6030      	str	r0, [r6, #0]
 800b074:	2800      	cmp	r0, #0
 800b076:	d1d5      	bne.n	800b024 <__sfp+0x24>
 800b078:	f7ff ff78 	bl	800af6c <__sfp_lock_release>
 800b07c:	230c      	movs	r3, #12
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	e7ee      	b.n	800b060 <__sfp+0x60>
 800b082:	bf00      	nop
 800b084:	0800c1a8 	.word	0x0800c1a8
 800b088:	ffff0001 	.word	0xffff0001

0800b08c <_fwalk_reent>:
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	4606      	mov	r6, r0
 800b092:	4688      	mov	r8, r1
 800b094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b098:	2700      	movs	r7, #0
 800b09a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b09e:	f1b9 0901 	subs.w	r9, r9, #1
 800b0a2:	d505      	bpl.n	800b0b0 <_fwalk_reent+0x24>
 800b0a4:	6824      	ldr	r4, [r4, #0]
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d1f7      	bne.n	800b09a <_fwalk_reent+0xe>
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b0:	89ab      	ldrh	r3, [r5, #12]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d907      	bls.n	800b0c6 <_fwalk_reent+0x3a>
 800b0b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	d003      	beq.n	800b0c6 <_fwalk_reent+0x3a>
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	47c0      	blx	r8
 800b0c4:	4307      	orrs	r7, r0
 800b0c6:	3568      	adds	r5, #104	; 0x68
 800b0c8:	e7e9      	b.n	800b09e <_fwalk_reent+0x12>
	...

0800b0cc <__libc_init_array>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	4d0d      	ldr	r5, [pc, #52]	; (800b104 <__libc_init_array+0x38>)
 800b0d0:	4c0d      	ldr	r4, [pc, #52]	; (800b108 <__libc_init_array+0x3c>)
 800b0d2:	1b64      	subs	r4, r4, r5
 800b0d4:	10a4      	asrs	r4, r4, #2
 800b0d6:	2600      	movs	r6, #0
 800b0d8:	42a6      	cmp	r6, r4
 800b0da:	d109      	bne.n	800b0f0 <__libc_init_array+0x24>
 800b0dc:	4d0b      	ldr	r5, [pc, #44]	; (800b10c <__libc_init_array+0x40>)
 800b0de:	4c0c      	ldr	r4, [pc, #48]	; (800b110 <__libc_init_array+0x44>)
 800b0e0:	f000 feda 	bl	800be98 <_init>
 800b0e4:	1b64      	subs	r4, r4, r5
 800b0e6:	10a4      	asrs	r4, r4, #2
 800b0e8:	2600      	movs	r6, #0
 800b0ea:	42a6      	cmp	r6, r4
 800b0ec:	d105      	bne.n	800b0fa <__libc_init_array+0x2e>
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f4:	4798      	blx	r3
 800b0f6:	3601      	adds	r6, #1
 800b0f8:	e7ee      	b.n	800b0d8 <__libc_init_array+0xc>
 800b0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0fe:	4798      	blx	r3
 800b100:	3601      	adds	r6, #1
 800b102:	e7f2      	b.n	800b0ea <__libc_init_array+0x1e>
 800b104:	0800c1e8 	.word	0x0800c1e8
 800b108:	0800c1e8 	.word	0x0800c1e8
 800b10c:	0800c1e8 	.word	0x0800c1e8
 800b110:	0800c1ec 	.word	0x0800c1ec

0800b114 <__retarget_lock_init_recursive>:
 800b114:	4770      	bx	lr

0800b116 <__retarget_lock_acquire_recursive>:
 800b116:	4770      	bx	lr

0800b118 <__retarget_lock_release_recursive>:
 800b118:	4770      	bx	lr

0800b11a <memcpy>:
 800b11a:	440a      	add	r2, r1
 800b11c:	4291      	cmp	r1, r2
 800b11e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b122:	d100      	bne.n	800b126 <memcpy+0xc>
 800b124:	4770      	bx	lr
 800b126:	b510      	push	{r4, lr}
 800b128:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b130:	4291      	cmp	r1, r2
 800b132:	d1f9      	bne.n	800b128 <memcpy+0xe>
 800b134:	bd10      	pop	{r4, pc}

0800b136 <memset>:
 800b136:	4402      	add	r2, r0
 800b138:	4603      	mov	r3, r0
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d100      	bne.n	800b140 <memset+0xa>
 800b13e:	4770      	bx	lr
 800b140:	f803 1b01 	strb.w	r1, [r3], #1
 800b144:	e7f9      	b.n	800b13a <memset+0x4>
	...

0800b148 <_free_r>:
 800b148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14a:	2900      	cmp	r1, #0
 800b14c:	d044      	beq.n	800b1d8 <_free_r+0x90>
 800b14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b152:	9001      	str	r0, [sp, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f1a1 0404 	sub.w	r4, r1, #4
 800b15a:	bfb8      	it	lt
 800b15c:	18e4      	addlt	r4, r4, r3
 800b15e:	f000 fb25 	bl	800b7ac <__malloc_lock>
 800b162:	4a1e      	ldr	r2, [pc, #120]	; (800b1dc <_free_r+0x94>)
 800b164:	9801      	ldr	r0, [sp, #4]
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	b933      	cbnz	r3, 800b178 <_free_r+0x30>
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	6014      	str	r4, [r2, #0]
 800b16e:	b003      	add	sp, #12
 800b170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b174:	f000 bb20 	b.w	800b7b8 <__malloc_unlock>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d908      	bls.n	800b18e <_free_r+0x46>
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	1961      	adds	r1, r4, r5
 800b180:	428b      	cmp	r3, r1
 800b182:	bf01      	itttt	eq
 800b184:	6819      	ldreq	r1, [r3, #0]
 800b186:	685b      	ldreq	r3, [r3, #4]
 800b188:	1949      	addeq	r1, r1, r5
 800b18a:	6021      	streq	r1, [r4, #0]
 800b18c:	e7ed      	b.n	800b16a <_free_r+0x22>
 800b18e:	461a      	mov	r2, r3
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	b10b      	cbz	r3, 800b198 <_free_r+0x50>
 800b194:	42a3      	cmp	r3, r4
 800b196:	d9fa      	bls.n	800b18e <_free_r+0x46>
 800b198:	6811      	ldr	r1, [r2, #0]
 800b19a:	1855      	adds	r5, r2, r1
 800b19c:	42a5      	cmp	r5, r4
 800b19e:	d10b      	bne.n	800b1b8 <_free_r+0x70>
 800b1a0:	6824      	ldr	r4, [r4, #0]
 800b1a2:	4421      	add	r1, r4
 800b1a4:	1854      	adds	r4, r2, r1
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	6011      	str	r1, [r2, #0]
 800b1aa:	d1e0      	bne.n	800b16e <_free_r+0x26>
 800b1ac:	681c      	ldr	r4, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	6053      	str	r3, [r2, #4]
 800b1b2:	4421      	add	r1, r4
 800b1b4:	6011      	str	r1, [r2, #0]
 800b1b6:	e7da      	b.n	800b16e <_free_r+0x26>
 800b1b8:	d902      	bls.n	800b1c0 <_free_r+0x78>
 800b1ba:	230c      	movs	r3, #12
 800b1bc:	6003      	str	r3, [r0, #0]
 800b1be:	e7d6      	b.n	800b16e <_free_r+0x26>
 800b1c0:	6825      	ldr	r5, [r4, #0]
 800b1c2:	1961      	adds	r1, r4, r5
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf04      	itt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	6063      	str	r3, [r4, #4]
 800b1ce:	bf04      	itt	eq
 800b1d0:	1949      	addeq	r1, r1, r5
 800b1d2:	6021      	streq	r1, [r4, #0]
 800b1d4:	6054      	str	r4, [r2, #4]
 800b1d6:	e7ca      	b.n	800b16e <_free_r+0x26>
 800b1d8:	b003      	add	sp, #12
 800b1da:	bd30      	pop	{r4, r5, pc}
 800b1dc:	200009c0 	.word	0x200009c0

0800b1e0 <sbrk_aligned>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4e0e      	ldr	r6, [pc, #56]	; (800b21c <sbrk_aligned+0x3c>)
 800b1e4:	460c      	mov	r4, r1
 800b1e6:	6831      	ldr	r1, [r6, #0]
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	b911      	cbnz	r1, 800b1f2 <sbrk_aligned+0x12>
 800b1ec:	f000 f930 	bl	800b450 <_sbrk_r>
 800b1f0:	6030      	str	r0, [r6, #0]
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f92b 	bl	800b450 <_sbrk_r>
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	d00a      	beq.n	800b214 <sbrk_aligned+0x34>
 800b1fe:	1cc4      	adds	r4, r0, #3
 800b200:	f024 0403 	bic.w	r4, r4, #3
 800b204:	42a0      	cmp	r0, r4
 800b206:	d007      	beq.n	800b218 <sbrk_aligned+0x38>
 800b208:	1a21      	subs	r1, r4, r0
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 f920 	bl	800b450 <_sbrk_r>
 800b210:	3001      	adds	r0, #1
 800b212:	d101      	bne.n	800b218 <sbrk_aligned+0x38>
 800b214:	f04f 34ff 	mov.w	r4, #4294967295
 800b218:	4620      	mov	r0, r4
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	200009c4 	.word	0x200009c4

0800b220 <_malloc_r>:
 800b220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b224:	1ccd      	adds	r5, r1, #3
 800b226:	f025 0503 	bic.w	r5, r5, #3
 800b22a:	3508      	adds	r5, #8
 800b22c:	2d0c      	cmp	r5, #12
 800b22e:	bf38      	it	cc
 800b230:	250c      	movcc	r5, #12
 800b232:	2d00      	cmp	r5, #0
 800b234:	4607      	mov	r7, r0
 800b236:	db01      	blt.n	800b23c <_malloc_r+0x1c>
 800b238:	42a9      	cmp	r1, r5
 800b23a:	d905      	bls.n	800b248 <_malloc_r+0x28>
 800b23c:	230c      	movs	r3, #12
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	2600      	movs	r6, #0
 800b242:	4630      	mov	r0, r6
 800b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b248:	4e2e      	ldr	r6, [pc, #184]	; (800b304 <_malloc_r+0xe4>)
 800b24a:	f000 faaf 	bl	800b7ac <__malloc_lock>
 800b24e:	6833      	ldr	r3, [r6, #0]
 800b250:	461c      	mov	r4, r3
 800b252:	bb34      	cbnz	r4, 800b2a2 <_malloc_r+0x82>
 800b254:	4629      	mov	r1, r5
 800b256:	4638      	mov	r0, r7
 800b258:	f7ff ffc2 	bl	800b1e0 <sbrk_aligned>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	4604      	mov	r4, r0
 800b260:	d14d      	bne.n	800b2fe <_malloc_r+0xde>
 800b262:	6834      	ldr	r4, [r6, #0]
 800b264:	4626      	mov	r6, r4
 800b266:	2e00      	cmp	r6, #0
 800b268:	d140      	bne.n	800b2ec <_malloc_r+0xcc>
 800b26a:	6823      	ldr	r3, [r4, #0]
 800b26c:	4631      	mov	r1, r6
 800b26e:	4638      	mov	r0, r7
 800b270:	eb04 0803 	add.w	r8, r4, r3
 800b274:	f000 f8ec 	bl	800b450 <_sbrk_r>
 800b278:	4580      	cmp	r8, r0
 800b27a:	d13a      	bne.n	800b2f2 <_malloc_r+0xd2>
 800b27c:	6821      	ldr	r1, [r4, #0]
 800b27e:	3503      	adds	r5, #3
 800b280:	1a6d      	subs	r5, r5, r1
 800b282:	f025 0503 	bic.w	r5, r5, #3
 800b286:	3508      	adds	r5, #8
 800b288:	2d0c      	cmp	r5, #12
 800b28a:	bf38      	it	cc
 800b28c:	250c      	movcc	r5, #12
 800b28e:	4629      	mov	r1, r5
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff ffa5 	bl	800b1e0 <sbrk_aligned>
 800b296:	3001      	adds	r0, #1
 800b298:	d02b      	beq.n	800b2f2 <_malloc_r+0xd2>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	442b      	add	r3, r5
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	e00e      	b.n	800b2c0 <_malloc_r+0xa0>
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	1b52      	subs	r2, r2, r5
 800b2a6:	d41e      	bmi.n	800b2e6 <_malloc_r+0xc6>
 800b2a8:	2a0b      	cmp	r2, #11
 800b2aa:	d916      	bls.n	800b2da <_malloc_r+0xba>
 800b2ac:	1961      	adds	r1, r4, r5
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	6025      	str	r5, [r4, #0]
 800b2b2:	bf18      	it	ne
 800b2b4:	6059      	strne	r1, [r3, #4]
 800b2b6:	6863      	ldr	r3, [r4, #4]
 800b2b8:	bf08      	it	eq
 800b2ba:	6031      	streq	r1, [r6, #0]
 800b2bc:	5162      	str	r2, [r4, r5]
 800b2be:	604b      	str	r3, [r1, #4]
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f104 060b 	add.w	r6, r4, #11
 800b2c6:	f000 fa77 	bl	800b7b8 <__malloc_unlock>
 800b2ca:	f026 0607 	bic.w	r6, r6, #7
 800b2ce:	1d23      	adds	r3, r4, #4
 800b2d0:	1af2      	subs	r2, r6, r3
 800b2d2:	d0b6      	beq.n	800b242 <_malloc_r+0x22>
 800b2d4:	1b9b      	subs	r3, r3, r6
 800b2d6:	50a3      	str	r3, [r4, r2]
 800b2d8:	e7b3      	b.n	800b242 <_malloc_r+0x22>
 800b2da:	6862      	ldr	r2, [r4, #4]
 800b2dc:	42a3      	cmp	r3, r4
 800b2de:	bf0c      	ite	eq
 800b2e0:	6032      	streq	r2, [r6, #0]
 800b2e2:	605a      	strne	r2, [r3, #4]
 800b2e4:	e7ec      	b.n	800b2c0 <_malloc_r+0xa0>
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	6864      	ldr	r4, [r4, #4]
 800b2ea:	e7b2      	b.n	800b252 <_malloc_r+0x32>
 800b2ec:	4634      	mov	r4, r6
 800b2ee:	6876      	ldr	r6, [r6, #4]
 800b2f0:	e7b9      	b.n	800b266 <_malloc_r+0x46>
 800b2f2:	230c      	movs	r3, #12
 800b2f4:	603b      	str	r3, [r7, #0]
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	f000 fa5e 	bl	800b7b8 <__malloc_unlock>
 800b2fc:	e7a1      	b.n	800b242 <_malloc_r+0x22>
 800b2fe:	6025      	str	r5, [r4, #0]
 800b300:	e7de      	b.n	800b2c0 <_malloc_r+0xa0>
 800b302:	bf00      	nop
 800b304:	200009c0 	.word	0x200009c0

0800b308 <iprintf>:
 800b308:	b40f      	push	{r0, r1, r2, r3}
 800b30a:	4b0a      	ldr	r3, [pc, #40]	; (800b334 <iprintf+0x2c>)
 800b30c:	b513      	push	{r0, r1, r4, lr}
 800b30e:	681c      	ldr	r4, [r3, #0]
 800b310:	b124      	cbz	r4, 800b31c <iprintf+0x14>
 800b312:	69a3      	ldr	r3, [r4, #24]
 800b314:	b913      	cbnz	r3, 800b31c <iprintf+0x14>
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff fe3a 	bl	800af90 <__sinit>
 800b31c:	ab05      	add	r3, sp, #20
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	68a1      	ldr	r1, [r4, #8]
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	4620      	mov	r0, r4
 800b326:	f000 fa77 	bl	800b818 <_vfiprintf_r>
 800b32a:	b002      	add	sp, #8
 800b32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b330:	b004      	add	sp, #16
 800b332:	4770      	bx	lr
 800b334:	20000010 	.word	0x20000010

0800b338 <putchar>:
 800b338:	4b09      	ldr	r3, [pc, #36]	; (800b360 <putchar+0x28>)
 800b33a:	b513      	push	{r0, r1, r4, lr}
 800b33c:	681c      	ldr	r4, [r3, #0]
 800b33e:	4601      	mov	r1, r0
 800b340:	b134      	cbz	r4, 800b350 <putchar+0x18>
 800b342:	69a3      	ldr	r3, [r4, #24]
 800b344:	b923      	cbnz	r3, 800b350 <putchar+0x18>
 800b346:	9001      	str	r0, [sp, #4]
 800b348:	4620      	mov	r0, r4
 800b34a:	f7ff fe21 	bl	800af90 <__sinit>
 800b34e:	9901      	ldr	r1, [sp, #4]
 800b350:	68a2      	ldr	r2, [r4, #8]
 800b352:	4620      	mov	r0, r4
 800b354:	b002      	add	sp, #8
 800b356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b35a:	f000 bd21 	b.w	800bda0 <_putc_r>
 800b35e:	bf00      	nop
 800b360:	20000010 	.word	0x20000010

0800b364 <_puts_r>:
 800b364:	b570      	push	{r4, r5, r6, lr}
 800b366:	460e      	mov	r6, r1
 800b368:	4605      	mov	r5, r0
 800b36a:	b118      	cbz	r0, 800b374 <_puts_r+0x10>
 800b36c:	6983      	ldr	r3, [r0, #24]
 800b36e:	b90b      	cbnz	r3, 800b374 <_puts_r+0x10>
 800b370:	f7ff fe0e 	bl	800af90 <__sinit>
 800b374:	69ab      	ldr	r3, [r5, #24]
 800b376:	68ac      	ldr	r4, [r5, #8]
 800b378:	b913      	cbnz	r3, 800b380 <_puts_r+0x1c>
 800b37a:	4628      	mov	r0, r5
 800b37c:	f7ff fe08 	bl	800af90 <__sinit>
 800b380:	4b2c      	ldr	r3, [pc, #176]	; (800b434 <_puts_r+0xd0>)
 800b382:	429c      	cmp	r4, r3
 800b384:	d120      	bne.n	800b3c8 <_puts_r+0x64>
 800b386:	686c      	ldr	r4, [r5, #4]
 800b388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b38a:	07db      	lsls	r3, r3, #31
 800b38c:	d405      	bmi.n	800b39a <_puts_r+0x36>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	0598      	lsls	r0, r3, #22
 800b392:	d402      	bmi.n	800b39a <_puts_r+0x36>
 800b394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b396:	f7ff febe 	bl	800b116 <__retarget_lock_acquire_recursive>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	0719      	lsls	r1, r3, #28
 800b39e:	d51d      	bpl.n	800b3dc <_puts_r+0x78>
 800b3a0:	6923      	ldr	r3, [r4, #16]
 800b3a2:	b1db      	cbz	r3, 800b3dc <_puts_r+0x78>
 800b3a4:	3e01      	subs	r6, #1
 800b3a6:	68a3      	ldr	r3, [r4, #8]
 800b3a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	60a3      	str	r3, [r4, #8]
 800b3b0:	bb39      	cbnz	r1, 800b402 <_puts_r+0x9e>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	da38      	bge.n	800b428 <_puts_r+0xc4>
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	210a      	movs	r1, #10
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f89c 	bl	800b4f8 <__swbuf_r>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d011      	beq.n	800b3e8 <_puts_r+0x84>
 800b3c4:	250a      	movs	r5, #10
 800b3c6:	e011      	b.n	800b3ec <_puts_r+0x88>
 800b3c8:	4b1b      	ldr	r3, [pc, #108]	; (800b438 <_puts_r+0xd4>)
 800b3ca:	429c      	cmp	r4, r3
 800b3cc:	d101      	bne.n	800b3d2 <_puts_r+0x6e>
 800b3ce:	68ac      	ldr	r4, [r5, #8]
 800b3d0:	e7da      	b.n	800b388 <_puts_r+0x24>
 800b3d2:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <_puts_r+0xd8>)
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	bf08      	it	eq
 800b3d8:	68ec      	ldreq	r4, [r5, #12]
 800b3da:	e7d5      	b.n	800b388 <_puts_r+0x24>
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 f8ee 	bl	800b5c0 <__swsetup_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d0dd      	beq.n	800b3a4 <_puts_r+0x40>
 800b3e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ee:	07da      	lsls	r2, r3, #31
 800b3f0:	d405      	bmi.n	800b3fe <_puts_r+0x9a>
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	059b      	lsls	r3, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_puts_r+0x9a>
 800b3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fa:	f7ff fe8d 	bl	800b118 <__retarget_lock_release_recursive>
 800b3fe:	4628      	mov	r0, r5
 800b400:	bd70      	pop	{r4, r5, r6, pc}
 800b402:	2b00      	cmp	r3, #0
 800b404:	da04      	bge.n	800b410 <_puts_r+0xac>
 800b406:	69a2      	ldr	r2, [r4, #24]
 800b408:	429a      	cmp	r2, r3
 800b40a:	dc06      	bgt.n	800b41a <_puts_r+0xb6>
 800b40c:	290a      	cmp	r1, #10
 800b40e:	d004      	beq.n	800b41a <_puts_r+0xb6>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	7019      	strb	r1, [r3, #0]
 800b418:	e7c5      	b.n	800b3a6 <_puts_r+0x42>
 800b41a:	4622      	mov	r2, r4
 800b41c:	4628      	mov	r0, r5
 800b41e:	f000 f86b 	bl	800b4f8 <__swbuf_r>
 800b422:	3001      	adds	r0, #1
 800b424:	d1bf      	bne.n	800b3a6 <_puts_r+0x42>
 800b426:	e7df      	b.n	800b3e8 <_puts_r+0x84>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	250a      	movs	r5, #10
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	6022      	str	r2, [r4, #0]
 800b430:	701d      	strb	r5, [r3, #0]
 800b432:	e7db      	b.n	800b3ec <_puts_r+0x88>
 800b434:	0800c168 	.word	0x0800c168
 800b438:	0800c188 	.word	0x0800c188
 800b43c:	0800c148 	.word	0x0800c148

0800b440 <puts>:
 800b440:	4b02      	ldr	r3, [pc, #8]	; (800b44c <puts+0xc>)
 800b442:	4601      	mov	r1, r0
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	f7ff bf8d 	b.w	800b364 <_puts_r>
 800b44a:	bf00      	nop
 800b44c:	20000010 	.word	0x20000010

0800b450 <_sbrk_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d06      	ldr	r5, [pc, #24]	; (800b46c <_sbrk_r+0x1c>)
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f6 ff68 	bl	8002330 <_sbrk>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_sbrk_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_sbrk_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	200009c8 	.word	0x200009c8

0800b470 <__sread>:
 800b470:	b510      	push	{r4, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b478:	f000 fcda 	bl	800be30 <_read_r>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	bfab      	itete	ge
 800b480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b482:	89a3      	ldrhlt	r3, [r4, #12]
 800b484:	181b      	addge	r3, r3, r0
 800b486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b48a:	bfac      	ite	ge
 800b48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48e:	81a3      	strhlt	r3, [r4, #12]
 800b490:	bd10      	pop	{r4, pc}

0800b492 <__swrite>:
 800b492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	461f      	mov	r7, r3
 800b498:	898b      	ldrh	r3, [r1, #12]
 800b49a:	05db      	lsls	r3, r3, #23
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	d505      	bpl.n	800b4b0 <__swrite+0x1e>
 800b4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f000 f906 	bl	800b6bc <_lseek_r>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	4632      	mov	r2, r6
 800b4be:	463b      	mov	r3, r7
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	f000 b869 	b.w	800b59c <_write_r>

0800b4ca <__sseek>:
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d2:	f000 f8f3 	bl	800b6bc <_lseek_r>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	bf15      	itete	ne
 800b4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e6:	81a3      	strheq	r3, [r4, #12]
 800b4e8:	bf18      	it	ne
 800b4ea:	81a3      	strhne	r3, [r4, #12]
 800b4ec:	bd10      	pop	{r4, pc}

0800b4ee <__sclose>:
 800b4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f2:	f000 b8d3 	b.w	800b69c <_close_r>
	...

0800b4f8 <__swbuf_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	460e      	mov	r6, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4605      	mov	r5, r0
 800b500:	b118      	cbz	r0, 800b50a <__swbuf_r+0x12>
 800b502:	6983      	ldr	r3, [r0, #24]
 800b504:	b90b      	cbnz	r3, 800b50a <__swbuf_r+0x12>
 800b506:	f7ff fd43 	bl	800af90 <__sinit>
 800b50a:	4b21      	ldr	r3, [pc, #132]	; (800b590 <__swbuf_r+0x98>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	d12b      	bne.n	800b568 <__swbuf_r+0x70>
 800b510:	686c      	ldr	r4, [r5, #4]
 800b512:	69a3      	ldr	r3, [r4, #24]
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	071a      	lsls	r2, r3, #28
 800b51a:	d52f      	bpl.n	800b57c <__swbuf_r+0x84>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	b36b      	cbz	r3, 800b57c <__swbuf_r+0x84>
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	1ac0      	subs	r0, r0, r3
 800b526:	6963      	ldr	r3, [r4, #20]
 800b528:	b2f6      	uxtb	r6, r6
 800b52a:	4283      	cmp	r3, r0
 800b52c:	4637      	mov	r7, r6
 800b52e:	dc04      	bgt.n	800b53a <__swbuf_r+0x42>
 800b530:	4621      	mov	r1, r4
 800b532:	4628      	mov	r0, r5
 800b534:	f7ff fc86 	bl	800ae44 <_fflush_r>
 800b538:	bb30      	cbnz	r0, 800b588 <__swbuf_r+0x90>
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	701e      	strb	r6, [r3, #0]
 800b548:	6963      	ldr	r3, [r4, #20]
 800b54a:	3001      	adds	r0, #1
 800b54c:	4283      	cmp	r3, r0
 800b54e:	d004      	beq.n	800b55a <__swbuf_r+0x62>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d506      	bpl.n	800b564 <__swbuf_r+0x6c>
 800b556:	2e0a      	cmp	r6, #10
 800b558:	d104      	bne.n	800b564 <__swbuf_r+0x6c>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7ff fc71 	bl	800ae44 <_fflush_r>
 800b562:	b988      	cbnz	r0, 800b588 <__swbuf_r+0x90>
 800b564:	4638      	mov	r0, r7
 800b566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <__swbuf_r+0x9c>)
 800b56a:	429c      	cmp	r4, r3
 800b56c:	d101      	bne.n	800b572 <__swbuf_r+0x7a>
 800b56e:	68ac      	ldr	r4, [r5, #8]
 800b570:	e7cf      	b.n	800b512 <__swbuf_r+0x1a>
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <__swbuf_r+0xa0>)
 800b574:	429c      	cmp	r4, r3
 800b576:	bf08      	it	eq
 800b578:	68ec      	ldreq	r4, [r5, #12]
 800b57a:	e7ca      	b.n	800b512 <__swbuf_r+0x1a>
 800b57c:	4621      	mov	r1, r4
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f81e 	bl	800b5c0 <__swsetup_r>
 800b584:	2800      	cmp	r0, #0
 800b586:	d0cb      	beq.n	800b520 <__swbuf_r+0x28>
 800b588:	f04f 37ff 	mov.w	r7, #4294967295
 800b58c:	e7ea      	b.n	800b564 <__swbuf_r+0x6c>
 800b58e:	bf00      	nop
 800b590:	0800c168 	.word	0x0800c168
 800b594:	0800c188 	.word	0x0800c188
 800b598:	0800c148 	.word	0x0800c148

0800b59c <_write_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d07      	ldr	r5, [pc, #28]	; (800b5bc <_write_r+0x20>)
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	602a      	str	r2, [r5, #0]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	f7f6 f8b0 	bl	8001710 <_write>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_write_r+0x1e>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_write_r+0x1e>
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	200009c8 	.word	0x200009c8

0800b5c0 <__swsetup_r>:
 800b5c0:	4b32      	ldr	r3, [pc, #200]	; (800b68c <__swsetup_r+0xcc>)
 800b5c2:	b570      	push	{r4, r5, r6, lr}
 800b5c4:	681d      	ldr	r5, [r3, #0]
 800b5c6:	4606      	mov	r6, r0
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	b125      	cbz	r5, 800b5d6 <__swsetup_r+0x16>
 800b5cc:	69ab      	ldr	r3, [r5, #24]
 800b5ce:	b913      	cbnz	r3, 800b5d6 <__swsetup_r+0x16>
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	f7ff fcdd 	bl	800af90 <__sinit>
 800b5d6:	4b2e      	ldr	r3, [pc, #184]	; (800b690 <__swsetup_r+0xd0>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d10f      	bne.n	800b5fc <__swsetup_r+0x3c>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5e4:	0719      	lsls	r1, r3, #28
 800b5e6:	d42c      	bmi.n	800b642 <__swsetup_r+0x82>
 800b5e8:	06dd      	lsls	r5, r3, #27
 800b5ea:	d411      	bmi.n	800b610 <__swsetup_r+0x50>
 800b5ec:	2309      	movs	r3, #9
 800b5ee:	6033      	str	r3, [r6, #0]
 800b5f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fa:	e03e      	b.n	800b67a <__swsetup_r+0xba>
 800b5fc:	4b25      	ldr	r3, [pc, #148]	; (800b694 <__swsetup_r+0xd4>)
 800b5fe:	429c      	cmp	r4, r3
 800b600:	d101      	bne.n	800b606 <__swsetup_r+0x46>
 800b602:	68ac      	ldr	r4, [r5, #8]
 800b604:	e7eb      	b.n	800b5de <__swsetup_r+0x1e>
 800b606:	4b24      	ldr	r3, [pc, #144]	; (800b698 <__swsetup_r+0xd8>)
 800b608:	429c      	cmp	r4, r3
 800b60a:	bf08      	it	eq
 800b60c:	68ec      	ldreq	r4, [r5, #12]
 800b60e:	e7e6      	b.n	800b5de <__swsetup_r+0x1e>
 800b610:	0758      	lsls	r0, r3, #29
 800b612:	d512      	bpl.n	800b63a <__swsetup_r+0x7a>
 800b614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b616:	b141      	cbz	r1, 800b62a <__swsetup_r+0x6a>
 800b618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b61c:	4299      	cmp	r1, r3
 800b61e:	d002      	beq.n	800b626 <__swsetup_r+0x66>
 800b620:	4630      	mov	r0, r6
 800b622:	f7ff fd91 	bl	800b148 <_free_r>
 800b626:	2300      	movs	r3, #0
 800b628:	6363      	str	r3, [r4, #52]	; 0x34
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	2300      	movs	r3, #0
 800b634:	6063      	str	r3, [r4, #4]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f043 0308 	orr.w	r3, r3, #8
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	6923      	ldr	r3, [r4, #16]
 800b644:	b94b      	cbnz	r3, 800b65a <__swsetup_r+0x9a>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b64c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b650:	d003      	beq.n	800b65a <__swsetup_r+0x9a>
 800b652:	4621      	mov	r1, r4
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f869 	bl	800b72c <__smakebuf_r>
 800b65a:	89a0      	ldrh	r0, [r4, #12]
 800b65c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b660:	f010 0301 	ands.w	r3, r0, #1
 800b664:	d00a      	beq.n	800b67c <__swsetup_r+0xbc>
 800b666:	2300      	movs	r3, #0
 800b668:	60a3      	str	r3, [r4, #8]
 800b66a:	6963      	ldr	r3, [r4, #20]
 800b66c:	425b      	negs	r3, r3
 800b66e:	61a3      	str	r3, [r4, #24]
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	b943      	cbnz	r3, 800b686 <__swsetup_r+0xc6>
 800b674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b678:	d1ba      	bne.n	800b5f0 <__swsetup_r+0x30>
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	0781      	lsls	r1, r0, #30
 800b67e:	bf58      	it	pl
 800b680:	6963      	ldrpl	r3, [r4, #20]
 800b682:	60a3      	str	r3, [r4, #8]
 800b684:	e7f4      	b.n	800b670 <__swsetup_r+0xb0>
 800b686:	2000      	movs	r0, #0
 800b688:	e7f7      	b.n	800b67a <__swsetup_r+0xba>
 800b68a:	bf00      	nop
 800b68c:	20000010 	.word	0x20000010
 800b690:	0800c168 	.word	0x0800c168
 800b694:	0800c188 	.word	0x0800c188
 800b698:	0800c148 	.word	0x0800c148

0800b69c <_close_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d06      	ldr	r5, [pc, #24]	; (800b6b8 <_close_r+0x1c>)
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	602b      	str	r3, [r5, #0]
 800b6a8:	f7f6 fe0d 	bl	80022c6 <_close>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_close_r+0x1a>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_close_r+0x1a>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	200009c8 	.word	0x200009c8

0800b6bc <_lseek_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d07      	ldr	r5, [pc, #28]	; (800b6dc <_lseek_r+0x20>)
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	4608      	mov	r0, r1
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	602a      	str	r2, [r5, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f7f6 fe22 	bl	8002314 <_lseek>
 800b6d0:	1c43      	adds	r3, r0, #1
 800b6d2:	d102      	bne.n	800b6da <_lseek_r+0x1e>
 800b6d4:	682b      	ldr	r3, [r5, #0]
 800b6d6:	b103      	cbz	r3, 800b6da <_lseek_r+0x1e>
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	bd38      	pop	{r3, r4, r5, pc}
 800b6dc:	200009c8 	.word	0x200009c8

0800b6e0 <__swhatbuf_r>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	460e      	mov	r6, r1
 800b6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	b096      	sub	sp, #88	; 0x58
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	461d      	mov	r5, r3
 800b6f0:	da08      	bge.n	800b704 <__swhatbuf_r+0x24>
 800b6f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	602a      	str	r2, [r5, #0]
 800b6fa:	061a      	lsls	r2, r3, #24
 800b6fc:	d410      	bmi.n	800b720 <__swhatbuf_r+0x40>
 800b6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b702:	e00e      	b.n	800b722 <__swhatbuf_r+0x42>
 800b704:	466a      	mov	r2, sp
 800b706:	f000 fba5 	bl	800be54 <_fstat_r>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dbf1      	blt.n	800b6f2 <__swhatbuf_r+0x12>
 800b70e:	9a01      	ldr	r2, [sp, #4]
 800b710:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b714:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b718:	425a      	negs	r2, r3
 800b71a:	415a      	adcs	r2, r3
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	e7ee      	b.n	800b6fe <__swhatbuf_r+0x1e>
 800b720:	2340      	movs	r3, #64	; 0x40
 800b722:	2000      	movs	r0, #0
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	b016      	add	sp, #88	; 0x58
 800b728:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b72c <__smakebuf_r>:
 800b72c:	898b      	ldrh	r3, [r1, #12]
 800b72e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b730:	079d      	lsls	r5, r3, #30
 800b732:	4606      	mov	r6, r0
 800b734:	460c      	mov	r4, r1
 800b736:	d507      	bpl.n	800b748 <__smakebuf_r+0x1c>
 800b738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	6123      	str	r3, [r4, #16]
 800b740:	2301      	movs	r3, #1
 800b742:	6163      	str	r3, [r4, #20]
 800b744:	b002      	add	sp, #8
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	ab01      	add	r3, sp, #4
 800b74a:	466a      	mov	r2, sp
 800b74c:	f7ff ffc8 	bl	800b6e0 <__swhatbuf_r>
 800b750:	9900      	ldr	r1, [sp, #0]
 800b752:	4605      	mov	r5, r0
 800b754:	4630      	mov	r0, r6
 800b756:	f7ff fd63 	bl	800b220 <_malloc_r>
 800b75a:	b948      	cbnz	r0, 800b770 <__smakebuf_r+0x44>
 800b75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b760:	059a      	lsls	r2, r3, #22
 800b762:	d4ef      	bmi.n	800b744 <__smakebuf_r+0x18>
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	f043 0302 	orr.w	r3, r3, #2
 800b76c:	81a3      	strh	r3, [r4, #12]
 800b76e:	e7e3      	b.n	800b738 <__smakebuf_r+0xc>
 800b770:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <__smakebuf_r+0x7c>)
 800b772:	62b3      	str	r3, [r6, #40]	; 0x28
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	6020      	str	r0, [r4, #0]
 800b778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b77c:	81a3      	strh	r3, [r4, #12]
 800b77e:	9b00      	ldr	r3, [sp, #0]
 800b780:	6163      	str	r3, [r4, #20]
 800b782:	9b01      	ldr	r3, [sp, #4]
 800b784:	6120      	str	r0, [r4, #16]
 800b786:	b15b      	cbz	r3, 800b7a0 <__smakebuf_r+0x74>
 800b788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b78c:	4630      	mov	r0, r6
 800b78e:	f000 fb73 	bl	800be78 <_isatty_r>
 800b792:	b128      	cbz	r0, 800b7a0 <__smakebuf_r+0x74>
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	f043 0301 	orr.w	r3, r3, #1
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	89a0      	ldrh	r0, [r4, #12]
 800b7a2:	4305      	orrs	r5, r0
 800b7a4:	81a5      	strh	r5, [r4, #12]
 800b7a6:	e7cd      	b.n	800b744 <__smakebuf_r+0x18>
 800b7a8:	0800af29 	.word	0x0800af29

0800b7ac <__malloc_lock>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <__malloc_lock+0x8>)
 800b7ae:	f7ff bcb2 	b.w	800b116 <__retarget_lock_acquire_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	200009bc 	.word	0x200009bc

0800b7b8 <__malloc_unlock>:
 800b7b8:	4801      	ldr	r0, [pc, #4]	; (800b7c0 <__malloc_unlock+0x8>)
 800b7ba:	f7ff bcad 	b.w	800b118 <__retarget_lock_release_recursive>
 800b7be:	bf00      	nop
 800b7c0:	200009bc 	.word	0x200009bc

0800b7c4 <__sfputc_r>:
 800b7c4:	6893      	ldr	r3, [r2, #8]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	b410      	push	{r4}
 800b7cc:	6093      	str	r3, [r2, #8]
 800b7ce:	da08      	bge.n	800b7e2 <__sfputc_r+0x1e>
 800b7d0:	6994      	ldr	r4, [r2, #24]
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	db01      	blt.n	800b7da <__sfputc_r+0x16>
 800b7d6:	290a      	cmp	r1, #10
 800b7d8:	d103      	bne.n	800b7e2 <__sfputc_r+0x1e>
 800b7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7de:	f7ff be8b 	b.w	800b4f8 <__swbuf_r>
 800b7e2:	6813      	ldr	r3, [r2, #0]
 800b7e4:	1c58      	adds	r0, r3, #1
 800b7e6:	6010      	str	r0, [r2, #0]
 800b7e8:	7019      	strb	r1, [r3, #0]
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <__sfputs_r>:
 800b7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	4614      	mov	r4, r2
 800b7fa:	18d5      	adds	r5, r2, r3
 800b7fc:	42ac      	cmp	r4, r5
 800b7fe:	d101      	bne.n	800b804 <__sfputs_r+0x12>
 800b800:	2000      	movs	r0, #0
 800b802:	e007      	b.n	800b814 <__sfputs_r+0x22>
 800b804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b808:	463a      	mov	r2, r7
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7ff ffda 	bl	800b7c4 <__sfputc_r>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d1f3      	bne.n	800b7fc <__sfputs_r+0xa>
 800b814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b818 <_vfiprintf_r>:
 800b818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	460d      	mov	r5, r1
 800b81e:	b09d      	sub	sp, #116	; 0x74
 800b820:	4614      	mov	r4, r2
 800b822:	4698      	mov	r8, r3
 800b824:	4606      	mov	r6, r0
 800b826:	b118      	cbz	r0, 800b830 <_vfiprintf_r+0x18>
 800b828:	6983      	ldr	r3, [r0, #24]
 800b82a:	b90b      	cbnz	r3, 800b830 <_vfiprintf_r+0x18>
 800b82c:	f7ff fbb0 	bl	800af90 <__sinit>
 800b830:	4b89      	ldr	r3, [pc, #548]	; (800ba58 <_vfiprintf_r+0x240>)
 800b832:	429d      	cmp	r5, r3
 800b834:	d11b      	bne.n	800b86e <_vfiprintf_r+0x56>
 800b836:	6875      	ldr	r5, [r6, #4]
 800b838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b83a:	07d9      	lsls	r1, r3, #31
 800b83c:	d405      	bmi.n	800b84a <_vfiprintf_r+0x32>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	059a      	lsls	r2, r3, #22
 800b842:	d402      	bmi.n	800b84a <_vfiprintf_r+0x32>
 800b844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b846:	f7ff fc66 	bl	800b116 <__retarget_lock_acquire_recursive>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	071b      	lsls	r3, r3, #28
 800b84e:	d501      	bpl.n	800b854 <_vfiprintf_r+0x3c>
 800b850:	692b      	ldr	r3, [r5, #16]
 800b852:	b9eb      	cbnz	r3, 800b890 <_vfiprintf_r+0x78>
 800b854:	4629      	mov	r1, r5
 800b856:	4630      	mov	r0, r6
 800b858:	f7ff feb2 	bl	800b5c0 <__swsetup_r>
 800b85c:	b1c0      	cbz	r0, 800b890 <_vfiprintf_r+0x78>
 800b85e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b860:	07dc      	lsls	r4, r3, #31
 800b862:	d50e      	bpl.n	800b882 <_vfiprintf_r+0x6a>
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	b01d      	add	sp, #116	; 0x74
 800b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86e:	4b7b      	ldr	r3, [pc, #492]	; (800ba5c <_vfiprintf_r+0x244>)
 800b870:	429d      	cmp	r5, r3
 800b872:	d101      	bne.n	800b878 <_vfiprintf_r+0x60>
 800b874:	68b5      	ldr	r5, [r6, #8]
 800b876:	e7df      	b.n	800b838 <_vfiprintf_r+0x20>
 800b878:	4b79      	ldr	r3, [pc, #484]	; (800ba60 <_vfiprintf_r+0x248>)
 800b87a:	429d      	cmp	r5, r3
 800b87c:	bf08      	it	eq
 800b87e:	68f5      	ldreq	r5, [r6, #12]
 800b880:	e7da      	b.n	800b838 <_vfiprintf_r+0x20>
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	0598      	lsls	r0, r3, #22
 800b886:	d4ed      	bmi.n	800b864 <_vfiprintf_r+0x4c>
 800b888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b88a:	f7ff fc45 	bl	800b118 <__retarget_lock_release_recursive>
 800b88e:	e7e9      	b.n	800b864 <_vfiprintf_r+0x4c>
 800b890:	2300      	movs	r3, #0
 800b892:	9309      	str	r3, [sp, #36]	; 0x24
 800b894:	2320      	movs	r3, #32
 800b896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b89a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b89e:	2330      	movs	r3, #48	; 0x30
 800b8a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba64 <_vfiprintf_r+0x24c>
 800b8a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8a8:	f04f 0901 	mov.w	r9, #1
 800b8ac:	4623      	mov	r3, r4
 800b8ae:	469a      	mov	sl, r3
 800b8b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8b4:	b10a      	cbz	r2, 800b8ba <_vfiprintf_r+0xa2>
 800b8b6:	2a25      	cmp	r2, #37	; 0x25
 800b8b8:	d1f9      	bne.n	800b8ae <_vfiprintf_r+0x96>
 800b8ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b8be:	d00b      	beq.n	800b8d8 <_vfiprintf_r+0xc0>
 800b8c0:	465b      	mov	r3, fp
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	f7ff ff93 	bl	800b7f2 <__sfputs_r>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	f000 80aa 	beq.w	800ba26 <_vfiprintf_r+0x20e>
 800b8d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8d4:	445a      	add	r2, fp
 800b8d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 80a2 	beq.w	800ba26 <_vfiprintf_r+0x20e>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ec:	f10a 0a01 	add.w	sl, sl, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	9307      	str	r3, [sp, #28]
 800b8f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b8fa:	4654      	mov	r4, sl
 800b8fc:	2205      	movs	r2, #5
 800b8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b902:	4858      	ldr	r0, [pc, #352]	; (800ba64 <_vfiprintf_r+0x24c>)
 800b904:	f7f4 fc7c 	bl	8000200 <memchr>
 800b908:	9a04      	ldr	r2, [sp, #16]
 800b90a:	b9d8      	cbnz	r0, 800b944 <_vfiprintf_r+0x12c>
 800b90c:	06d1      	lsls	r1, r2, #27
 800b90e:	bf44      	itt	mi
 800b910:	2320      	movmi	r3, #32
 800b912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b916:	0713      	lsls	r3, r2, #28
 800b918:	bf44      	itt	mi
 800b91a:	232b      	movmi	r3, #43	; 0x2b
 800b91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b920:	f89a 3000 	ldrb.w	r3, [sl]
 800b924:	2b2a      	cmp	r3, #42	; 0x2a
 800b926:	d015      	beq.n	800b954 <_vfiprintf_r+0x13c>
 800b928:	9a07      	ldr	r2, [sp, #28]
 800b92a:	4654      	mov	r4, sl
 800b92c:	2000      	movs	r0, #0
 800b92e:	f04f 0c0a 	mov.w	ip, #10
 800b932:	4621      	mov	r1, r4
 800b934:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b938:	3b30      	subs	r3, #48	; 0x30
 800b93a:	2b09      	cmp	r3, #9
 800b93c:	d94e      	bls.n	800b9dc <_vfiprintf_r+0x1c4>
 800b93e:	b1b0      	cbz	r0, 800b96e <_vfiprintf_r+0x156>
 800b940:	9207      	str	r2, [sp, #28]
 800b942:	e014      	b.n	800b96e <_vfiprintf_r+0x156>
 800b944:	eba0 0308 	sub.w	r3, r0, r8
 800b948:	fa09 f303 	lsl.w	r3, r9, r3
 800b94c:	4313      	orrs	r3, r2
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	46a2      	mov	sl, r4
 800b952:	e7d2      	b.n	800b8fa <_vfiprintf_r+0xe2>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	1d19      	adds	r1, r3, #4
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	9103      	str	r1, [sp, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	bfbb      	ittet	lt
 800b960:	425b      	neglt	r3, r3
 800b962:	f042 0202 	orrlt.w	r2, r2, #2
 800b966:	9307      	strge	r3, [sp, #28]
 800b968:	9307      	strlt	r3, [sp, #28]
 800b96a:	bfb8      	it	lt
 800b96c:	9204      	strlt	r2, [sp, #16]
 800b96e:	7823      	ldrb	r3, [r4, #0]
 800b970:	2b2e      	cmp	r3, #46	; 0x2e
 800b972:	d10c      	bne.n	800b98e <_vfiprintf_r+0x176>
 800b974:	7863      	ldrb	r3, [r4, #1]
 800b976:	2b2a      	cmp	r3, #42	; 0x2a
 800b978:	d135      	bne.n	800b9e6 <_vfiprintf_r+0x1ce>
 800b97a:	9b03      	ldr	r3, [sp, #12]
 800b97c:	1d1a      	adds	r2, r3, #4
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	9203      	str	r2, [sp, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	bfb8      	it	lt
 800b986:	f04f 33ff 	movlt.w	r3, #4294967295
 800b98a:	3402      	adds	r4, #2
 800b98c:	9305      	str	r3, [sp, #20]
 800b98e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba74 <_vfiprintf_r+0x25c>
 800b992:	7821      	ldrb	r1, [r4, #0]
 800b994:	2203      	movs	r2, #3
 800b996:	4650      	mov	r0, sl
 800b998:	f7f4 fc32 	bl	8000200 <memchr>
 800b99c:	b140      	cbz	r0, 800b9b0 <_vfiprintf_r+0x198>
 800b99e:	2340      	movs	r3, #64	; 0x40
 800b9a0:	eba0 000a 	sub.w	r0, r0, sl
 800b9a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b9a8:	9b04      	ldr	r3, [sp, #16]
 800b9aa:	4303      	orrs	r3, r0
 800b9ac:	3401      	adds	r4, #1
 800b9ae:	9304      	str	r3, [sp, #16]
 800b9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b4:	482c      	ldr	r0, [pc, #176]	; (800ba68 <_vfiprintf_r+0x250>)
 800b9b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ba:	2206      	movs	r2, #6
 800b9bc:	f7f4 fc20 	bl	8000200 <memchr>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d03f      	beq.n	800ba44 <_vfiprintf_r+0x22c>
 800b9c4:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <_vfiprintf_r+0x254>)
 800b9c6:	bb1b      	cbnz	r3, 800ba10 <_vfiprintf_r+0x1f8>
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	3307      	adds	r3, #7
 800b9cc:	f023 0307 	bic.w	r3, r3, #7
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d6:	443b      	add	r3, r7
 800b9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9da:	e767      	b.n	800b8ac <_vfiprintf_r+0x94>
 800b9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	2001      	movs	r0, #1
 800b9e4:	e7a5      	b.n	800b932 <_vfiprintf_r+0x11a>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	3401      	adds	r4, #1
 800b9ea:	9305      	str	r3, [sp, #20]
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	f04f 0c0a 	mov.w	ip, #10
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9f8:	3a30      	subs	r2, #48	; 0x30
 800b9fa:	2a09      	cmp	r2, #9
 800b9fc:	d903      	bls.n	800ba06 <_vfiprintf_r+0x1ee>
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0c5      	beq.n	800b98e <_vfiprintf_r+0x176>
 800ba02:	9105      	str	r1, [sp, #20]
 800ba04:	e7c3      	b.n	800b98e <_vfiprintf_r+0x176>
 800ba06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e7f0      	b.n	800b9f2 <_vfiprintf_r+0x1da>
 800ba10:	ab03      	add	r3, sp, #12
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	462a      	mov	r2, r5
 800ba16:	4b16      	ldr	r3, [pc, #88]	; (800ba70 <_vfiprintf_r+0x258>)
 800ba18:	a904      	add	r1, sp, #16
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f3af 8000 	nop.w
 800ba20:	4607      	mov	r7, r0
 800ba22:	1c78      	adds	r0, r7, #1
 800ba24:	d1d6      	bne.n	800b9d4 <_vfiprintf_r+0x1bc>
 800ba26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba28:	07d9      	lsls	r1, r3, #31
 800ba2a:	d405      	bmi.n	800ba38 <_vfiprintf_r+0x220>
 800ba2c:	89ab      	ldrh	r3, [r5, #12]
 800ba2e:	059a      	lsls	r2, r3, #22
 800ba30:	d402      	bmi.n	800ba38 <_vfiprintf_r+0x220>
 800ba32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba34:	f7ff fb70 	bl	800b118 <__retarget_lock_release_recursive>
 800ba38:	89ab      	ldrh	r3, [r5, #12]
 800ba3a:	065b      	lsls	r3, r3, #25
 800ba3c:	f53f af12 	bmi.w	800b864 <_vfiprintf_r+0x4c>
 800ba40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba42:	e711      	b.n	800b868 <_vfiprintf_r+0x50>
 800ba44:	ab03      	add	r3, sp, #12
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	462a      	mov	r2, r5
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <_vfiprintf_r+0x258>)
 800ba4c:	a904      	add	r1, sp, #16
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 f880 	bl	800bb54 <_printf_i>
 800ba54:	e7e4      	b.n	800ba20 <_vfiprintf_r+0x208>
 800ba56:	bf00      	nop
 800ba58:	0800c168 	.word	0x0800c168
 800ba5c:	0800c188 	.word	0x0800c188
 800ba60:	0800c148 	.word	0x0800c148
 800ba64:	0800c1ac 	.word	0x0800c1ac
 800ba68:	0800c1b6 	.word	0x0800c1b6
 800ba6c:	00000000 	.word	0x00000000
 800ba70:	0800b7f3 	.word	0x0800b7f3
 800ba74:	0800c1b2 	.word	0x0800c1b2

0800ba78 <_printf_common>:
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	4699      	mov	r9, r3
 800ba80:	688a      	ldr	r2, [r1, #8]
 800ba82:	690b      	ldr	r3, [r1, #16]
 800ba84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	bfb8      	it	lt
 800ba8c:	4613      	movlt	r3, r2
 800ba8e:	6033      	str	r3, [r6, #0]
 800ba90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba94:	4607      	mov	r7, r0
 800ba96:	460c      	mov	r4, r1
 800ba98:	b10a      	cbz	r2, 800ba9e <_printf_common+0x26>
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	6033      	str	r3, [r6, #0]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	0699      	lsls	r1, r3, #26
 800baa2:	bf42      	ittt	mi
 800baa4:	6833      	ldrmi	r3, [r6, #0]
 800baa6:	3302      	addmi	r3, #2
 800baa8:	6033      	strmi	r3, [r6, #0]
 800baaa:	6825      	ldr	r5, [r4, #0]
 800baac:	f015 0506 	ands.w	r5, r5, #6
 800bab0:	d106      	bne.n	800bac0 <_printf_common+0x48>
 800bab2:	f104 0a19 	add.w	sl, r4, #25
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	6832      	ldr	r2, [r6, #0]
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	42ab      	cmp	r3, r5
 800babe:	dc26      	bgt.n	800bb0e <_printf_common+0x96>
 800bac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac4:	1e13      	subs	r3, r2, #0
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	bf18      	it	ne
 800baca:	2301      	movne	r3, #1
 800bacc:	0692      	lsls	r2, r2, #26
 800bace:	d42b      	bmi.n	800bb28 <_printf_common+0xb0>
 800bad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad4:	4649      	mov	r1, r9
 800bad6:	4638      	mov	r0, r7
 800bad8:	47c0      	blx	r8
 800bada:	3001      	adds	r0, #1
 800badc:	d01e      	beq.n	800bb1c <_printf_common+0xa4>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	68e5      	ldr	r5, [r4, #12]
 800bae2:	6832      	ldr	r2, [r6, #0]
 800bae4:	f003 0306 	and.w	r3, r3, #6
 800bae8:	2b04      	cmp	r3, #4
 800baea:	bf08      	it	eq
 800baec:	1aad      	subeq	r5, r5, r2
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	6922      	ldr	r2, [r4, #16]
 800baf2:	bf0c      	ite	eq
 800baf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf8:	2500      	movne	r5, #0
 800bafa:	4293      	cmp	r3, r2
 800bafc:	bfc4      	itt	gt
 800bafe:	1a9b      	subgt	r3, r3, r2
 800bb00:	18ed      	addgt	r5, r5, r3
 800bb02:	2600      	movs	r6, #0
 800bb04:	341a      	adds	r4, #26
 800bb06:	42b5      	cmp	r5, r6
 800bb08:	d11a      	bne.n	800bb40 <_printf_common+0xc8>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e008      	b.n	800bb20 <_printf_common+0xa8>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4652      	mov	r2, sl
 800bb12:	4649      	mov	r1, r9
 800bb14:	4638      	mov	r0, r7
 800bb16:	47c0      	blx	r8
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d103      	bne.n	800bb24 <_printf_common+0xac>
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb24:	3501      	adds	r5, #1
 800bb26:	e7c6      	b.n	800bab6 <_printf_common+0x3e>
 800bb28:	18e1      	adds	r1, r4, r3
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	2030      	movs	r0, #48	; 0x30
 800bb2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb32:	4422      	add	r2, r4
 800bb34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb3c:	3302      	adds	r3, #2
 800bb3e:	e7c7      	b.n	800bad0 <_printf_common+0x58>
 800bb40:	2301      	movs	r3, #1
 800bb42:	4622      	mov	r2, r4
 800bb44:	4649      	mov	r1, r9
 800bb46:	4638      	mov	r0, r7
 800bb48:	47c0      	blx	r8
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	d0e6      	beq.n	800bb1c <_printf_common+0xa4>
 800bb4e:	3601      	adds	r6, #1
 800bb50:	e7d9      	b.n	800bb06 <_printf_common+0x8e>
	...

0800bb54 <_printf_i>:
 800bb54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb58:	7e0f      	ldrb	r7, [r1, #24]
 800bb5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb5c:	2f78      	cmp	r7, #120	; 0x78
 800bb5e:	4691      	mov	r9, r2
 800bb60:	4680      	mov	r8, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	469a      	mov	sl, r3
 800bb66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb6a:	d807      	bhi.n	800bb7c <_printf_i+0x28>
 800bb6c:	2f62      	cmp	r7, #98	; 0x62
 800bb6e:	d80a      	bhi.n	800bb86 <_printf_i+0x32>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	f000 80d8 	beq.w	800bd26 <_printf_i+0x1d2>
 800bb76:	2f58      	cmp	r7, #88	; 0x58
 800bb78:	f000 80a3 	beq.w	800bcc2 <_printf_i+0x16e>
 800bb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb84:	e03a      	b.n	800bbfc <_printf_i+0xa8>
 800bb86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb8a:	2b15      	cmp	r3, #21
 800bb8c:	d8f6      	bhi.n	800bb7c <_printf_i+0x28>
 800bb8e:	a101      	add	r1, pc, #4	; (adr r1, 800bb94 <_printf_i+0x40>)
 800bb90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bc01 	.word	0x0800bc01
 800bb9c:	0800bb7d 	.word	0x0800bb7d
 800bba0:	0800bb7d 	.word	0x0800bb7d
 800bba4:	0800bb7d 	.word	0x0800bb7d
 800bba8:	0800bb7d 	.word	0x0800bb7d
 800bbac:	0800bc01 	.word	0x0800bc01
 800bbb0:	0800bb7d 	.word	0x0800bb7d
 800bbb4:	0800bb7d 	.word	0x0800bb7d
 800bbb8:	0800bb7d 	.word	0x0800bb7d
 800bbbc:	0800bb7d 	.word	0x0800bb7d
 800bbc0:	0800bd0d 	.word	0x0800bd0d
 800bbc4:	0800bc31 	.word	0x0800bc31
 800bbc8:	0800bcef 	.word	0x0800bcef
 800bbcc:	0800bb7d 	.word	0x0800bb7d
 800bbd0:	0800bb7d 	.word	0x0800bb7d
 800bbd4:	0800bd2f 	.word	0x0800bd2f
 800bbd8:	0800bb7d 	.word	0x0800bb7d
 800bbdc:	0800bc31 	.word	0x0800bc31
 800bbe0:	0800bb7d 	.word	0x0800bb7d
 800bbe4:	0800bb7d 	.word	0x0800bb7d
 800bbe8:	0800bcf7 	.word	0x0800bcf7
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	1d1a      	adds	r2, r3, #4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	602a      	str	r2, [r5, #0]
 800bbf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e0a3      	b.n	800bd48 <_printf_i+0x1f4>
 800bc00:	6820      	ldr	r0, [r4, #0]
 800bc02:	6829      	ldr	r1, [r5, #0]
 800bc04:	0606      	lsls	r6, r0, #24
 800bc06:	f101 0304 	add.w	r3, r1, #4
 800bc0a:	d50a      	bpl.n	800bc22 <_printf_i+0xce>
 800bc0c:	680e      	ldr	r6, [r1, #0]
 800bc0e:	602b      	str	r3, [r5, #0]
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	da03      	bge.n	800bc1c <_printf_i+0xc8>
 800bc14:	232d      	movs	r3, #45	; 0x2d
 800bc16:	4276      	negs	r6, r6
 800bc18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc1c:	485e      	ldr	r0, [pc, #376]	; (800bd98 <_printf_i+0x244>)
 800bc1e:	230a      	movs	r3, #10
 800bc20:	e019      	b.n	800bc56 <_printf_i+0x102>
 800bc22:	680e      	ldr	r6, [r1, #0]
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc2a:	bf18      	it	ne
 800bc2c:	b236      	sxthne	r6, r6
 800bc2e:	e7ef      	b.n	800bc10 <_printf_i+0xbc>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	6820      	ldr	r0, [r4, #0]
 800bc34:	1d19      	adds	r1, r3, #4
 800bc36:	6029      	str	r1, [r5, #0]
 800bc38:	0601      	lsls	r1, r0, #24
 800bc3a:	d501      	bpl.n	800bc40 <_printf_i+0xec>
 800bc3c:	681e      	ldr	r6, [r3, #0]
 800bc3e:	e002      	b.n	800bc46 <_printf_i+0xf2>
 800bc40:	0646      	lsls	r6, r0, #25
 800bc42:	d5fb      	bpl.n	800bc3c <_printf_i+0xe8>
 800bc44:	881e      	ldrh	r6, [r3, #0]
 800bc46:	4854      	ldr	r0, [pc, #336]	; (800bd98 <_printf_i+0x244>)
 800bc48:	2f6f      	cmp	r7, #111	; 0x6f
 800bc4a:	bf0c      	ite	eq
 800bc4c:	2308      	moveq	r3, #8
 800bc4e:	230a      	movne	r3, #10
 800bc50:	2100      	movs	r1, #0
 800bc52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc56:	6865      	ldr	r5, [r4, #4]
 800bc58:	60a5      	str	r5, [r4, #8]
 800bc5a:	2d00      	cmp	r5, #0
 800bc5c:	bfa2      	ittt	ge
 800bc5e:	6821      	ldrge	r1, [r4, #0]
 800bc60:	f021 0104 	bicge.w	r1, r1, #4
 800bc64:	6021      	strge	r1, [r4, #0]
 800bc66:	b90e      	cbnz	r6, 800bc6c <_printf_i+0x118>
 800bc68:	2d00      	cmp	r5, #0
 800bc6a:	d04d      	beq.n	800bd08 <_printf_i+0x1b4>
 800bc6c:	4615      	mov	r5, r2
 800bc6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc72:	fb03 6711 	mls	r7, r3, r1, r6
 800bc76:	5dc7      	ldrb	r7, [r0, r7]
 800bc78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc7c:	4637      	mov	r7, r6
 800bc7e:	42bb      	cmp	r3, r7
 800bc80:	460e      	mov	r6, r1
 800bc82:	d9f4      	bls.n	800bc6e <_printf_i+0x11a>
 800bc84:	2b08      	cmp	r3, #8
 800bc86:	d10b      	bne.n	800bca0 <_printf_i+0x14c>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	07de      	lsls	r6, r3, #31
 800bc8c:	d508      	bpl.n	800bca0 <_printf_i+0x14c>
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	6861      	ldr	r1, [r4, #4]
 800bc92:	4299      	cmp	r1, r3
 800bc94:	bfde      	ittt	le
 800bc96:	2330      	movle	r3, #48	; 0x30
 800bc98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bca0:	1b52      	subs	r2, r2, r5
 800bca2:	6122      	str	r2, [r4, #16]
 800bca4:	f8cd a000 	str.w	sl, [sp]
 800bca8:	464b      	mov	r3, r9
 800bcaa:	aa03      	add	r2, sp, #12
 800bcac:	4621      	mov	r1, r4
 800bcae:	4640      	mov	r0, r8
 800bcb0:	f7ff fee2 	bl	800ba78 <_printf_common>
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d14c      	bne.n	800bd52 <_printf_i+0x1fe>
 800bcb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcbc:	b004      	add	sp, #16
 800bcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc2:	4835      	ldr	r0, [pc, #212]	; (800bd98 <_printf_i+0x244>)
 800bcc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcc8:	6829      	ldr	r1, [r5, #0]
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcd0:	6029      	str	r1, [r5, #0]
 800bcd2:	061d      	lsls	r5, r3, #24
 800bcd4:	d514      	bpl.n	800bd00 <_printf_i+0x1ac>
 800bcd6:	07df      	lsls	r7, r3, #31
 800bcd8:	bf44      	itt	mi
 800bcda:	f043 0320 	orrmi.w	r3, r3, #32
 800bcde:	6023      	strmi	r3, [r4, #0]
 800bce0:	b91e      	cbnz	r6, 800bcea <_printf_i+0x196>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f023 0320 	bic.w	r3, r3, #32
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	2310      	movs	r3, #16
 800bcec:	e7b0      	b.n	800bc50 <_printf_i+0xfc>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	f043 0320 	orr.w	r3, r3, #32
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	2378      	movs	r3, #120	; 0x78
 800bcf8:	4828      	ldr	r0, [pc, #160]	; (800bd9c <_printf_i+0x248>)
 800bcfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcfe:	e7e3      	b.n	800bcc8 <_printf_i+0x174>
 800bd00:	0659      	lsls	r1, r3, #25
 800bd02:	bf48      	it	mi
 800bd04:	b2b6      	uxthmi	r6, r6
 800bd06:	e7e6      	b.n	800bcd6 <_printf_i+0x182>
 800bd08:	4615      	mov	r5, r2
 800bd0a:	e7bb      	b.n	800bc84 <_printf_i+0x130>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	6826      	ldr	r6, [r4, #0]
 800bd10:	6961      	ldr	r1, [r4, #20]
 800bd12:	1d18      	adds	r0, r3, #4
 800bd14:	6028      	str	r0, [r5, #0]
 800bd16:	0635      	lsls	r5, r6, #24
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	d501      	bpl.n	800bd20 <_printf_i+0x1cc>
 800bd1c:	6019      	str	r1, [r3, #0]
 800bd1e:	e002      	b.n	800bd26 <_printf_i+0x1d2>
 800bd20:	0670      	lsls	r0, r6, #25
 800bd22:	d5fb      	bpl.n	800bd1c <_printf_i+0x1c8>
 800bd24:	8019      	strh	r1, [r3, #0]
 800bd26:	2300      	movs	r3, #0
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	4615      	mov	r5, r2
 800bd2c:	e7ba      	b.n	800bca4 <_printf_i+0x150>
 800bd2e:	682b      	ldr	r3, [r5, #0]
 800bd30:	1d1a      	adds	r2, r3, #4
 800bd32:	602a      	str	r2, [r5, #0]
 800bd34:	681d      	ldr	r5, [r3, #0]
 800bd36:	6862      	ldr	r2, [r4, #4]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7f4 fa60 	bl	8000200 <memchr>
 800bd40:	b108      	cbz	r0, 800bd46 <_printf_i+0x1f2>
 800bd42:	1b40      	subs	r0, r0, r5
 800bd44:	6060      	str	r0, [r4, #4]
 800bd46:	6863      	ldr	r3, [r4, #4]
 800bd48:	6123      	str	r3, [r4, #16]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd50:	e7a8      	b.n	800bca4 <_printf_i+0x150>
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	462a      	mov	r2, r5
 800bd56:	4649      	mov	r1, r9
 800bd58:	4640      	mov	r0, r8
 800bd5a:	47d0      	blx	sl
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d0ab      	beq.n	800bcb8 <_printf_i+0x164>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	079b      	lsls	r3, r3, #30
 800bd64:	d413      	bmi.n	800bd8e <_printf_i+0x23a>
 800bd66:	68e0      	ldr	r0, [r4, #12]
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	4298      	cmp	r0, r3
 800bd6c:	bfb8      	it	lt
 800bd6e:	4618      	movlt	r0, r3
 800bd70:	e7a4      	b.n	800bcbc <_printf_i+0x168>
 800bd72:	2301      	movs	r3, #1
 800bd74:	4632      	mov	r2, r6
 800bd76:	4649      	mov	r1, r9
 800bd78:	4640      	mov	r0, r8
 800bd7a:	47d0      	blx	sl
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d09b      	beq.n	800bcb8 <_printf_i+0x164>
 800bd80:	3501      	adds	r5, #1
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	9903      	ldr	r1, [sp, #12]
 800bd86:	1a5b      	subs	r3, r3, r1
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dcf2      	bgt.n	800bd72 <_printf_i+0x21e>
 800bd8c:	e7eb      	b.n	800bd66 <_printf_i+0x212>
 800bd8e:	2500      	movs	r5, #0
 800bd90:	f104 0619 	add.w	r6, r4, #25
 800bd94:	e7f5      	b.n	800bd82 <_printf_i+0x22e>
 800bd96:	bf00      	nop
 800bd98:	0800c1bd 	.word	0x0800c1bd
 800bd9c:	0800c1ce 	.word	0x0800c1ce

0800bda0 <_putc_r>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	460d      	mov	r5, r1
 800bda4:	4614      	mov	r4, r2
 800bda6:	4606      	mov	r6, r0
 800bda8:	b118      	cbz	r0, 800bdb2 <_putc_r+0x12>
 800bdaa:	6983      	ldr	r3, [r0, #24]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <_putc_r+0x12>
 800bdae:	f7ff f8ef 	bl	800af90 <__sinit>
 800bdb2:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <_putc_r+0x84>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	d124      	bne.n	800be02 <_putc_r+0x62>
 800bdb8:	6874      	ldr	r4, [r6, #4]
 800bdba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdbc:	07d8      	lsls	r0, r3, #31
 800bdbe:	d405      	bmi.n	800bdcc <_putc_r+0x2c>
 800bdc0:	89a3      	ldrh	r3, [r4, #12]
 800bdc2:	0599      	lsls	r1, r3, #22
 800bdc4:	d402      	bmi.n	800bdcc <_putc_r+0x2c>
 800bdc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdc8:	f7ff f9a5 	bl	800b116 <__retarget_lock_acquire_recursive>
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	60a3      	str	r3, [r4, #8]
 800bdd4:	da05      	bge.n	800bde2 <_putc_r+0x42>
 800bdd6:	69a2      	ldr	r2, [r4, #24]
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	db1c      	blt.n	800be16 <_putc_r+0x76>
 800bddc:	b2eb      	uxtb	r3, r5
 800bdde:	2b0a      	cmp	r3, #10
 800bde0:	d019      	beq.n	800be16 <_putc_r+0x76>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	6022      	str	r2, [r4, #0]
 800bde8:	701d      	strb	r5, [r3, #0]
 800bdea:	b2ed      	uxtb	r5, r5
 800bdec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdee:	07da      	lsls	r2, r3, #31
 800bdf0:	d405      	bmi.n	800bdfe <_putc_r+0x5e>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	059b      	lsls	r3, r3, #22
 800bdf6:	d402      	bmi.n	800bdfe <_putc_r+0x5e>
 800bdf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdfa:	f7ff f98d 	bl	800b118 <__retarget_lock_release_recursive>
 800bdfe:	4628      	mov	r0, r5
 800be00:	bd70      	pop	{r4, r5, r6, pc}
 800be02:	4b09      	ldr	r3, [pc, #36]	; (800be28 <_putc_r+0x88>)
 800be04:	429c      	cmp	r4, r3
 800be06:	d101      	bne.n	800be0c <_putc_r+0x6c>
 800be08:	68b4      	ldr	r4, [r6, #8]
 800be0a:	e7d6      	b.n	800bdba <_putc_r+0x1a>
 800be0c:	4b07      	ldr	r3, [pc, #28]	; (800be2c <_putc_r+0x8c>)
 800be0e:	429c      	cmp	r4, r3
 800be10:	bf08      	it	eq
 800be12:	68f4      	ldreq	r4, [r6, #12]
 800be14:	e7d1      	b.n	800bdba <_putc_r+0x1a>
 800be16:	4629      	mov	r1, r5
 800be18:	4622      	mov	r2, r4
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff fb6c 	bl	800b4f8 <__swbuf_r>
 800be20:	4605      	mov	r5, r0
 800be22:	e7e3      	b.n	800bdec <_putc_r+0x4c>
 800be24:	0800c168 	.word	0x0800c168
 800be28:	0800c188 	.word	0x0800c188
 800be2c:	0800c148 	.word	0x0800c148

0800be30 <_read_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_read_r+0x20>)
 800be34:	4604      	mov	r4, r0
 800be36:	4608      	mov	r0, r1
 800be38:	4611      	mov	r1, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	602a      	str	r2, [r5, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	f7f6 fa24 	bl	800228c <_read>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_read_r+0x1e>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_read_r+0x1e>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	200009c8 	.word	0x200009c8

0800be54 <_fstat_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d07      	ldr	r5, [pc, #28]	; (800be74 <_fstat_r+0x20>)
 800be58:	2300      	movs	r3, #0
 800be5a:	4604      	mov	r4, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	4611      	mov	r1, r2
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	f7f6 fa3c 	bl	80022de <_fstat>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d102      	bne.n	800be70 <_fstat_r+0x1c>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	b103      	cbz	r3, 800be70 <_fstat_r+0x1c>
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	bd38      	pop	{r3, r4, r5, pc}
 800be72:	bf00      	nop
 800be74:	200009c8 	.word	0x200009c8

0800be78 <_isatty_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d06      	ldr	r5, [pc, #24]	; (800be94 <_isatty_r+0x1c>)
 800be7c:	2300      	movs	r3, #0
 800be7e:	4604      	mov	r4, r0
 800be80:	4608      	mov	r0, r1
 800be82:	602b      	str	r3, [r5, #0]
 800be84:	f7f6 fa3b 	bl	80022fe <_isatty>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_isatty_r+0x1a>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_isatty_r+0x1a>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	200009c8 	.word	0x200009c8

0800be98 <_init>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	bf00      	nop
 800be9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9e:	bc08      	pop	{r3}
 800bea0:	469e      	mov	lr, r3
 800bea2:	4770      	bx	lr

0800bea4 <_fini>:
 800bea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea6:	bf00      	nop
 800bea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beaa:	bc08      	pop	{r3}
 800beac:	469e      	mov	lr, r3
 800beae:	4770      	bx	lr
