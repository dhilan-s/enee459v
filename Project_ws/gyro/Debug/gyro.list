
gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006860  08006860  00016860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d8  080068d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000000c  080068ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080068ec  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a80a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cbb  00000000  00000000  0003a846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003d508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd1c  00000000  00000000  0003ffa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019636  00000000  00000000  0006ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118d50  00000000  00000000  000862f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f042  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  0019f094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006848 	.word	0x08006848

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006848 	.word	0x08006848

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <what_is_it>:
const uint16_t WHO_AM_I = 0x0F;
uint8_t data[2];


//function which reports some unique signature of the target peripheral (WHO_AM_I or equivalent).
void what_is_it(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read (&hi2c2, gyroSAD, WHO_AM_I, 1, data, 1, HAL_MAX_DELAY);
 8000506:	23d4      	movs	r3, #212	; 0xd4
 8000508:	b299      	uxth	r1, r3
 800050a:	220f      	movs	r2, #15
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2301      	movs	r3, #1
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <what_is_it+0x28>)
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <what_is_it+0x2c>)
 800051e:	f002 fd11 	bl	8002f44 <HAL_I2C_Mem_Read>
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000028 	.word	0x20000028
 800052c:	20000120 	.word	0x20000120

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f001 f92f 	bl	8001796 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f820 	bl	800057c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800053c:	f000 f880 	bl	8000640 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 fbd8 	bl	8000cf4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000544:	f000 f8ac 	bl	80006a0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000548:	f000 f910 	bl	800076c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800054c:	f000 f946 	bl	80007dc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000550:	f000 f984 	bl	800085c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000554:	f000 f9c2 	bl	80008dc <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000558:	f000 fa16 	bl	8000988 <MX_SPI1_Init>
  MX_SPI3_Init();
 800055c:	f000 fa52 	bl	8000a04 <MX_SPI3_Init>
  MX_UART4_Init();
 8000560:	f000 fa8e 	bl	8000a80 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000564:	f000 fad8 	bl	8000b18 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000568:	f000 fb22 	bl	8000bb0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800056c:	f000 fb6e 	bl	8000c4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000570:	f000 fbb8 	bl	8000ce4 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  what_is_it();
 8000574:	f7ff ffc4 	bl	8000500 <what_is_it>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x48>
	...

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f006 f954 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800059e:	2000      	movs	r0, #0
 80005a0:	f003 fdda 	bl	8004158 <HAL_PWREx_ControlVoltageScaling>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005aa:	f000 fce5 	bl	8000f78 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ae:	f003 fda3 	bl	80040f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xc0>)
 80005b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b8:	4a20      	ldr	r2, [pc, #128]	; (800063c <SystemClock_Config+0xc0>)
 80005ba:	f023 0318 	bic.w	r3, r3, #24
 80005be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c2:	2314      	movs	r3, #20
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ca:	2301      	movs	r3, #1
 80005cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d2:	2360      	movs	r3, #96	; 0x60
 80005d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005da:	2301      	movs	r3, #1
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005e2:	233c      	movs	r3, #60	; 0x3c
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fe52 	bl	80042a0 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000602:	f000 fcb9 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2105      	movs	r1, #5
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fa58 	bl	8004ad4 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800062a:	f000 fca5 	bl	8000f78 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800062e:	f005 f83f 	bl	80056b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000632:	bf00      	nop
 8000634:	3758      	adds	r7, #88	; 0x58
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0a6      	sub	sp, #152	; 0x98
 8000644:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2294      	movs	r2, #148	; 0x94
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f006 f8f3 	bl	8006838 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000652:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000656:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800065c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000660:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000664:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000666:	2301      	movs	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800066e:	2318      	movs	r3, #24
 8000670:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800067e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000682:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fce2 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000692:	f000 fc71 	bl	8000f78 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3798      	adds	r7, #152	; 0x98
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006b6:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <MX_ADC1_Init+0xc4>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c2:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ce:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006d6:	2204      	movs	r2, #4
 80006d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC1_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC1_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_ADC1_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC1_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_ADC1_Init+0xc0>)
 8000718:	2204      	movs	r2, #4
 800071a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	4810      	ldr	r0, [pc, #64]	; (8000760 <MX_ADC1_Init+0xc0>)
 800071e:	f001 fa4f 	bl	8001bc0 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 fc26 	bl	8000f78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_ADC1_Init+0xc8>)
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000730:	2306      	movs	r3, #6
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000738:	237f      	movs	r3, #127	; 0x7f
 800073a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073c:	2304      	movs	r3, #4
 800073e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_ADC1_Init+0xc0>)
 800074a:	f001 fb85 	bl	8001e58 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000754:	f000 fc10 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000002c 	.word	0x2000002c
 8000764:	50040000 	.word	0x50040000
 8000768:	04300002 	.word	0x04300002

0800076c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 8000772:	4a19      	ldr	r2, [pc, #100]	; (80007d8 <MX_DFSDM1_Init+0x6c>)
 8000774:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 8000778:	2201      	movs	r2, #1
 800077a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 8000784:	2202      	movs	r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_DFSDM1_Init+0x68>)
 80007c0:	f002 f858 	bl	8002874 <HAL_DFSDM_ChannelInit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007ca:	f000 fbd5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000094 	.word	0x20000094
 80007d8:	40016040 	.word	0x40016040

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f002 fb05 	bl	8002e26 <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 fba9 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f002 fef7 	bl	800361c <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fba0 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f002 ff39 	bl	80036b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fb97 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000cc 	.word	0x200000cc
 8000854:	40005400 	.word	0x40005400
 8000858:	307075b1 	.word	0x307075b1

0800085c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000898:	f002 fac5 	bl	8002e26 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 fb69 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008aa:	f002 feb7 	bl	800361c <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fb60 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008bc:	f002 fef9 	bl	80036b2 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fb57 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000120 	.word	0x20000120
 80008d4:	40005800 	.word	0x40005800
 80008d8:	307075b1 	.word	0x307075b1

080008dc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 80008f2:	4a24      	ldr	r2, [pc, #144]	; (8000984 <MX_OCTOSPI1_Init+0xa8>)
 80008f4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000908:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 800090c:	2220      	movs	r2, #32
 800090e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000912:	2201      	movs	r2, #1
 8000914:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 800093c:	2208      	movs	r2, #8
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000942:	f002 ff03 	bl	800374c <HAL_OSPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800094c:	f000 fb14 	bl	8000f78 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000958:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800095c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	f241 3288 	movw	r2, #5000	; 0x1388
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_OCTOSPI1_Init+0xa4>)
 8000968:	f002 ffaa 	bl	80038c0 <HAL_OSPIM_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000972:	f000 fb01 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000174 	.word	0x20000174
 8000984:	a0001000 	.word	0xa0001000

08000988 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000998:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2208      	movs	r2, #8
 80009c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	f005 f85a 	bl	8005aa0 <HAL_SPI_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009f2:	f000 fac1 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200001c4 	.word	0x200001c4
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI3_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI3_Init+0x74>)
 8000a64:	f005 f81c 	bl	8005aa0 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fa83 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000228 	.word	0x20000228
 8000a7c:	40003c00 	.word	0x40003c00

08000a80 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_UART4_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_UART4_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_UART4_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_UART4_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_UART4_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_UART4_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_UART4_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_UART4_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_UART4_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_UART4_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_UART4_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_UART4_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_UART4_Init+0x90>)
 8000aca:	f005 f88c 	bl	8005be6 <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ad4:	f000 fa50 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_UART4_Init+0x90>)
 8000adc:	f005 fdbe 	bl	800665c <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ae6:	f000 fa47 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_UART4_Init+0x90>)
 8000aee:	f005 fdf3 	bl	80066d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000af8:	f000 fa3e 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_UART4_Init+0x90>)
 8000afe:	f005 fd74 	bl	80065ea <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b08:	f000 fa36 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000028c 	.word	0x2000028c
 8000b14:	40004c00 	.word	0x40004c00

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <MX_USART1_UART_Init+0x94>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b62:	f005 f840 	bl	8005be6 <HAL_UART_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b6c:	f000 fa04 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b74:	f005 fd72 	bl	800665c <HAL_UARTEx_SetTxFifoThreshold>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7e:	f000 f9fb 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b82:	2100      	movs	r1, #0
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b86:	f005 fda7 	bl	80066d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b90:	f000 f9f2 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_USART1_UART_Init+0x90>)
 8000b96:	f005 fd28 	bl	80065ea <HAL_UARTEx_DisableFifoMode>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 f9ea 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000031c 	.word	0x2000031c
 8000bac:	40013800 	.word	0x40013800

08000bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <MX_USART2_UART_Init+0x98>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bdc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000be0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4812      	ldr	r0, [pc, #72]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000bfc:	f004 fff3 	bl	8005be6 <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c06:	f000 f9b7 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000c0e:	f005 fd25 	bl	800665c <HAL_UARTEx_SetTxFifoThreshold>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c18:	f000 f9ae 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000c20:	f005 fd5a 	bl	80066d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c2a:	f000 f9a5 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x94>)
 8000c30:	f005 fcdb 	bl	80065ea <HAL_UARTEx_DisableFifoMode>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000c3a:	f000 f99d 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200003ac 	.word	0x200003ac
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c96:	f004 ffa6 	bl	8005be6 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f96a 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca8:	f005 fcd8 	bl	800665c <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 f961 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cba:	f005 fd0d 	bl	80066d8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f958 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cca:	f005 fc8e 	bl	80065ea <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f950 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000043c 	.word	0x2000043c
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	4b96      	ldr	r3, [pc, #600]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a95      	ldr	r2, [pc, #596]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b93      	ldr	r3, [pc, #588]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b90      	ldr	r3, [pc, #576]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	4a8f      	ldr	r2, [pc, #572]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2e:	4b8d      	ldr	r3, [pc, #564]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	4b8a      	ldr	r3, [pc, #552]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a89      	ldr	r2, [pc, #548]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b84      	ldr	r3, [pc, #528]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	4a83      	ldr	r2, [pc, #524]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5e:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b7e      	ldr	r3, [pc, #504]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	4a7d      	ldr	r2, [pc, #500]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d76:	4b7b      	ldr	r3, [pc, #492]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d86:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8e:	4b75      	ldr	r3, [pc, #468]	; (8000f64 <MX_GPIO_Init+0x270>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f240 1105 	movw	r1, #261	; 0x105
 8000da0:	4871      	ldr	r0, [pc, #452]	; (8000f68 <MX_GPIO_Init+0x274>)
 8000da2:	f002 f805 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000da6:	2200      	movs	r2, #0
 8000da8:	f248 111c 	movw	r1, #33052	; 0x811c
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f001 fffe 	bl	8002db0 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000db4:	2200      	movs	r2, #0
 8000db6:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000dba:	486c      	ldr	r0, [pc, #432]	; (8000f6c <MX_GPIO_Init+0x278>)
 8000dbc:	f001 fff8 	bl	8002db0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f242 0183 	movw	r1, #8323	; 0x2083
 8000dc6:	486a      	ldr	r0, [pc, #424]	; (8000f70 <MX_GPIO_Init+0x27c>)
 8000dc8:	f001 fff2 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000dd2:	4868      	ldr	r0, [pc, #416]	; (8000f74 <MX_GPIO_Init+0x280>)
 8000dd4:	f001 ffec 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000dd8:	f240 1305 	movw	r3, #261	; 0x105
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	485d      	ldr	r0, [pc, #372]	; (8000f68 <MX_GPIO_Init+0x274>)
 8000df2:	f001 fe4b 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000df6:	237a      	movs	r3, #122	; 0x7a
 8000df8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4857      	ldr	r0, [pc, #348]	; (8000f68 <MX_GPIO_Init+0x274>)
 8000e0c:	f001 fe3e 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e10:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4853      	ldr	r0, [pc, #332]	; (8000f74 <MX_GPIO_Init+0x280>)
 8000e28:	f001 fe30 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e2c:	f248 131c 	movw	r3, #33052	; 0x811c
 8000e30:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f001 fe20 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4842      	ldr	r0, [pc, #264]	; (8000f6c <MX_GPIO_Init+0x278>)
 8000e62:	f001 fe13 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	483a      	ldr	r0, [pc, #232]	; (8000f6c <MX_GPIO_Init+0x278>)
 8000e82:	f001 fe03 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e86:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000e8a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4833      	ldr	r0, [pc, #204]	; (8000f6c <MX_GPIO_Init+0x278>)
 8000ea0:	f001 fdf4 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000ea4:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000ea8:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482d      	ldr	r0, [pc, #180]	; (8000f70 <MX_GPIO_Init+0x27c>)
 8000ebc:	f001 fde6 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000ec0:	f242 0383 	movw	r3, #8323	; 0x2083
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <MX_GPIO_Init+0x27c>)
 8000eda:	f001 fdd7 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ede:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481f      	ldr	r0, [pc, #124]	; (8000f74 <MX_GPIO_Init+0x280>)
 8000ef8:	f001 fdc8 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f001 fdba 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f38:	f001 fda8 	bl	8002a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2017      	movs	r0, #23
 8000f42:	f001 fc60 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f46:	2017      	movs	r0, #23
 8000f48:	f001 fc79 	bl	800283e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2028      	movs	r0, #40	; 0x28
 8000f52:	f001 fc58 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f56:	2028      	movs	r0, #40	; 0x28
 8000f58:	f001 fc71 	bl	800283e <HAL_NVIC_EnableIRQ>

}
 8000f5c:	bf00      	nop
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48001000 	.word	0x48001000
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	48000800 	.word	0x48000800

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	; 0x60
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a15      	ldr	r2, [pc, #84]	; (8001040 <HAL_ADC_MspInit+0x74>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d123      	bne.n	8001036 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8000ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_ADC_MspInit+0x78>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_ADC_MspInit+0x78>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800101e:	233f      	movs	r3, #63	; 0x3f
 8001020:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001022:	230b      	movs	r3, #11
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_ADC_MspInit+0x7c>)
 8001032:	f001 fd2b 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	50040000 	.word	0x50040000
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ae      	sub	sp, #184	; 0xb8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	2294      	movs	r2, #148	; 0x94
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fbe3 	bl	8006838 <memset>
  if(DFSDM1_Init == 0)
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d142      	bne.n	8001100 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800107a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f003 ffe0 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001096:	f7ff ff6f 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a4:	6613      	str	r3, [r2, #96]	; 0x60
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010ca:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010e4:	2306      	movs	r3, #6
 80010e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010f2:	f001 fccb 	bl	8002a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a02      	ldr	r2, [pc, #8]	; (8001108 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010fe:	6013      	str	r3, [r2, #0]
  }

}
 8001100:	bf00      	nop
 8001102:	37b8      	adds	r7, #184	; 0xb8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200004cc 	.word	0x200004cc
 800110c:	40021000 	.word	0x40021000
 8001110:	48001000 	.word	0x48001000

08001114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0b0      	sub	sp, #192	; 0xc0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	2294      	movs	r2, #148	; 0x94
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fb7f 	bl	8006838 <memset>
  if(hi2c->Instance==I2C1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_I2C_MspInit+0x134>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13c      	bne.n	80011be <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4618      	mov	r0, r3
 8001152:	f003 ff7d 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff ff0c 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b3a      	ldr	r3, [pc, #232]	; (800124c <HAL_I2C_MspInit+0x138>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	4a39      	ldr	r2, [pc, #228]	; (800124c <HAL_I2C_MspInit+0x138>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_I2C_MspInit+0x138>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001180:	2312      	movs	r3, #18
 8001182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001192:	2304      	movs	r3, #4
 8001194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800119c:	4619      	mov	r1, r3
 800119e:	482c      	ldr	r0, [pc, #176]	; (8001250 <HAL_I2C_MspInit+0x13c>)
 80011a0:	f001 fc74 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a8:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ae:	6593      	str	r3, [r2, #88]	; 0x58
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011bc:	e040      	b.n	8001240 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_I2C_MspInit+0x140>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d13b      	bne.n	8001240 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 ff3b 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011e0:	f7ff feca 	bl	8000f78 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	4a18      	ldr	r2, [pc, #96]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011ea:	f043 0302 	orr.w	r3, r3, #2
 80011ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_I2C_MspInit+0x138>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	2312      	movs	r3, #18
 8001206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001216:	2304      	movs	r3, #4
 8001218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001220:	4619      	mov	r1, r3
 8001222:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_I2C_MspInit+0x13c>)
 8001224:	f001 fc32 	bl	8002a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_I2C_MspInit+0x138>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <HAL_I2C_MspInit+0x138>)
 800122e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001232:	6593      	str	r3, [r2, #88]	; 0x58
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_I2C_MspInit+0x138>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
}
 8001240:	bf00      	nop
 8001242:	37c0      	adds	r7, #192	; 0xc0
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40005400 	.word	0x40005400
 800124c:	40021000 	.word	0x40021000
 8001250:	48000400 	.word	0x48000400
 8001254:	40005800 	.word	0x40005800

08001258 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0b0      	sub	sp, #192	; 0xc0
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	2294      	movs	r2, #148	; 0x94
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f005 fadd 	bl	8006838 <memset>
  if(hospi->Instance==OCTOSPI1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a28      	ldr	r2, [pc, #160]	; (8001324 <HAL_OSPI_MspInit+0xcc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d149      	bne.n	800131c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800128c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fed9 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80012a4:	f7ff fe68 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6513      	str	r3, [r2, #80]	; 0x50
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_OSPI_MspInit+0xd0>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012f0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80012f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800130a:	230a      	movs	r3, #10
 800130c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001310:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_OSPI_MspInit+0xd4>)
 8001318:	f001 fbb8 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	37c0      	adds	r7, #192	; 0xc0
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	a0001000 	.word	0xa0001000
 8001328:	40021000 	.word	0x40021000
 800132c:	48001000 	.word	0x48001000

08001330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_SPI_MspInit+0xdc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d129      	bne.n	80013a6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 8001358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a28      	ldr	r2, [pc, #160]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001382:	23e0      	movs	r3, #224	; 0xe0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001392:	2305      	movs	r3, #5
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f001 fb74 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013a4:	e02d      	b.n	8001402 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_SPI_MspInit+0xe4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d128      	bne.n	8001402 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_SPI_MspInit+0xe0>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013f2:	2306      	movs	r3, #6
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <HAL_SPI_MspInit+0xe8>)
 80013fe:	f001 fb45 	bl	8002a8c <HAL_GPIO_Init>
}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000
 8001414:	40003c00 	.word	0x40003c00
 8001418:	48000800 	.word	0x48000800

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0b4      	sub	sp, #208	; 0xd0
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001438:	2294      	movs	r2, #148	; 0x94
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f005 f9fb 	bl	8006838 <memset>
  if(huart->Instance==UART4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a83      	ldr	r2, [pc, #524]	; (8001654 <HAL_UART_MspInit+0x238>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d13c      	bne.n	80014c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800144c:	2308      	movs	r3, #8
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fdf9 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001464:	f7ff fd88 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800146e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001472:	6593      	str	r3, [r2, #88]	; 0x58
 8001474:	4b78      	ldr	r3, [pc, #480]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b75      	ldr	r3, [pc, #468]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	4a74      	ldr	r2, [pc, #464]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148c:	4b72      	ldr	r3, [pc, #456]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001498:	2303      	movs	r3, #3
 800149a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014b0:	2308      	movs	r3, #8
 80014b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f001 fae4 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c4:	e0c2      	b.n	800164c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a64      	ldr	r2, [pc, #400]	; (800165c <HAL_UART_MspInit+0x240>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13b      	bne.n	8001548 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014d4:	2300      	movs	r3, #0
 80014d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fdb7 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014e8:	f7ff fd46 	bl	8000f78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ec:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f0:	4a59      	ldr	r2, [pc, #356]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6613      	str	r3, [r2, #96]	; 0x60
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b54      	ldr	r3, [pc, #336]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	4a53      	ldr	r2, [pc, #332]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001510:	4b51      	ldr	r3, [pc, #324]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001534:	2307      	movs	r3, #7
 8001536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800153e:	4619      	mov	r1, r3
 8001540:	4847      	ldr	r0, [pc, #284]	; (8001660 <HAL_UART_MspInit+0x244>)
 8001542:	f001 faa3 	bl	8002a8c <HAL_GPIO_Init>
}
 8001546:	e081      	b.n	800164c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_UART_MspInit+0x248>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d13b      	bne.n	80015ca <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001552:	2302      	movs	r3, #2
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fd76 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800156a:	f7ff fd05 	bl	8000f78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a39      	ldr	r2, [pc, #228]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800159e:	2378      	movs	r3, #120	; 0x78
 80015a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015c0:	4619      	mov	r1, r3
 80015c2:	4829      	ldr	r0, [pc, #164]	; (8001668 <HAL_UART_MspInit+0x24c>)
 80015c4:	f001 fa62 	bl	8002a8c <HAL_GPIO_Init>
}
 80015c8:	e040      	b.n	800164c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_UART_MspInit+0x250>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d13b      	bne.n	800164c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d4:	2304      	movs	r3, #4
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fd35 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80015ec:	f7ff fcc4 	bl	8000f78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80015f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_UART_MspInit+0x23c>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_UART_MspInit+0x23c>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_UART_MspInit+0x23c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001620:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800163a:	2307      	movs	r3, #7
 800163c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001640:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001644:	4619      	mov	r1, r3
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <HAL_UART_MspInit+0x24c>)
 8001648:	f001 fa20 	bl	8002a8c <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	37d0      	adds	r7, #208	; 0xd0
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004c00 	.word	0x40004c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40013800 	.word	0x40013800
 8001660:	48000400 	.word	0x48000400
 8001664:	40004400 	.word	0x40004400
 8001668:	48000c00 	.word	0x48000c00
 800166c:	40004800 	.word	0x40004800

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 f8c0 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016c8:	2020      	movs	r0, #32
 80016ca:	f001 fb89 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016ce:	2040      	movs	r0, #64	; 0x40
 80016d0:	f001 fb86 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016d4:	2080      	movs	r0, #128	; 0x80
 80016d6:	f001 fb83 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016de:	f001 fb7f 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80016ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016ee:	f001 fb77 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016f6:	f001 fb73 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80016fa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016fe:	f001 fb6f 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001702:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001706:	f001 fb6b 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800170a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800170e:	f001 fb67 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001712:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001716:	f001 fb63 	bl	8002de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffea 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f005 f83d 	bl	80067f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7fe fedb 	bl	8000530 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001788:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 800178c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001790:	200004f8 	.word	0x200004f8

08001794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_IRQHandler>

08001796 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f001 f825 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 f80e 	bl	80017c8 <HAL_InitTick>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
 80017b6:	e001      	b.n	80017bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017b8:	f7ff fbe4 	bl	8000f84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <HAL_InitTick+0x6c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d023      	beq.n	8001824 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <HAL_InitTick+0x70>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_InitTick+0x6c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 f831 	bl	800285a <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d809      	bhi.n	8001818 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 fffb 	bl	8002806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_InitTick+0x74>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e007      	b.n	8001828 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e004      	b.n	8001828 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e001      	b.n	8001828 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008
 8001864:	200004d0 	.word	0x200004d0

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	200004d0 	.word	0x200004d0

08001880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	3360      	adds	r3, #96	; 0x60
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <LL_ADC_SetOffset+0x44>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	4313      	orrs	r3, r2
 8001918:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001920:	bf00      	nop
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	03fff000 	.word	0x03fff000

08001930 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3360      	adds	r3, #96	; 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3360      	adds	r3, #96	; 0x60
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	615a      	str	r2, [r3, #20]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3330      	adds	r3, #48	; 0x30
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	211f      	movs	r1, #31
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0e9b      	lsrs	r3, r3, #26
 80019f0:	f003 011f 	and.w	r1, r3, #31
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3314      	adds	r3, #20
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0e5b      	lsrs	r3, r3, #25
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	0d1b      	lsrs	r3, r3, #20
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	401a      	ands	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	0d1b      	lsrs	r3, r3, #20
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0318 	and.w	r3, r3, #24
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a8c:	40d9      	lsrs	r1, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	400b      	ands	r3, r1
 8001a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	0007ffff 	.word	0x0007ffff

08001ab0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6093      	str	r3, [r2, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_IsEnabled+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_IsEnabled+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12f      	b.n	8001e3a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff f9ef 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff67 	bl	8001ad4 <LL_ADC_IsDeepPowerDownEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff4d 	bl	8001ab0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff82 	bl	8001b24 <LL_ADC_IsInternalRegulatorEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff66 	bl	8001afc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c30:	4b84      	ldr	r3, [pc, #528]	; (8001e44 <HAL_ADC_Init+0x284>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	4a84      	ldr	r2, [pc, #528]	; (8001e48 <HAL_ADC_Init+0x288>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff64 	bl	8001b24 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff75 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80c8 	bne.w	8001e28 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80c4 	bne.w	8001e28 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ca8:	f043 0202 	orr.w	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff49 	bl	8001b4c <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc0:	4862      	ldr	r0, [pc, #392]	; (8001e4c <HAL_ADC_Init+0x28c>)
 8001cc2:	f7ff ff43 	bl	8001b4c <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	485f      	ldr	r0, [pc, #380]	; (8001e50 <HAL_ADC_Init+0x290>)
 8001cd4:	f7ff fdd4 	bl	8001880 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e5b      	ldrb	r3, [r3, #25]
 8001cdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ce8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	045b      	lsls	r3, r3, #17
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_ADC_Init+0x294>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff12 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001d4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff1f 	bl	8001b98 <LL_ADC_INJ_IsConversionOngoing>
 8001d5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d140      	bne.n	8001de4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d13d      	bne.n	8001de4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e1b      	ldrb	r3, [r3, #24]
 8001d70:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d72:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d7a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8a:	f023 0306 	bic.w	r3, r3, #6
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	430b      	orrs	r3, r1
 8001d96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d118      	bne.n	8001dd4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dbe:	4311      	orrs	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10c      	bne.n	8001e06 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f023 010f 	bic.w	r1, r3, #15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
 8001e04:	e007      	b.n	8001e16 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 020f 	bic.w	r2, r2, #15
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	659a      	str	r2, [r3, #88]	; 0x58
 8001e26:	e007      	b.n	8001e38 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f043 0210 	orr.w	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000
 8001e48:	053e2d63 	.word	0x053e2d63
 8001e4c:	50040000 	.word	0x50040000
 8001e50:	50040300 	.word	0x50040300
 8001e54:	fff0c007 	.word	0xfff0c007

08001e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b6      	sub	sp, #216	; 0xd8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x22>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e3d5      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7ce>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe73 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 83ba 	bne.w	8002608 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	3b02      	subs	r3, #2
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d81b      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x86>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <HAL_ADC_ConfigChannel+0x54>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08001ec5 	.word	0x08001ec5
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ed5 	.word	0x08001ed5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	605a      	str	r2, [r3, #4]
          break;
 8001ec2:	e011      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2212      	movs	r2, #18
 8001ec8:	605a      	str	r2, [r3, #4]
          break;
 8001eca:	e00d      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2218      	movs	r2, #24
 8001ed0:	605a      	str	r2, [r3, #4]
          break;
 8001ed2:	e009      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eda:	605a      	str	r2, [r3, #4]
          break;
 8001edc:	e004      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	605a      	str	r2, [r3, #4]
          break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ee6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	f7ff fd5f 	bl	80019b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fe37 	bl	8001b72 <LL_ADC_REG_IsConversionOngoing>
 8001f04:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fe43 	bl	8001b98 <LL_ADC_INJ_IsConversionOngoing>
 8001f12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 81c1 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 81bc 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f32:	d10f      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7ff fd66 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fd20 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f52:	e00e      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fd55 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fd10 	bl	8001992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00a      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6919      	ldr	r1, [r3, #16]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001fa4:	f7ff fca0 	bl	80018e8 <LL_ADC_SetOffset>
 8001fa8:	e17b      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fcbd 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x17e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fcb2 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	e01e      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1bc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fca7 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ff4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ffc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e004      	b.n	8002012 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002008:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1d4>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	e018      	b.n	800205e <HAL_ADC_ConfigChannel+0x206>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002050:	2320      	movs	r3, #32
 8002052:	e004      	b.n	800205e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800205e:	429a      	cmp	r2, r3
 8002060:	d106      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fc76 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fc5a 	bl	8001930 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10a      	bne.n	800209c <HAL_ADC_ConfigChannel+0x244>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fc4f 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	e01e      	b.n	80020da <HAL_ADC_ConfigChannel+0x282>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc44 	bl	8001930 <LL_ADC_GetOffsetChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80020ca:	2320      	movs	r3, #32
 80020cc:	e004      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80020ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x29a>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	e018      	b.n	8002124 <HAL_ADC_ConfigChannel+0x2cc>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002106:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800210a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800210e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e004      	b.n	8002124 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800211a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002124:	429a      	cmp	r2, r3
 8002126:	d106      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2200      	movs	r2, #0
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fc13 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fbf7 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x30a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fbec 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	e01e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x348>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2102      	movs	r1, #2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fbe1 	bl	8001930 <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e004      	b.n	800219e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x360>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	e016      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x38e>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e004      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80021dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2102      	movs	r1, #2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fbb2 	bl	800195c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2103      	movs	r1, #3
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fb96 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x3cc>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2103      	movs	r1, #3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fb8b 	bl	8001930 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	e017      	b.n	8002254 <HAL_ADC_ConfigChannel+0x3fc>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2103      	movs	r1, #3
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fb80 	bl	8001930 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800223c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800224a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x414>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0e9b      	lsrs	r3, r3, #26
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	e011      	b.n	8002290 <HAL_ADC_ConfigChannel+0x438>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800227a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800227c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800227e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002284:	2320      	movs	r3, #32
 8002286:	e003      	b.n	8002290 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2200      	movs	r2, #0
 800229a:	2103      	movs	r1, #3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb5d 	bl	800195c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fc50 	bl	8001b4c <LL_ADC_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8140 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fbd1 	bl	8001a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a8f      	ldr	r2, [pc, #572]	; (8002508 <HAL_ADC_ConfigChannel+0x6b0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8131 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x4a2>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	bf94      	ite	ls
 80022f2:	2301      	movls	r3, #1
 80022f4:	2300      	movhi	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e019      	b.n	800232e <HAL_ADC_ConfigChannel+0x4d6>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800230a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800230c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2b09      	cmp	r3, #9
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232e:	2b00      	cmp	r3, #0
 8002330:	d079      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	2b00      	cmp	r3, #0
 800233c:	d107      	bne.n	800234e <HAL_ADC_ConfigChannel+0x4f6>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0e9b      	lsrs	r3, r3, #26
 8002344:	3301      	adds	r3, #1
 8002346:	069b      	lsls	r3, r3, #26
 8002348:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234c:	e015      	b.n	800237a <HAL_ADC_ConfigChannel+0x522>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800236a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	069b      	lsls	r3, r3, #26
 8002376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_ADC_ConfigChannel+0x542>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	3301      	adds	r3, #1
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	e017      	b.n	80023ca <HAL_ADC_ConfigChannel+0x572>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e003      	b.n	80023be <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80023b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	ea42 0103 	orr.w	r1, r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x598>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0e9b      	lsrs	r3, r3, #26
 80023e0:	3301      	adds	r3, #1
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	e018      	b.n	8002422 <HAL_ADC_ConfigChannel+0x5ca>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e003      	b.n	8002414 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002422:	430b      	orrs	r3, r1
 8002424:	e081      	b.n	800252a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x5ea>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	3301      	adds	r3, #1
 800243a:	069b      	lsls	r3, r3, #26
 800243c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002440:	e015      	b.n	800246e <HAL_ADC_ConfigChannel+0x616>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	069b      	lsls	r3, r3, #26
 800246a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_ADC_ConfigChannel+0x636>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0e9b      	lsrs	r3, r3, #26
 8002480:	3301      	adds	r3, #1
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	e017      	b.n	80024be <HAL_ADC_ConfigChannel+0x666>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	61fb      	str	r3, [r7, #28]
  return result;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80024a6:	2320      	movs	r3, #32
 80024a8:	e003      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	fab3 f383 	clz	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	ea42 0103 	orr.w	r1, r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x692>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	3b1e      	subs	r3, #30
 80024e2:	051b      	lsls	r3, r3, #20
 80024e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e8:	e01e      	b.n	8002528 <HAL_ADC_ConfigChannel+0x6d0>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	613b      	str	r3, [r7, #16]
  return result;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e006      	b.n	8002514 <HAL_ADC_ConfigChannel+0x6bc>
 8002506:	bf00      	nop
 8002508:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3301      	adds	r3, #1
 8002516:	f003 021f 	and.w	r2, r3, #31
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	3b1e      	subs	r3, #30
 8002522:	051b      	lsls	r3, r3, #20
 8002524:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002528:	430b      	orrs	r3, r1
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6892      	ldr	r2, [r2, #8]
 800252e:	4619      	mov	r1, r3
 8002530:	f7ff fa6e 	bl	8001a10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_ADC_ConfigChannel+0x7d8>)
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d06c      	beq.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002540:	483c      	ldr	r0, [pc, #240]	; (8002634 <HAL_ADC_ConfigChannel+0x7dc>)
 8002542:	f7ff f9c3 	bl	80018cc <LL_ADC_GetCommonPathInternalCh>
 8002546:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3a      	ldr	r2, [pc, #232]	; (8002638 <HAL_ADC_ConfigChannel+0x7e0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d127      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002558:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d121      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <HAL_ADC_ConfigChannel+0x7e4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d157      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800256a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002572:	4619      	mov	r1, r3
 8002574:	482f      	ldr	r0, [pc, #188]	; (8002634 <HAL_ADC_ConfigChannel+0x7dc>)
 8002576:	f7ff f996 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_ADC_ConfigChannel+0x7e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_ADC_ConfigChannel+0x7ec>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002594:	e002      	b.n	800259c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a2:	e03a      	b.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a27      	ldr	r2, [pc, #156]	; (8002648 <HAL_ADC_ConfigChannel+0x7f0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x77e>
 80025ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_ADC_ConfigChannel+0x7e4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d12a      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025cc:	4619      	mov	r1, r3
 80025ce:	4819      	ldr	r0, [pc, #100]	; (8002634 <HAL_ADC_ConfigChannel+0x7dc>)
 80025d0:	f7ff f969 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d4:	e021      	b.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_ADC_ConfigChannel+0x7f4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d11c      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d116      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_ADC_ConfigChannel+0x7e4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d111      	bne.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <HAL_ADC_ConfigChannel+0x7dc>)
 8002602:	f7ff f950 	bl	80018a6 <LL_ADC_SetCommonPathInternalCh>
 8002606:	e008      	b.n	800261a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002622:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002626:	4618      	mov	r0, r3
 8002628:	37d8      	adds	r7, #216	; 0xd8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	80080000 	.word	0x80080000
 8002634:	50040300 	.word	0x50040300
 8002638:	c7520000 	.word	0xc7520000
 800263c:	50040000 	.word	0x50040000
 8002640:	20000000 	.word	0x20000000
 8002644:	053e2d63 	.word	0x053e2d63
 8002648:	cb840000 	.word	0xcb840000
 800264c:	80000001 	.word	0x80000001

08002650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <__NVIC_GetPriorityGrouping+0x18>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	f003 0307 	and.w	r3, r3, #7
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	db0b      	blt.n	80026de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <__NVIC_EnableIRQ+0x38>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2001      	movs	r0, #1
 80026d6:	fa00 f202 	lsl.w	r2, r0, r2
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e100 	.word	0xe000e100

080026f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	2b00      	cmp	r3, #0
 8002702:	db0a      	blt.n	800271a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	b2da      	uxtb	r2, r3
 8002708:	490c      	ldr	r1, [pc, #48]	; (800273c <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	440b      	add	r3, r1
 8002714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002718:	e00a      	b.n	8002730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	4908      	ldr	r1, [pc, #32]	; (8002740 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	0112      	lsls	r2, r2, #4
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	440b      	add	r3, r1
 800272e:	761a      	strb	r2, [r3, #24]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000e100 	.word	0xe000e100
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f1c3 0307 	rsb	r3, r3, #7
 800275e:	2b04      	cmp	r3, #4
 8002760:	bf28      	it	cs
 8002762:	2304      	movcs	r3, #4
 8002764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3304      	adds	r3, #4
 800276a:	2b06      	cmp	r3, #6
 800276c:	d902      	bls.n	8002774 <NVIC_EncodePriority+0x30>
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3b03      	subs	r3, #3
 8002772:	e000      	b.n	8002776 <NVIC_EncodePriority+0x32>
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	401a      	ands	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278c:	f04f 31ff 	mov.w	r1, #4294967295
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43d9      	mvns	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	4313      	orrs	r3, r2
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7ff ff8e 	bl	80026f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff29 	bl	8002650 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff3e 	bl	8002698 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff8e 	bl	8002744 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5d 	bl	80026f0 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff31 	bl	80026b4 <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0ac      	b.n	80029e0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f8b2 	bl	80029f4 <DFSDM_GetChannelFromInstance>
 8002890:	4603      	mov	r3, r0
 8002892:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_DFSDM_ChannelInit+0x174>)
 8002894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e09f      	b.n	80029e0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fe fbd3 	bl	800104c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80028a6:	4b51      	ldr	r3, [pc, #324]	; (80029ec <HAL_DFSDM_ChannelInit+0x178>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a4f      	ldr	r2, [pc, #316]	; (80029ec <HAL_DFSDM_ChannelInit+0x178>)
 80028ae:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80028b0:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <HAL_DFSDM_ChannelInit+0x178>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d125      	bne.n	8002904 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80028b8:	4b4d      	ldr	r3, [pc, #308]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028c2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028c4:	4b4a      	ldr	r3, [pc, #296]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4948      	ldr	r1, [pc, #288]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a46      	ldr	r2, [pc, #280]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80028dc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	791b      	ldrb	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028e6:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	493f      	ldr	r1, [pc, #252]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_DFSDM_ChannelInit+0x17c>)
 80028fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002902:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002912:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002922:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002928:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 020f 	bic.w	r2, r2, #15
 8002940:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6819      	ldr	r1, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002968:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f002 0207 	and.w	r2, r2, #7
 8002994:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f810 	bl	80029f4 <DFSDM_GetChannelFromInstance>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4904      	ldr	r1, [pc, #16]	; (80029e8 <HAL_DFSDM_ChannelInit+0x174>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200004d8 	.word	0x200004d8
 80029ec:	200004d4 	.word	0x200004d4
 80029f0:	40016000 	.word	0x40016000

080029f4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e02b      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <DFSDM_GetChannelFromInstance+0x80>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d102      	bne.n	8002a18 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e024      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <DFSDM_GetChannelFromInstance+0x84>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d102      	bne.n	8002a26 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a20:	2302      	movs	r3, #2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e01d      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <DFSDM_GetChannelFromInstance+0x88>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d102      	bne.n	8002a34 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e016      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <DFSDM_GetChannelFromInstance+0x8c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d102      	bne.n	8002a42 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a3c:	2305      	movs	r3, #5
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e00f      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <DFSDM_GetChannelFromInstance+0x90>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d102      	bne.n	8002a50 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e008      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <DFSDM_GetChannelFromInstance+0x94>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e001      	b.n	8002a62 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40016000 	.word	0x40016000
 8002a74:	40016020 	.word	0x40016020
 8002a78:	40016040 	.word	0x40016040
 8002a7c:	40016080 	.word	0x40016080
 8002a80:	400160a0 	.word	0x400160a0
 8002a84:	400160c0 	.word	0x400160c0
 8002a88:	400160e0 	.word	0x400160e0

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9a:	e166      	b.n	8002d6a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8158 	beq.w	8002d64 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d005      	beq.n	8002acc <HAL_GPIO_Init+0x40>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d130      	bne.n	8002b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b02:	2201      	movs	r2, #1
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0201 	and.w	r2, r3, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d017      	beq.n	8002b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d123      	bne.n	8002bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	08da      	lsrs	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3208      	adds	r2, #8
 8002b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	08da      	lsrs	r2, r3, #3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3208      	adds	r2, #8
 8002bb8:	6939      	ldr	r1, [r7, #16]
 8002bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0203 	and.w	r2, r3, #3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 80b2 	beq.w	8002d64 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_GPIO_Init+0x2fc>)
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	4a60      	ldr	r2, [pc, #384]	; (8002d88 <HAL_GPIO_Init+0x2fc>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <HAL_GPIO_Init+0x2fc>)
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c18:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_GPIO_Init+0x300>)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	3302      	adds	r3, #2
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c42:	d02b      	beq.n	8002c9c <HAL_GPIO_Init+0x210>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_GPIO_Init+0x304>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d025      	beq.n	8002c98 <HAL_GPIO_Init+0x20c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_GPIO_Init+0x308>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d01f      	beq.n	8002c94 <HAL_GPIO_Init+0x208>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a50      	ldr	r2, [pc, #320]	; (8002d98 <HAL_GPIO_Init+0x30c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d019      	beq.n	8002c90 <HAL_GPIO_Init+0x204>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x310>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_GPIO_Init+0x200>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a4e      	ldr	r2, [pc, #312]	; (8002da0 <HAL_GPIO_Init+0x314>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00d      	beq.n	8002c88 <HAL_GPIO_Init+0x1fc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <HAL_GPIO_Init+0x318>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <HAL_GPIO_Init+0x1f8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <HAL_GPIO_Init+0x31c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <HAL_GPIO_Init+0x1f4>
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	e00e      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c80:	2308      	movs	r3, #8
 8002c82:	e00c      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c84:	2306      	movs	r3, #6
 8002c86:	e00a      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c88:	2305      	movs	r3, #5
 8002c8a:	e008      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	e006      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c90:	2303      	movs	r3, #3
 8002c92:	e004      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e002      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	f002 0203 	and.w	r2, r2, #3
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	4093      	lsls	r3, r2
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cae:	4937      	ldr	r1, [pc, #220]	; (8002d8c <HAL_GPIO_Init+0x300>)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce0:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce6:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d0a:	4a28      	ldr	r2, [pc, #160]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f ae91 	bne.w	8002a9c <HAL_GPIO_Init+0x10>
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	48000400 	.word	0x48000400
 8002d94:	48000800 	.word	0x48000800
 8002d98:	48000c00 	.word	0x48000c00
 8002d9c:	48001000 	.word	0x48001000
 8002da0:	48001400 	.word	0x48001400
 8002da4:	48001800 	.word	0x48001800
 8002da8:	48001c00 	.word	0x48001c00
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f806 	bl	8002e10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40010400 	.word	0x40010400

08002e10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e081      	b.n	8002f3c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe f961 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2224      	movs	r2, #36	; 0x24
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	e006      	b.n	8002eae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d104      	bne.n	8002ec0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ebe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69d9      	ldr	r1, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1a      	ldr	r2, [r3, #32]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	f040 80fd 	bne.w	8003166 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_I2C_Mem_Read+0x34>
 8002f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0f1      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2C_Mem_Read+0x4e>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0ea      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9a:	f7fe fc65 	bl	8001868 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f95b 	bl	8003268 <I2C_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0d5      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2222      	movs	r2, #34	; 0x22
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe4:	88f8      	ldrh	r0, [r7, #6]
 8002fe6:	893a      	ldrh	r2, [r7, #8]
 8002fe8:	8979      	ldrh	r1, [r7, #10]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f8bf 	bl	8003178 <I2C_RequestMemoryRead>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0ad      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2bff      	cmp	r3, #255	; 0xff
 8003014:	d90e      	bls.n	8003034 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_I2C_Mem_Read+0x22c>)
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fac3 	bl	80035b8 <I2C_TransferConfig>
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_I2C_Mem_Read+0x22c>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fab2 	bl	80035b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2200      	movs	r2, #0
 800305c:	2104      	movs	r1, #4
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f902 	bl	8003268 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e07c      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d034      	beq.n	8003114 <HAL_I2C_Mem_Read+0x1d0>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d130      	bne.n	8003114 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f8d3 	bl	8003268 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e04d      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	d90e      	bls.n	80030f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	22ff      	movs	r2, #255	; 0xff
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fa63 	bl	80035b8 <I2C_TransferConfig>
 80030f2:	e00f      	b.n	8003114 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	b2da      	uxtb	r2, r3
 8003104:	8979      	ldrh	r1, [r7, #10]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa52 	bl	80035b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d19a      	bne.n	8003054 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f920 	bl	8003368 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e01a      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2220      	movs	r2, #32
 8003138:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_I2C_Mem_Read+0x230>)
 8003146:	400b      	ands	r3, r1
 8003148:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	e000      	b.n	8003168 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	80002400 	.word	0x80002400
 8003174:	fe00e800 	.word	0xfe00e800

08003178 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	4603      	mov	r3, r0
 8003188:	817b      	strh	r3, [r7, #10]
 800318a:	460b      	mov	r3, r1
 800318c:	813b      	strh	r3, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	8979      	ldrh	r1, [r7, #10]
 8003198:	4b20      	ldr	r3, [pc, #128]	; (800321c <I2C_RequestMemoryRead+0xa4>)
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa0a 	bl	80035b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f89d 	bl	80032e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02c      	b.n	8003212 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
 80031c8:	e015      	b.n	80031f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031ca:	893b      	ldrh	r3, [r7, #8]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f883 	bl	80032e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e012      	b.n	8003212 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	; 0x40
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f831 	bl	8003268 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	80002000 	.word	0x80002000

08003220 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d103      	bne.n	800323e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	619a      	str	r2, [r3, #24]
  }
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003278:	e022      	b.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d01e      	beq.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fe faf1 	bl	8001868 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e00f      	b.n	80032e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4013      	ands	r3, r2
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d0cd      	beq.n	800327a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032f4:	e02c      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f870 	bl	80033e0 <I2C_IsErrorOccurred>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e02a      	b.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d01e      	beq.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fe faa9 	bl	8001868 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d113      	bne.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e007      	b.n	8003360 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d1cb      	bne.n	80032f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003374:	e028      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f830 	bl	80033e0 <I2C_IsErrorOccurred>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e026      	b.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe fa6d 	bl	8001868 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e007      	b.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d1cf      	bne.n	8003376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d075      	beq.n	80034f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003414:	e056      	b.n	80034c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d052      	beq.n	80034c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341e:	f7fe fa23 	bl	8001868 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <I2C_IsErrorOccurred+0x54>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d147      	bne.n	80034c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003446:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003456:	d12e      	bne.n	80034b6 <I2C_IsErrorOccurred+0xd6>
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345e:	d02a      	beq.n	80034b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b20      	cmp	r3, #32
 8003464:	d027      	beq.n	80034b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003474:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003476:	f7fe f9f7 	bl	8001868 <HAL_GetTick>
 800347a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347c:	e01b      	b.n	80034b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800347e:	f7fe f9f3 	bl	8001868 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b19      	cmp	r3, #25
 800348a:	d914      	bls.n	80034b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d1dc      	bne.n	800347e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d003      	beq.n	80034da <I2C_IsErrorOccurred+0xfa>
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d09d      	beq.n	8003416 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2220      	movs	r2, #32
 80034e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f043 0304 	orr.w	r3, r3, #4
 80034f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800351a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	f043 0308 	orr.w	r3, r3, #8
 8003532:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800353c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800355e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01c      	beq.n	80035a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fe56 	bl	8003220 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <I2C_IsErrorOccurred+0x1d4>)
 8003580:	400b      	ands	r3, r1
 8003582:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fe00e800 	.word	0xfe00e800

080035b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	4613      	mov	r3, r2
 80035c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ca:	897b      	ldrh	r3, [r7, #10]
 80035cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035d0:	7a7b      	ldrb	r3, [r7, #9]
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	0d5b      	lsrs	r3, r3, #21
 80035f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <I2C_TransferConfig+0x60>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	43db      	mvns	r3, r3
 80035fc:	ea02 0103 	and.w	r1, r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	03ff63ff 	.word	0x03ff63ff

0800361c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d138      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800363c:	2302      	movs	r3, #2
 800363e:	e032      	b.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	; 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800366e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d139      	bne.n	800373c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e033      	b.n	800373e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2224      	movs	r2, #36	; 0x24
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	e000      	b.n	800373e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800373c:	2302      	movs	r3, #2
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7fe f886 	bl	8001868 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e092      	b.n	8003890 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	2b00      	cmp	r3, #0
 8003776:	f040 808b 	bne.w	8003890 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fd6c 	bl	8001258 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003780:	f241 3188 	movw	r1, #5000	; 0x1388
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f88b 	bl	80038a0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <HAL_OSPI_Init+0x150>)
 8003792:	4013      	ands	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68d1      	ldr	r1, [r2, #12]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6912      	ldr	r2, [r2, #16]
 800379c:	3a01      	subs	r2, #1
 800379e:	0412      	lsls	r2, r2, #16
 80037a0:	4311      	orrs	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6952      	ldr	r2, [r2, #20]
 80037a6:	3a01      	subs	r2, #1
 80037a8:	0212      	lsls	r2, r2, #8
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037b0:	4311      	orrs	r1, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	69d2      	ldr	r2, [r2, #28]
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0412      	lsls	r2, r2, #16
 80037ca:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	021a      	lsls	r2, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	2120      	movs	r1, #32
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fb98 	bl	8003f28 <OSPI_WaitFlagStateUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d146      	bne.n	8003890 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	1e5a      	subs	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003838:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d107      	bne.n	8003878 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0202 	orr.w	r2, r2, #2
 8003876:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003880:	d103      	bne.n	800388a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
 8003888:	e002      	b.n	8003890 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003890:	7bfb      	ldrb	r3, [r7, #15]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	f8e0f8f4 	.word	0xf8e0f8f4

080038a0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b092      	sub	sp, #72	; 0x48
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_OSPIM_Config+0x40>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d105      	bne.n	80038ee <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80038ec:	e004      	b.n	80038f8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80038ee:	2301      	movs	r3, #1
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80038fe:	e01f      	b.n	8003940 <HAL_OSPIM_Config+0x80>
 8003900:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003904:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003908:	3301      	adds	r3, #1
 800390a:	b2d8      	uxtb	r0, r3
 800390c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003910:	f107 0114 	add.w	r1, r7, #20
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	4619      	mov	r1, r3
 8003920:	f000 fb3a 	bl	8003f98 <OSPIM_GetConfig>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2208      	movs	r2, #8
 8003934:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800393a:	3301      	adds	r3, #1
 800393c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003944:	2b01      	cmp	r3, #1
 8003946:	d9dd      	bls.n	8003904 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 82de 	bne.w	8003f0e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003952:	4bc6      	ldr	r3, [pc, #792]	; (8003c6c <HAL_OSPIM_Config+0x3ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800395e:	4bc3      	ldr	r3, [pc, #780]	; (8003c6c <HAL_OSPIM_Config+0x3ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4ac2      	ldr	r2, [pc, #776]	; (8003c6c <HAL_OSPIM_Config+0x3ac>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800396a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003976:	4bbe      	ldr	r3, [pc, #760]	; (8003c70 <HAL_OSPIM_Config+0x3b0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003982:	4bbb      	ldr	r3, [pc, #748]	; (8003c70 <HAL_OSPIM_Config+0x3b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4aba      	ldr	r2, [pc, #744]	; (8003c70 <HAL_OSPIM_Config+0x3b0>)
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800398e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800399a:	49b6      	ldr	r1, [pc, #728]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 800399c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3348      	adds	r3, #72	; 0x48
 80039a8:	443b      	add	r3, r7
 80039aa:	3b2c      	subs	r3, #44	; 0x2c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	48af      	ldr	r0, [pc, #700]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 80039b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	3348      	adds	r3, #72	; 0x48
 80039c4:	443b      	add	r3, r7
 80039c6:	3b2c      	subs	r3, #44	; 0x2c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4403      	add	r3, r0
 80039d4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80039d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	3348      	adds	r3, #72	; 0x48
 80039e2:	443b      	add	r3, r7
 80039e4:	3b34      	subs	r3, #52	; 0x34
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a1 	beq.w	8003b30 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80039ee:	49a1      	ldr	r1, [pc, #644]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 80039f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	443b      	add	r3, r7
 80039fe:	3b34      	subs	r3, #52	; 0x34
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	489a      	ldr	r0, [pc, #616]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3348      	adds	r3, #72	; 0x48
 8003a18:	443b      	add	r3, r7
 8003a1a:	3b34      	subs	r3, #52	; 0x34
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f021 0201 	bic.w	r2, r1, #1
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	3348      	adds	r3, #72	; 0x48
 8003a36:	443b      	add	r3, r7
 8003a38:	3b30      	subs	r3, #48	; 0x30
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01d      	beq.n	8003a7c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003a40:	498c      	ldr	r1, [pc, #560]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	3348      	adds	r3, #72	; 0x48
 8003a4e:	443b      	add	r3, r7
 8003a50:	3b30      	subs	r3, #48	; 0x30
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	4885      	ldr	r0, [pc, #532]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	3348      	adds	r3, #72	; 0x48
 8003a6a:	443b      	add	r3, r7
 8003a6c:	3b30      	subs	r3, #48	; 0x30
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	f021 0210 	bic.w	r2, r1, #16
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4403      	add	r3, r0
 8003a7a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	3348      	adds	r3, #72	; 0x48
 8003a88:	443b      	add	r3, r7
 8003a8a:	3b28      	subs	r3, #40	; 0x28
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d021      	beq.n	8003ad6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003a92:	4978      	ldr	r1, [pc, #480]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3348      	adds	r3, #72	; 0x48
 8003aa0:	443b      	add	r3, r7
 8003aa2:	3b28      	subs	r3, #40	; 0x28
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	4870      	ldr	r0, [pc, #448]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003ab4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3348      	adds	r3, #72	; 0x48
 8003ac0:	443b      	add	r3, r7
 8003ac2:	3b28      	subs	r3, #40	; 0x28
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4403      	add	r3, r0
 8003ad4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3348      	adds	r3, #72	; 0x48
 8003ae2:	443b      	add	r3, r7
 8003ae4:	3b24      	subs	r3, #36	; 0x24
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d021      	beq.n	8003b30 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003aec:	4961      	ldr	r1, [pc, #388]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3348      	adds	r3, #72	; 0x48
 8003afa:	443b      	add	r3, r7
 8003afc:	3b24      	subs	r3, #36	; 0x24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	4859      	ldr	r0, [pc, #356]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	3348      	adds	r3, #72	; 0x48
 8003b1a:	443b      	add	r3, r7
 8003b1c:	3b24      	subs	r3, #36	; 0x24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6819      	ldr	r1, [r3, #0]
 8003b34:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3348      	adds	r3, #72	; 0x48
 8003b42:	443b      	add	r3, r7
 8003b44:	3b34      	subs	r3, #52	; 0x34
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	d038      	beq.n	8003bbe <HAL_OSPIM_Config+0x2fe>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3348      	adds	r3, #72	; 0x48
 8003b5e:	443b      	add	r3, r7
 8003b60:	3b30      	subs	r3, #48	; 0x30
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d02a      	beq.n	8003bbe <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6899      	ldr	r1, [r3, #8]
 8003b6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	3348      	adds	r3, #72	; 0x48
 8003b7a:	443b      	add	r3, r7
 8003b7c:	3b2c      	subs	r3, #44	; 0x2c
 8003b7e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003b80:	4299      	cmp	r1, r3
 8003b82:	d01c      	beq.n	8003bbe <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	68d9      	ldr	r1, [r3, #12]
 8003b88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	3348      	adds	r3, #72	; 0x48
 8003b96:	443b      	add	r3, r7
 8003b98:	3b28      	subs	r3, #40	; 0x28
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4299      	cmp	r1, r3
 8003b9e:	d00e      	beq.n	8003bbe <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6919      	ldr	r1, [r3, #16]
 8003ba4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	3348      	adds	r3, #72	; 0x48
 8003bb2:	443b      	add	r3, r7
 8003bb4:	3b24      	subs	r3, #36	; 0x24
 8003bb6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003bb8:	4299      	cmp	r1, r3
 8003bba:	f040 80d3 	bne.w	8003d64 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003bbe:	492d      	ldr	r1, [pc, #180]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003bc0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3348      	adds	r3, #72	; 0x48
 8003bce:	443b      	add	r3, r7
 8003bd0:	3b34      	subs	r3, #52	; 0x34
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	4825      	ldr	r0, [pc, #148]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003bde:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3348      	adds	r3, #72	; 0x48
 8003bec:	443b      	add	r3, r7
 8003bee:	3b34      	subs	r3, #52	; 0x34
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	f021 0201 	bic.w	r2, r1, #1
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4403      	add	r3, r0
 8003bfc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003bfe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3348      	adds	r3, #72	; 0x48
 8003c0c:	443b      	add	r3, r7
 8003c0e:	3b30      	subs	r3, #48	; 0x30
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01f      	beq.n	8003c56 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003c16:	4917      	ldr	r1, [pc, #92]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003c18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3348      	adds	r3, #72	; 0x48
 8003c26:	443b      	add	r3, r7
 8003c28:	3b30      	subs	r3, #48	; 0x30
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	480f      	ldr	r0, [pc, #60]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003c36:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3348      	adds	r3, #72	; 0x48
 8003c44:	443b      	add	r3, r7
 8003c46:	3b30      	subs	r3, #48	; 0x30
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	f021 0210 	bic.w	r2, r1, #16
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4403      	add	r3, r0
 8003c54:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003c56:	4907      	ldr	r1, [pc, #28]	; (8003c74 <HAL_OSPIM_Config+0x3b4>)
 8003c58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	3348      	adds	r3, #72	; 0x48
 8003c66:	443b      	add	r3, r7
 8003c68:	3b2c      	subs	r3, #44	; 0x2c
 8003c6a:	e005      	b.n	8003c78 <HAL_OSPIM_Config+0x3b8>
 8003c6c:	a0001000 	.word	0xa0001000
 8003c70:	a0001400 	.word	0xa0001400
 8003c74:	50061c00 	.word	0x50061c00
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	48a6      	ldr	r0, [pc, #664]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003c84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3348      	adds	r3, #72	; 0x48
 8003c92:	443b      	add	r3, r7
 8003c94:	3b2c      	subs	r3, #44	; 0x2c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4403      	add	r3, r0
 8003ca2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003ca4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3348      	adds	r3, #72	; 0x48
 8003cb2:	443b      	add	r3, r7
 8003cb4:	3b28      	subs	r3, #40	; 0x28
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d023      	beq.n	8003d04 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003cbc:	4997      	ldr	r1, [pc, #604]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003cbe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	3348      	adds	r3, #72	; 0x48
 8003ccc:	443b      	add	r3, r7
 8003cce:	3b28      	subs	r3, #40	; 0x28
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	488f      	ldr	r0, [pc, #572]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003ce0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	3348      	adds	r3, #72	; 0x48
 8003cee:	443b      	add	r3, r7
 8003cf0:	3b28      	subs	r3, #40	; 0x28
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4403      	add	r3, r0
 8003d02:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003d04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	443b      	add	r3, r7
 8003d14:	3b24      	subs	r3, #36	; 0x24
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d023      	beq.n	8003d64 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003d1c:	497f      	ldr	r1, [pc, #508]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003d1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	3348      	adds	r3, #72	; 0x48
 8003d2c:	443b      	add	r3, r7
 8003d2e:	3b24      	subs	r3, #36	; 0x24
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	4877      	ldr	r0, [pc, #476]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003d40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3348      	adds	r3, #72	; 0x48
 8003d4e:	443b      	add	r3, r7
 8003d50:	3b24      	subs	r3, #36	; 0x24
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4403      	add	r3, r0
 8003d62:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003d64:	4a6d      	ldr	r2, [pc, #436]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	4967      	ldr	r1, [pc, #412]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003d8e:	4a63      	ldr	r2, [pc, #396]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 0203 	bic.w	r2, r3, #3
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	495d      	ldr	r1, [pc, #372]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d014      	beq.n	8003dea <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003dc0:	4a56      	ldr	r2, [pc, #344]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	015b      	lsls	r3, r3, #5
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	4950      	ldr	r1, [pc, #320]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	f042 0210 	orr.w	r2, r2, #16
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d019      	beq.n	8003e2a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003df6:	4a49      	ldr	r2, [pc, #292]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0e:	049b      	lsls	r3, r3, #18
 8003e10:	431a      	orrs	r2, r3
 8003e12:	4942      	ldr	r1, [pc, #264]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	e01c      	b.n	8003e64 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003e32:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4a:	069b      	lsls	r3, r3, #26
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	4933      	ldr	r1, [pc, #204]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d019      	beq.n	8003ea4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e88:	049b      	lsls	r3, r3, #18
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	4923      	ldr	r1, [pc, #140]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	e01c      	b.n	8003ede <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003eac:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	4914      	ldr	r1, [pc, #80]	; (8003f1c <HAL_OSPIM_Config+0x65c>)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003ede:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <HAL_OSPIM_Config+0x660>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <HAL_OSPIM_Config+0x660>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003ef6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_OSPIM_Config+0x664>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_OSPIM_Config+0x664>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003f0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3748      	adds	r7, #72	; 0x48
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	50061c00 	.word	0x50061c00
 8003f20:	a0001000 	.word	0xa0001000
 8003f24:	a0001400 	.word	0xa0001400

08003f28 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003f38:	e01a      	b.n	8003f70 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d016      	beq.n	8003f70 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fd fc91 	bl	8001868 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00e      	b.n	8003f8e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1d6      	bne.n	8003f3a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <OSPIM_GetConfig+0x26>
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d802      	bhi.n	8003fbe <OSPIM_GetConfig+0x26>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d102      	bne.n	8003fc4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]
 8003fc2:	e08e      	b.n	80040e2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d101      	bne.n	8003fec <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <OSPIM_GetConfig+0x158>)
 8003fea:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e074      	b.n	80040dc <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003ff2:	4a40      	ldr	r2, [pc, #256]	; (80040f4 <OSPIM_GetConfig+0x15c>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4053      	eors	r3, r2
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4053      	eors	r3, r2
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4053      	eors	r3, r2
 800404e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d018      	beq.n	800409a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4053      	eors	r3, r2
 800406e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d111      	bne.n	800409a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d106      	bne.n	800408e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	e005      	b.n	800409a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d018      	beq.n	80040d6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4053      	eors	r3, r2
 80040aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d111      	bne.n	80040d6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3301      	adds	r3, #1
 80040c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	611a      	str	r2, [r3, #16]
 80040c8:	e005      	b.n	80040d6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3301      	adds	r3, #1
 80040ce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d987      	bls.n	8003ff2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	04040222 	.word	0x04040222
 80040f4:	50061c00 	.word	0x50061c00

080040f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40007000 	.word	0x40007000

08004118 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <HAL_PWREx_GetVoltageRange+0x3c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d102      	bne.n	8004130 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800412a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800412e:	e00b      	b.n	8004148 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d102      	bne.n	8004146 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004144:	e000      	b.n	8004148 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004146:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40007000 	.word	0x40007000

08004158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d141      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004166:	4b4b      	ldr	r3, [pc, #300]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d131      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800417c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004184:	4b43      	ldr	r3, [pc, #268]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800418c:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004194:	4b40      	ldr	r3, [pc, #256]	; (8004298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2232      	movs	r2, #50	; 0x32
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	4a3f      	ldr	r2, [pc, #252]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	0c9b      	lsrs	r3, r3, #18
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041aa:	e002      	b.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041be:	d102      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f2      	bne.n	80041ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d158      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e057      	b.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041d8:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041e8:	e04d      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f0:	d141      	bne.n	8004276 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d131      	bne.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004218:	4a1e      	ldr	r2, [pc, #120]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800421e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2232      	movs	r2, #50	; 0x32
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	0c9b      	lsrs	r3, r3, #18
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004236:	e002      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3b01      	subs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800423e:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	d102      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f2      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425e:	d112      	bne.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e011      	b.n	8004288 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004274:	e007      	b.n	8004286 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004284:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40007000 	.word	0x40007000
 8004298:	20000000 	.word	0x20000000
 800429c:	431bde83 	.word	0x431bde83

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f000 bc08 	b.w	8004ac4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b4:	4b96      	ldr	r3, [pc, #600]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042be:	4b94      	ldr	r3, [pc, #592]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80e4 	beq.w	800449e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <HAL_RCC_OscConfig+0x4c>
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	f040 808b 	bne.w	80043fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	f040 8087 	bne.w	80043fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ec:	4b88      	ldr	r3, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x64>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e3df      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1a      	ldr	r2, [r3, #32]
 8004308:	4b81      	ldr	r3, [pc, #516]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_RCC_OscConfig+0x7e>
 8004314:	4b7e      	ldr	r3, [pc, #504]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431c:	e005      	b.n	800432a <HAL_RCC_OscConfig+0x8a>
 800431e:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432a:	4293      	cmp	r3, r2
 800432c:	d223      	bcs.n	8004376 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fdcc 	bl	8004ed0 <RCC_SetFlashLatencyFromMSIRange>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e3c0      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a72      	ldr	r2, [pc, #456]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004348:	f043 0308 	orr.w	r3, r3, #8
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	496d      	ldr	r1, [pc, #436]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004360:	4b6b      	ldr	r3, [pc, #428]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	4968      	ldr	r1, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	e025      	b.n	80043c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004376:	4b66      	ldr	r3, [pc, #408]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a65      	ldr	r2, [pc, #404]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	4b63      	ldr	r3, [pc, #396]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4960      	ldr	r1, [pc, #384]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004394:	4b5e      	ldr	r3, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	495b      	ldr	r1, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fd8c 	bl	8004ed0 <RCC_SetFlashLatencyFromMSIRange>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e380      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c2:	f000 fcc1 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 80043c6:	4602      	mov	r2, r0
 80043c8:	4b51      	ldr	r3, [pc, #324]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	4950      	ldr	r1, [pc, #320]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80043d4:	5ccb      	ldrb	r3, [r1, r3]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	fa22 f303 	lsr.w	r3, r2, r3
 80043de:	4a4e      	ldr	r2, [pc, #312]	; (8004518 <HAL_RCC_OscConfig+0x278>)
 80043e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043e2:	4b4e      	ldr	r3, [pc, #312]	; (800451c <HAL_RCC_OscConfig+0x27c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd f9ee 	bl	80017c8 <HAL_InitTick>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d052      	beq.n	800449c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	e364      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d032      	beq.n	8004468 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a42      	ldr	r2, [pc, #264]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800440e:	f7fd fa2b 	bl	8001868 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004416:	f7fd fa27 	bl	8001868 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e34d      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004428:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a35      	ldr	r2, [pc, #212]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800443a:	f043 0308 	orr.w	r3, r3, #8
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b33      	ldr	r3, [pc, #204]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4930      	ldr	r1, [pc, #192]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800444e:	4313      	orrs	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	492b      	ldr	r1, [pc, #172]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
 8004466:	e01a      	b.n	800449e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004468:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004474:	f7fd f9f8 	bl	8001868 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800447c:	f7fd f9f4 	bl	8001868 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e31a      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1dc>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d073      	beq.n	8004592 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_OscConfig+0x21c>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d10e      	bne.n	80044d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d10b      	bne.n	80044d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d063      	beq.n	8004590 <HAL_RCC_OscConfig+0x2f0>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d15f      	bne.n	8004590 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e2f7      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x24c>
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e025      	b.n	8004538 <HAL_RCC_OscConfig+0x298>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f4:	d114      	bne.n	8004520 <HAL_RCC_OscConfig+0x280>
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a05      	ldr	r2, [pc, #20]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a02      	ldr	r2, [pc, #8]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e013      	b.n	8004538 <HAL_RCC_OscConfig+0x298>
 8004510:	40021000 	.word	0x40021000
 8004514:	08006860 	.word	0x08006860
 8004518:	20000000 	.word	0x20000000
 800451c:	20000004 	.word	0x20000004
 8004520:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a9f      	ldr	r2, [pc, #636]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b9d      	ldr	r3, [pc, #628]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a9c      	ldr	r2, [pc, #624]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd f992 	bl	8001868 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd f98e 	bl	8001868 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e2b4      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455a:	4b92      	ldr	r3, [pc, #584]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x2a8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd f97e 	bl	8001868 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fd f97a 	bl	8001868 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e2a0      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004582:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x2d0>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d060      	beq.n	8004660 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_OscConfig+0x310>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d119      	bne.n	80045de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d116      	bne.n	80045de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b0:	4b7c      	ldr	r3, [pc, #496]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x328>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e27d      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	4973      	ldr	r1, [pc, #460]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	e040      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d023      	beq.n	800462e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e6:	4b6f      	ldr	r3, [pc, #444]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6e      	ldr	r2, [pc, #440]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd f939 	bl	8001868 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd f935 	bl	8001868 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e25b      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800460c:	4b65      	ldr	r3, [pc, #404]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	495f      	ldr	r1, [pc, #380]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
 800462c:	e018      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5c      	ldr	r2, [pc, #368]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fd f915 	bl	8001868 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fd f911 	bl	8001868 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e237      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d03c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01c      	beq.n	80046ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004674:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fd f8f0 	bl	8001868 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468c:	f7fd f8ec 	bl	8001868 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e212      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469e:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80046a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ef      	beq.n	800468c <HAL_RCC_OscConfig+0x3ec>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b3d      	ldr	r3, [pc, #244]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b4:	4a3b      	ldr	r2, [pc, #236]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fd f8d3 	bl	8001868 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c6:	f7fd f8cf 	bl	8001868 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e1f5      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d8:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80046da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80a6 	beq.w	8004840 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	; 0x58
 8004710:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <HAL_RCC_OscConfig+0x508>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d118      	bne.n	800475e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472c:	4b1e      	ldr	r3, [pc, #120]	; (80047a8 <HAL_RCC_OscConfig+0x508>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_RCC_OscConfig+0x508>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004738:	f7fd f896 	bl	8001868 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004740:	f7fd f892 	bl	8001868 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1b8      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <HAL_RCC_OscConfig+0x508>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d108      	bne.n	8004778 <HAL_RCC_OscConfig+0x4d8>
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004776:	e029      	b.n	80047cc <HAL_RCC_OscConfig+0x52c>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d115      	bne.n	80047ac <HAL_RCC_OscConfig+0x50c>
 8004780:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a03      	ldr	r2, [pc, #12]	; (80047a4 <HAL_RCC_OscConfig+0x504>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a0:	e014      	b.n	80047cc <HAL_RCC_OscConfig+0x52c>
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40007000 	.word	0x40007000
 80047ac:	4b9d      	ldr	r3, [pc, #628]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a9c      	ldr	r2, [pc, #624]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	4b99      	ldr	r3, [pc, #612]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	4a98      	ldr	r2, [pc, #608]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d016      	beq.n	8004802 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd f848 	bl	8001868 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fd f844 	bl	8001868 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e168      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ed      	beq.n	80047dc <HAL_RCC_OscConfig+0x53c>
 8004800:	e015      	b.n	800482e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004802:	f7fd f831 	bl	8001868 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fd f82d 	bl	8001868 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e151      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004820:	4b80      	ldr	r3, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1ed      	bne.n	800480a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d105      	bne.n	8004840 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004834:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	4a7a      	ldr	r2, [pc, #488]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 800483a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d03c      	beq.n	80048c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004854:	4b73      	ldr	r3, [pc, #460]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485a:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f800 	bl	8001868 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800486c:	f7fc fffc 	bl	8001868 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e122      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487e:	4b69      	ldr	r3, [pc, #420]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <HAL_RCC_OscConfig+0x5cc>
 800488c:	e01b      	b.n	80048c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800488e:	4b65      	ldr	r3, [pc, #404]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004894:	4a63      	ldr	r2, [pc, #396]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fc ffe3 	bl	8001868 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a6:	f7fc ffdf 	bl	8001868 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e105      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b8:	4b5a      	ldr	r3, [pc, #360]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80048ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1ef      	bne.n	80048a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80f9 	beq.w	8004ac2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	f040 80cf 	bne.w	8004a78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048da:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d12c      	bne.n	8004948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	3b01      	subs	r3, #1
 80048fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d123      	bne.n	8004948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d11b      	bne.n	8004948 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d113      	bne.n	8004948 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	3b01      	subs	r3, #1
 800492e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d109      	bne.n	8004948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d071      	beq.n	8004a2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d068      	beq.n	8004a20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800494e:	4b35      	ldr	r3, [pc, #212]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800495a:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0ac      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800496a:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004974:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004976:	f7fc ff77 	bl	8001868 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497e:	f7fc ff73 	bl	8001868 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e099      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004990:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800499c:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x788>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049ac:	3a01      	subs	r2, #1
 80049ae:	0112      	lsls	r2, r2, #4
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049b6:	0212      	lsls	r2, r2, #8
 80049b8:	4311      	orrs	r1, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049be:	0852      	lsrs	r2, r2, #1
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0552      	lsls	r2, r2, #21
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ca:	0852      	lsrs	r2, r2, #1
 80049cc:	3a01      	subs	r2, #1
 80049ce:	0652      	lsls	r2, r2, #25
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d6:	06d2      	lsls	r2, r2, #27
 80049d8:	430a      	orrs	r2, r1
 80049da:	4912      	ldr	r1, [pc, #72]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049e0:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0f      	ldr	r2, [pc, #60]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f8:	f7fc ff36 	bl	8001868 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fc ff32 	bl	8001868 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e058      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_RCC_OscConfig+0x784>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a1e:	e050      	b.n	8004ac2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e04f      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d144      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a38:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a50:	f7fc ff0a 	bl	8001868 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a58:	f7fc ff06 	bl	8001868 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e02c      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6a:	4b18      	ldr	r3, [pc, #96]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0f0      	beq.n	8004a58 <HAL_RCC_OscConfig+0x7b8>
 8004a76:	e024      	b.n	8004ac2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d01f      	beq.n	8004abe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fc feed 	bl	8001868 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fc fee9 	bl	8001868 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e00f      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	4905      	ldr	r1, [pc, #20]	; (8004acc <HAL_RCC_OscConfig+0x82c>)
 8004ab6:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_OscConfig+0x830>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60cb      	str	r3, [r1, #12]
 8004abc:	e001      	b.n	8004ac2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	feeefffc 	.word	0xfeeefffc

08004ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e11d      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aec:	4b90      	ldr	r3, [pc, #576]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 030f 	and.w	r3, r3, #15
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d910      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afa:	4b8d      	ldr	r3, [pc, #564]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 020f 	bic.w	r2, r3, #15
 8004b02:	498b      	ldr	r1, [pc, #556]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b89      	ldr	r3, [pc, #548]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e105      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	4b81      	ldr	r3, [pc, #516]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d908      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b38:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	497b      	ldr	r1, [pc, #492]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d079      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d11e      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	4b75      	ldr	r3, [pc, #468]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0dc      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b6e:	f000 fa09 	bl	8004f84 <RCC_GetSysClockFreqFromPLLSource>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a70      	ldr	r2, [pc, #448]	; (8004d38 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d946      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b7a:	4b6e      	ldr	r3, [pc, #440]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d140      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b86:	4b6b      	ldr	r3, [pc, #428]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8e:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e035      	b.n	8004c08 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba4:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b9      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bbc:	4b5d      	ldr	r3, [pc, #372]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0ad      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0a5      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004bdc:	f000 f8b4 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a55      	ldr	r2, [pc, #340]	; (8004d38 <HAL_RCC_ClockConfig+0x264>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d90f      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004be8:	4b52      	ldr	r3, [pc, #328]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfc:	4a4d      	ldr	r2, [pc, #308]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c08:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 0203 	bic.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4947      	ldr	r1, [pc, #284]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1a:	f7fc fe25 	bl	8001868 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c22:	f7fc fe21 	bl	8001868 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e077      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c38:	4b3e      	ldr	r3, [pc, #248]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 020c 	and.w	r2, r3, #12
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d1eb      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b80      	cmp	r3, #128	; 0x80
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c50:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4a37      	ldr	r2, [pc, #220]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c5a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d208      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b2e      	ldr	r3, [pc, #184]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	492b      	ldr	r1, [pc, #172]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d210      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c98:	4b25      	ldr	r3, [pc, #148]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f023 020f 	bic.w	r2, r3, #15
 8004ca0:	4923      	ldr	r1, [pc, #140]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCC_ClockConfig+0x25c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d001      	beq.n	8004cba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e036      	b.n	8004d28 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4918      	ldr	r1, [pc, #96]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4910      	ldr	r1, [pc, #64]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf8:	f000 f826 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_RCC_ClockConfig+0x260>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <HAL_RCC_ClockConfig+0x268>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_RCC_ClockConfig+0x26c>)
 8004d16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <HAL_RCC_ClockConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc fd53 	bl	80017c8 <HAL_InitTick>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40021000 	.word	0x40021000
 8004d38:	04c4b400 	.word	0x04c4b400
 8004d3c:	08006860 	.word	0x08006860
 8004d40:	20000000 	.word	0x20000000
 8004d44:	20000004 	.word	0x20000004

08004d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d60:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x34>
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b0c      	cmp	r3, #12
 8004d74:	d121      	bne.n	8004dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d11e      	bne.n	8004dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d7c:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d88:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e005      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d98:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dc0:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e004      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dcc:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d134      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd6:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d003      	beq.n	8004dee <HAL_RCC_GetSysClockFreq+0xa6>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d003      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0xac>
 8004dec:	e005      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dee:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8004df0:	617b      	str	r3, [r7, #20]
      break;
 8004df2:	e005      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8004df6:	617b      	str	r3, [r7, #20]
      break;
 8004df8:	e002      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	617b      	str	r3, [r7, #20]
      break;
 8004dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e00:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	fb03 f202 	mul.w	r2, r3, r2
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	0e5b      	lsrs	r3, r3, #25
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	3301      	adds	r3, #1
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e40:	69bb      	ldr	r3, [r7, #24]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3724      	adds	r7, #36	; 0x24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	08006878 	.word	0x08006878
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	007a1200 	.word	0x007a1200

08004e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4904      	ldr	r1, [pc, #16]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	08006870 	.word	0x08006870

08004ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea8:	f7ff ffda 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0adb      	lsrs	r3, r3, #11
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4904      	ldr	r1, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	08006870 	.word	0x08006870

08004ed0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ee8:	f7ff f916 	bl	8004118 <HAL_PWREx_GetVoltageRange>
 8004eec:	6178      	str	r0, [r7, #20]
 8004eee:	e014      	b.n	8004f1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	6593      	str	r3, [r2, #88]	; 0x58
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f08:	f7ff f906 	bl	8004118 <HAL_PWREx_GetVoltageRange>
 8004f0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d10b      	bne.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d913      	bls.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f2c:	d902      	bls.n	8004f34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f2e:	2302      	movs	r3, #2
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00d      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e00a      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3e:	d902      	bls.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f40:	2302      	movs	r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e004      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b70      	cmp	r3, #112	; 0x70
 8004f4a:	d101      	bne.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 020f 	bic.w	r2, r3, #15
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d001      	beq.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40022000 	.word	0x40022000

08004f84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d00b      	beq.n	8004fb2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d825      	bhi.n	8004fec <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d008      	beq.n	8004fb8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11f      	bne.n	8004fec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fae:	613b      	str	r3, [r7, #16]
    break;
 8004fb0:	e01f      	b.n	8004ff2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004fb2:	4b25      	ldr	r3, [pc, #148]	; (8005048 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004fb4:	613b      	str	r3, [r7, #16]
    break;
 8004fb6:	e01c      	b.n	8004ff2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fb8:	4b21      	ldr	r3, [pc, #132]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e005      	b.n	8004fe0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe8:	613b      	str	r3, [r7, #16]
    break;
 8004fea:	e002      	b.n	8004ff2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
    break;
 8004ff0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	fb03 f202 	mul.w	r2, r3, r2
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	0e5b      	lsrs	r3, r3, #25
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005032:	683b      	ldr	r3, [r7, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	40021000 	.word	0x40021000
 8005044:	00f42400 	.word	0x00f42400
 8005048:	007a1200 	.word	0x007a1200
 800504c:	08006878 	.word	0x08006878

08005050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005058:	2300      	movs	r3, #0
 800505a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800505c:	2300      	movs	r3, #0
 800505e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005068:	2b00      	cmp	r3, #0
 800506a:	d040      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d02a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005074:	2b80      	cmp	r3, #128	; 0x80
 8005076:	d825      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d026      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d821      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d006      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d81d      	bhi.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d010      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005090:	e018      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005092:	4b89      	ldr	r3, [pc, #548]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	4a88      	ldr	r2, [pc, #544]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509e:	e015      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fb12 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3320      	adds	r3, #32
 80050b6:	2100      	movs	r1, #0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 fbfd 	bl	80058b8 <RCCEx_PLLSAI2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050c2:	e003      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	74fb      	strb	r3, [r7, #19]
      break;
 80050c8:	e000      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80050ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050d2:	4b79      	ldr	r3, [pc, #484]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	4975      	ldr	r1, [pc, #468]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050e8:	e001      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d047      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005102:	d030      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005108:	d82a      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800510a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510e:	d02a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d824      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511a:	d008      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d81e      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d010      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800512c:	e018      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800513a:	e015      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2100      	movs	r1, #0
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fac4 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514c:	e00c      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3320      	adds	r3, #32
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fbaf 	bl	80058b8 <RCCEx_PLLSAI2_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	74fb      	strb	r3, [r7, #19]
      break;
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800516e:	4b52      	ldr	r3, [pc, #328]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005170:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	494e      	ldr	r1, [pc, #312]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005184:	e001      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 809f 	beq.w	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800519c:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80051ac:	2300      	movs	r3, #0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	4b41      	ldr	r3, [pc, #260]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b6:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6593      	str	r3, [r2, #88]	; 0x58
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ce:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3a      	ldr	r2, [pc, #232]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051da:	f7fc fb45 	bl	8001868 <HAL_GetTick>
 80051de:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051e0:	e009      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fc fb41 	bl	8001868 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d902      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	74fb      	strb	r3, [r7, #19]
        break;
 80051f4:	e005      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f6:	4b31      	ldr	r3, [pc, #196]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0ef      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005202:	7cfb      	ldrb	r3, [r7, #19]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d15b      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005208:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01f      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	429a      	cmp	r2, r3
 8005224:	d019      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005230:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800524a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005252:	4a19      	ldr	r2, [pc, #100]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fc fb00 	bl	8001868 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526a:	e00b      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fc fafc 	bl	8001868 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d902      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	74fb      	strb	r3, [r7, #19]
            break;
 8005282:	e006      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d0ec      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10c      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052b0:	e008      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	74bb      	strb	r3, [r7, #18]
 80052b6:	e005      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c4:	7c7b      	ldrb	r3, [r7, #17]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d105      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ca:	4ba0      	ldr	r3, [pc, #640]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a9f      	ldr	r2, [pc, #636]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e2:	4b9a      	ldr	r3, [pc, #616]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 0203 	bic.w	r2, r3, #3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f0:	4996      	ldr	r1, [pc, #600]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005304:	4b91      	ldr	r3, [pc, #580]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f023 020c 	bic.w	r2, r3, #12
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	498e      	ldr	r1, [pc, #568]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005326:	4b89      	ldr	r3, [pc, #548]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	4985      	ldr	r1, [pc, #532]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005348:	4b80      	ldr	r3, [pc, #512]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	497d      	ldr	r1, [pc, #500]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800536a:	4b78      	ldr	r3, [pc, #480]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	4974      	ldr	r1, [pc, #464]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	496c      	ldr	r1, [pc, #432]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ae:	4b67      	ldr	r3, [pc, #412]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053bc:	4963      	ldr	r1, [pc, #396]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d0:	4b5e      	ldr	r3, [pc, #376]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053de:	495b      	ldr	r1, [pc, #364]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f2:	4b56      	ldr	r3, [pc, #344]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	4952      	ldr	r1, [pc, #328]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005414:	4b4d      	ldr	r3, [pc, #308]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	494a      	ldr	r1, [pc, #296]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005436:	4b45      	ldr	r3, [pc, #276]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005444:	4941      	ldr	r1, [pc, #260]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005458:	4b3c      	ldr	r3, [pc, #240]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545e:	f023 0203 	bic.w	r2, r3, #3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	4939      	ldr	r1, [pc, #228]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d028      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800547a:	4b34      	ldr	r3, [pc, #208]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	4930      	ldr	r1, [pc, #192]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005498:	d106      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800549a:	4b2c      	ldr	r3, [pc, #176]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	4a2b      	ldr	r2, [pc, #172]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a4:	60d3      	str	r3, [r2, #12]
 80054a6:	e011      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2101      	movs	r1, #1
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 f909 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d04d      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e0:	d108      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e8:	4a18      	ldr	r2, [pc, #96]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054f2:	e012      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054f4:	4b15      	ldr	r3, [pc, #84]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005500:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005504:	4b11      	ldr	r3, [pc, #68]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005512:	490e      	ldr	r1, [pc, #56]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005522:	d106      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552e:	60d3      	str	r3, [r2, #12]
 8005530:	e020      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800553a:	d109      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4a02      	ldr	r2, [pc, #8]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005546:	60d3      	str	r3, [r2, #12]
 8005548:	e014      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005558:	d10c      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f000 f8b5 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556a:	7cfb      	ldrb	r3, [r7, #19]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d028      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005580:	4b4a      	ldr	r3, [pc, #296]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558e:	4947      	ldr	r1, [pc, #284]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800559a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559e:	d106      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a0:	4b42      	ldr	r3, [pc, #264]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a41      	ldr	r2, [pc, #260]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055aa:	60d3      	str	r3, [r2, #12]
 80055ac:	e011      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f886 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055de:	4b33      	ldr	r3, [pc, #204]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ee:	492f      	ldr	r1, [pc, #188]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005600:	d10c      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	2102      	movs	r1, #2
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f861 	bl	80056d0 <RCCEx_PLLSAI1_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005628:	4b20      	ldr	r3, [pc, #128]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800562a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562e:	f023 0204 	bic.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005638:	491c      	ldr	r1, [pc, #112]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800564c:	4b17      	ldr	r3, [pc, #92]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005652:	f023 0218 	bic.w	r2, r3, #24
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	4913      	ldr	r1, [pc, #76]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	490a      	ldr	r1, [pc, #40]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005692:	d105      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005694:	4b05      	ldr	r3, [pc, #20]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4a04      	ldr	r2, [pc, #16]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800569e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000

080056b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000

080056d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056de:	4b72      	ldr	r3, [pc, #456]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056ea:	4b6f      	ldr	r3, [pc, #444]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0203 	and.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d103      	bne.n	8005702 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
       ||
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d142      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
 8005706:	e03f      	b.n	8005788 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d018      	beq.n	8005742 <RCCEx_PLLSAI1_Config+0x72>
 8005710:	2b03      	cmp	r3, #3
 8005712:	d825      	bhi.n	8005760 <RCCEx_PLLSAI1_Config+0x90>
 8005714:	2b01      	cmp	r3, #1
 8005716:	d002      	beq.n	800571e <RCCEx_PLLSAI1_Config+0x4e>
 8005718:	2b02      	cmp	r3, #2
 800571a:	d009      	beq.n	8005730 <RCCEx_PLLSAI1_Config+0x60>
 800571c:	e020      	b.n	8005760 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800571e:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d11d      	bne.n	8005766 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572e:	e01a      	b.n	8005766 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005730:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d116      	bne.n	800576a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005740:	e013      	b.n	800576a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005742:	4b59      	ldr	r3, [pc, #356]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10f      	bne.n	800576e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800574e:	4b56      	ldr	r3, [pc, #344]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800575e:	e006      	b.n	800576e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e004      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800576e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d108      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005776:	4b4c      	ldr	r3, [pc, #304]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4949      	ldr	r1, [pc, #292]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005784:	4313      	orrs	r3, r2
 8005786:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 8086 	bne.w	800589c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a44      	ldr	r2, [pc, #272]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800579a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579c:	f7fc f864 	bl	8001868 <HAL_GetTick>
 80057a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057a2:	e009      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057a4:	f7fc f860 	bl	8001868 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d902      	bls.n	80057b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	73fb      	strb	r3, [r7, #15]
        break;
 80057b6:	e005      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057b8:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ef      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d168      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d113      	bne.n	80057f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	4b35      	ldr	r3, [pc, #212]	; (80058ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	0211      	lsls	r1, r2, #8
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	06d2      	lsls	r2, r2, #27
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6852      	ldr	r2, [r2, #4]
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	430a      	orrs	r2, r1
 80057f0:	492d      	ldr	r1, [pc, #180]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]
 80057f6:	e02d      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d115      	bne.n	800582a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fe:	4b2a      	ldr	r3, [pc, #168]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	0211      	lsls	r1, r2, #8
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6912      	ldr	r2, [r2, #16]
 8005810:	0852      	lsrs	r2, r2, #1
 8005812:	3a01      	subs	r2, #1
 8005814:	0552      	lsls	r2, r2, #21
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6852      	ldr	r2, [r2, #4]
 800581c:	3a01      	subs	r2, #1
 800581e:	0112      	lsls	r2, r2, #4
 8005820:	430a      	orrs	r2, r1
 8005822:	4921      	ldr	r1, [pc, #132]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005824:	4313      	orrs	r3, r2
 8005826:	610b      	str	r3, [r1, #16]
 8005828:	e014      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800582a:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582c:	691a      	ldr	r2, [r3, #16]
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005830:	4013      	ands	r3, r2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6892      	ldr	r2, [r2, #8]
 8005836:	0211      	lsls	r1, r2, #8
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6952      	ldr	r2, [r2, #20]
 800583c:	0852      	lsrs	r2, r2, #1
 800583e:	3a01      	subs	r2, #1
 8005840:	0652      	lsls	r2, r2, #25
 8005842:	4311      	orrs	r1, r2
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	3a01      	subs	r2, #1
 800584a:	0112      	lsls	r2, r2, #4
 800584c:	430a      	orrs	r2, r1
 800584e:	4916      	ldr	r1, [pc, #88]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005854:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800585a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800585e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fc f802 	bl	8001868 <HAL_GetTick>
 8005864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005866:	e009      	b.n	800587c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005868:	f7fb fffe 	bl	8001868 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d902      	bls.n	800587c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	73fb      	strb	r3, [r7, #15]
          break;
 800587a:	e005      	b.n	8005888 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800588e:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	4904      	ldr	r1, [pc, #16]	; (80058a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005898:	4313      	orrs	r3, r2
 800589a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000
 80058ac:	07ff800f 	.word	0x07ff800f
 80058b0:	ff9f800f 	.word	0xff9f800f
 80058b4:	f9ff800f 	.word	0xf9ff800f

080058b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058c6:	4b72      	ldr	r3, [pc, #456]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058d2:	4b6f      	ldr	r3, [pc, #444]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0203 	and.w	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d103      	bne.n	80058ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
       ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d142      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	e03f      	b.n	8005970 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d018      	beq.n	800592a <RCCEx_PLLSAI2_Config+0x72>
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d825      	bhi.n	8005948 <RCCEx_PLLSAI2_Config+0x90>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d002      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0x4e>
 8005900:	2b02      	cmp	r3, #2
 8005902:	d009      	beq.n	8005918 <RCCEx_PLLSAI2_Config+0x60>
 8005904:	e020      	b.n	8005948 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005906:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11d      	bne.n	800594e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005916:	e01a      	b.n	800594e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005918:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005928:	e013      	b.n	8005952 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800592a:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005936:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005946:	e006      	b.n	8005956 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e004      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800594e:	bf00      	nop
 8005950:	e002      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005956:	bf00      	nop
    }

    if(status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d108      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800595e:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4949      	ldr	r1, [pc, #292]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 800596c:	4313      	orrs	r3, r2
 800596e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 8086 	bne.w	8005a84 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005978:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a44      	ldr	r2, [pc, #272]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005984:	f7fb ff70 	bl	8001868 <HAL_GetTick>
 8005988:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800598a:	e009      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800598c:	f7fb ff6c 	bl	8001868 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d902      	bls.n	80059a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	73fb      	strb	r3, [r7, #15]
        break;
 800599e:	e005      	b.n	80059ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ef      	bne.n	800598c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d168      	bne.n	8005a84 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d113      	bne.n	80059e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059b8:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <RCCEx_PLLSAI2_Config+0x1dc>)
 80059be:	4013      	ands	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6892      	ldr	r2, [r2, #8]
 80059c4:	0211      	lsls	r1, r2, #8
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68d2      	ldr	r2, [r2, #12]
 80059ca:	06d2      	lsls	r2, r2, #27
 80059cc:	4311      	orrs	r1, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6852      	ldr	r2, [r2, #4]
 80059d2:	3a01      	subs	r2, #1
 80059d4:	0112      	lsls	r2, r2, #4
 80059d6:	430a      	orrs	r2, r1
 80059d8:	492d      	ldr	r1, [pc, #180]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	614b      	str	r3, [r1, #20]
 80059de:	e02d      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d115      	bne.n	8005a12 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059e6:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <RCCEx_PLLSAI2_Config+0x1e0>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6892      	ldr	r2, [r2, #8]
 80059f2:	0211      	lsls	r1, r2, #8
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6912      	ldr	r2, [r2, #16]
 80059f8:	0852      	lsrs	r2, r2, #1
 80059fa:	3a01      	subs	r2, #1
 80059fc:	0552      	lsls	r2, r2, #21
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6852      	ldr	r2, [r2, #4]
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	4921      	ldr	r1, [pc, #132]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	614b      	str	r3, [r1, #20]
 8005a10:	e014      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6892      	ldr	r2, [r2, #8]
 8005a1e:	0211      	lsls	r1, r2, #8
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6952      	ldr	r2, [r2, #20]
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0652      	lsls	r2, r2, #25
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6852      	ldr	r2, [r2, #4]
 8005a30:	3a01      	subs	r2, #1
 8005a32:	0112      	lsls	r2, r2, #4
 8005a34:	430a      	orrs	r2, r1
 8005a36:	4916      	ldr	r1, [pc, #88]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fb ff0e 	bl	8001868 <HAL_GetTick>
 8005a4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a4e:	e009      	b.n	8005a64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a50:	f7fb ff0a 	bl	8001868 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
          break;
 8005a62:	e005      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0ef      	beq.n	8005a50 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a76:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	4904      	ldr	r1, [pc, #16]	; (8005a90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	07ff800f 	.word	0x07ff800f
 8005a98:	ff9f800f 	.word	0xff9f800f
 8005a9c:	f9ff800f 	.word	0xf9ff800f

08005aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e095      	b.n	8005bde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
 8005aca:	e005      	b.n	8005ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb fc1c 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b18:	d902      	bls.n	8005b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	ea42 0103 	orr.w	r1, r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	f003 0204 	and.w	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e042      	b.n	8005c7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fc06 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f82d 	bl	8005c88 <UART_SetConfig>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e022      	b.n	8005c7e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fb1d 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fba4 	bl	80063c4 <UART_CheckIdleState>
 8005c7c:	4603      	mov	r3, r0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b08c      	sub	sp, #48	; 0x30
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4baa      	ldr	r3, [pc, #680]	; (8005f60 <UART_SetConfig+0x2d8>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a9f      	ldr	r2, [pc, #636]	; (8005f64 <UART_SetConfig+0x2dc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d12:	f023 010f 	bic.w	r1, r3, #15
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a90      	ldr	r2, [pc, #576]	; (8005f68 <UART_SetConfig+0x2e0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d125      	bne.n	8005d78 <UART_SetConfig+0xf0>
 8005d2c:	4b8f      	ldr	r3, [pc, #572]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d81a      	bhi.n	8005d70 <UART_SetConfig+0xe8>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0xb8>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e116      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e112      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e10e      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e10a      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e106      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a7c      	ldr	r2, [pc, #496]	; (8005f70 <UART_SetConfig+0x2e8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d138      	bne.n	8005df4 <UART_SetConfig+0x16c>
 8005d82:	4b7a      	ldr	r3, [pc, #488]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d82d      	bhi.n	8005dec <UART_SetConfig+0x164>
 8005d90:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x110>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005dcd 	.word	0x08005dcd
 8005d9c:	08005ded 	.word	0x08005ded
 8005da0:	08005ded 	.word	0x08005ded
 8005da4:	08005ded 	.word	0x08005ded
 8005da8:	08005ddd 	.word	0x08005ddd
 8005dac:	08005ded 	.word	0x08005ded
 8005db0:	08005ded 	.word	0x08005ded
 8005db4:	08005ded 	.word	0x08005ded
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	08005ded 	.word	0x08005ded
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd2:	e0d8      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dda:	e0d4      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de2:	e0d0      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dea:	e0cc      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005df2:	e0c8      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a5e      	ldr	r2, [pc, #376]	; (8005f74 <UART_SetConfig+0x2ec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d125      	bne.n	8005e4a <UART_SetConfig+0x1c2>
 8005dfe:	4b5b      	ldr	r3, [pc, #364]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d016      	beq.n	8005e3a <UART_SetConfig+0x1b2>
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d818      	bhi.n	8005e42 <UART_SetConfig+0x1ba>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d00a      	beq.n	8005e2a <UART_SetConfig+0x1a2>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d814      	bhi.n	8005e42 <UART_SetConfig+0x1ba>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <UART_SetConfig+0x19a>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d008      	beq.n	8005e32 <UART_SetConfig+0x1aa>
 8005e20:	e00f      	b.n	8005e42 <UART_SetConfig+0x1ba>
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e28:	e0ad      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e30:	e0a9      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e32:	2304      	movs	r3, #4
 8005e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e38:	e0a5      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e40:	e0a1      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e42:	2310      	movs	r3, #16
 8005e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e48:	e09d      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a4a      	ldr	r2, [pc, #296]	; (8005f78 <UART_SetConfig+0x2f0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d125      	bne.n	8005ea0 <UART_SetConfig+0x218>
 8005e54:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e60:	d016      	beq.n	8005e90 <UART_SetConfig+0x208>
 8005e62:	2bc0      	cmp	r3, #192	; 0xc0
 8005e64:	d818      	bhi.n	8005e98 <UART_SetConfig+0x210>
 8005e66:	2b80      	cmp	r3, #128	; 0x80
 8005e68:	d00a      	beq.n	8005e80 <UART_SetConfig+0x1f8>
 8005e6a:	2b80      	cmp	r3, #128	; 0x80
 8005e6c:	d814      	bhi.n	8005e98 <UART_SetConfig+0x210>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <UART_SetConfig+0x1f0>
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d008      	beq.n	8005e88 <UART_SetConfig+0x200>
 8005e76:	e00f      	b.n	8005e98 <UART_SetConfig+0x210>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7e:	e082      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e80:	2302      	movs	r3, #2
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e07e      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8e:	e07a      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e076      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e072      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <UART_SetConfig+0x2f4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d12a      	bne.n	8005f00 <UART_SetConfig+0x278>
 8005eaa:	4b30      	ldr	r3, [pc, #192]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb8:	d01a      	beq.n	8005ef0 <UART_SetConfig+0x268>
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d81b      	bhi.n	8005ef8 <UART_SetConfig+0x270>
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d00c      	beq.n	8005ee0 <UART_SetConfig+0x258>
 8005ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eca:	d815      	bhi.n	8005ef8 <UART_SetConfig+0x270>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <UART_SetConfig+0x250>
 8005ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed4:	d008      	beq.n	8005ee8 <UART_SetConfig+0x260>
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0x270>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ede:	e052      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e04e      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ee8:	2304      	movs	r3, #4
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eee:	e04a      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ef0:	2308      	movs	r3, #8
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	e046      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e042      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <UART_SetConfig+0x2dc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d13a      	bne.n	8005f80 <UART_SetConfig+0x2f8>
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <UART_SetConfig+0x2e4>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f18:	d01a      	beq.n	8005f50 <UART_SetConfig+0x2c8>
 8005f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f1e:	d81b      	bhi.n	8005f58 <UART_SetConfig+0x2d0>
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f24:	d00c      	beq.n	8005f40 <UART_SetConfig+0x2b8>
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2a:	d815      	bhi.n	8005f58 <UART_SetConfig+0x2d0>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <UART_SetConfig+0x2b0>
 8005f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f34:	d008      	beq.n	8005f48 <UART_SetConfig+0x2c0>
 8005f36:	e00f      	b.n	8005f58 <UART_SetConfig+0x2d0>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3e:	e022      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f40:	2302      	movs	r3, #2
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e01e      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e01a      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e016      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e012      	b.n	8005f86 <UART_SetConfig+0x2fe>
 8005f60:	cfff69f3 	.word	0xcfff69f3
 8005f64:	40008000 	.word	0x40008000
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40004400 	.word	0x40004400
 8005f74:	40004800 	.word	0x40004800
 8005f78:	40004c00 	.word	0x40004c00
 8005f7c:	40005000 	.word	0x40005000
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4aae      	ldr	r2, [pc, #696]	; (8006244 <UART_SetConfig+0x5bc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	f040 8097 	bne.w	80060c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d823      	bhi.n	8005fe2 <UART_SetConfig+0x35a>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x318>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fd3 	.word	0x08005fd3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005fe3 	.word	0x08005fe3
 8005fc0:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fe ff58 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fca:	e010      	b.n	8005fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b9e      	ldr	r3, [pc, #632]	; (8006248 <UART_SetConfig+0x5c0>)
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fd0:	e00d      	b.n	8005fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fe feb9 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd8:	e009      	b.n	8005fee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fe0:	e005      	b.n	8005fee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8130 	beq.w	8006256 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	4a94      	ldr	r2, [pc, #592]	; (800624c <UART_SetConfig+0x5c4>)
 8005ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006000:	461a      	mov	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	fbb3 f3f2 	udiv	r3, r3, r2
 8006008:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	4413      	add	r3, r2
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	429a      	cmp	r2, r3
 8006018:	d305      	bcc.n	8006026 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d903      	bls.n	800602e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800602c:	e113      	b.n	8006256 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2200      	movs	r2, #0
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	60fa      	str	r2, [r7, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	4a84      	ldr	r2, [pc, #528]	; (800624c <UART_SetConfig+0x5c4>)
 800603c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006040:	b29b      	uxth	r3, r3
 8006042:	2200      	movs	r2, #0
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006050:	f7fa f8d4 	bl	80001fc <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	020b      	lsls	r3, r1, #8
 8006066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800606a:	0202      	lsls	r2, r0, #8
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	6849      	ldr	r1, [r1, #4]
 8006070:	0849      	lsrs	r1, r1, #1
 8006072:	2000      	movs	r0, #0
 8006074:	460c      	mov	r4, r1
 8006076:	4605      	mov	r5, r0
 8006078:	eb12 0804 	adds.w	r8, r2, r4
 800607c:	eb43 0905 	adc.w	r9, r3, r5
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	469a      	mov	sl, r3
 8006088:	4693      	mov	fp, r2
 800608a:	4652      	mov	r2, sl
 800608c:	465b      	mov	r3, fp
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f8b3 	bl	80001fc <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4613      	mov	r3, r2
 800609c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a4:	d308      	bcc.n	80060b8 <UART_SetConfig+0x430>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ac:	d204      	bcs.n	80060b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e0ce      	b.n	8006256 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060be:	e0ca      	b.n	8006256 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d166      	bne.n	8006198 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d827      	bhi.n	8006122 <UART_SetConfig+0x49a>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x450>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fe febc 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006102:	e014      	b.n	800612e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fe fece 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 8006108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800610a:	e010      	b.n	800612e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b4e      	ldr	r3, [pc, #312]	; (8006248 <UART_SetConfig+0x5c0>)
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006110:	e00d      	b.n	800612e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fe fe19 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006118:	e009      	b.n	800612e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006120:	e005      	b.n	800612e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800612c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8090 	beq.w	8006256 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	4a44      	ldr	r2, [pc, #272]	; (800624c <UART_SetConfig+0x5c4>)
 800613c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006140:	461a      	mov	r2, r3
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	fbb3 f3f2 	udiv	r3, r3, r2
 8006148:	005a      	lsls	r2, r3, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	441a      	add	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d916      	bls.n	8006190 <UART_SetConfig+0x508>
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d212      	bcs.n	8006190 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f023 030f 	bic.w	r3, r3, #15
 8006172:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	b29a      	uxth	r2, r3
 8006180:	8bfb      	ldrh	r3, [r7, #30]
 8006182:	4313      	orrs	r3, r2
 8006184:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	8bfa      	ldrh	r2, [r7, #30]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	e062      	b.n	8006256 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006196:	e05e      	b.n	8006256 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800619c:	2b08      	cmp	r3, #8
 800619e:	d828      	bhi.n	80061f2 <UART_SetConfig+0x56a>
 80061a0:	a201      	add	r2, pc, #4	; (adr r2, 80061a8 <UART_SetConfig+0x520>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	080061f3 	.word	0x080061f3
 80061b8:	080061e3 	.word	0x080061e3
 80061bc:	080061f3 	.word	0x080061f3
 80061c0:	080061f3 	.word	0x080061f3
 80061c4:	080061f3 	.word	0x080061f3
 80061c8:	080061eb 	.word	0x080061eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fe fe54 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 80061d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d2:	e014      	b.n	80061fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d4:	f7fe fe66 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 80061d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061da:	e010      	b.n	80061fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <UART_SetConfig+0x5c0>)
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061e0:	e00d      	b.n	80061fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e2:	f7fe fdb1 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061e8:	e009      	b.n	80061fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061f0:	e005      	b.n	80061fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061fc:	bf00      	nop
    }

    if (pclk != 0U)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d028      	beq.n	8006256 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	4a10      	ldr	r2, [pc, #64]	; (800624c <UART_SetConfig+0x5c4>)
 800620a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800620e:	461a      	mov	r2, r3
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	fbb3 f2f2 	udiv	r2, r3, r2
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	441a      	add	r2, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d910      	bls.n	8006250 <UART_SetConfig+0x5c8>
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006234:	d20c      	bcs.n	8006250 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	b29a      	uxth	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
 8006240:	e009      	b.n	8006256 <UART_SetConfig+0x5ce>
 8006242:	bf00      	nop
 8006244:	40008000 	.word	0x40008000
 8006248:	00f42400 	.word	0x00f42400
 800624c:	080068a8 	.word	0x080068a8
      }
      else
      {
        ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2201      	movs	r2, #1
 800625a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2201      	movs	r2, #1
 8006262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2200      	movs	r2, #0
 800626a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006272:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006276:	4618      	mov	r0, r3
 8006278:	3730      	adds	r7, #48	; 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d4:	f7fb fa48 	bl	8001868 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10e      	bne.n	8006406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f82f 	bl	800645a <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e025      	b.n	8006452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d10e      	bne.n	8006432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f819 	bl	800645a <UART_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e00f      	b.n	8006452 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b09c      	sub	sp, #112	; 0x70
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	4613      	mov	r3, r2
 8006468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646a:	e0a9      	b.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	f000 80a5 	beq.w	80065c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fb f9f7 	bl	8001868 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <UART_WaitOnFlagUntilTimeout+0x32>
 8006486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006488:	2b00      	cmp	r3, #0
 800648a:	d140      	bne.n	800650e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064a0:	667b      	str	r3, [r7, #100]	; 0x64
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	461a      	mov	r2, r3
 80064a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e6      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	663b      	str	r3, [r7, #96]	; 0x60
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3308      	adds	r3, #8
 80064dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064de:	64ba      	str	r2, [r7, #72]	; 0x48
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e069      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d051      	beq.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652a:	d149      	bne.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006534:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	e853 3f00 	ldrex	r3, [r3]
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800654a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800655a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e6      	bne.n	8006536 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	613b      	str	r3, [r7, #16]
   return(result);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3308      	adds	r3, #8
 8006586:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006588:	623a      	str	r2, [r7, #32]
 800658a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	61bb      	str	r3, [r7, #24]
   return(result);
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e5      	bne.n	8006568 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e010      	b.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4013      	ands	r3, r2
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	429a      	cmp	r2, r3
 80065dc:	f43f af46 	beq.w	800646c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3770      	adds	r7, #112	; 0x70
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_UARTEx_DisableFifoMode+0x16>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e027      	b.n	8006650 <HAL_UARTEx_DisableFifoMode+0x66>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2224      	movs	r2, #36	; 0x24
 800660c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800662e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006670:	2302      	movs	r3, #2
 8006672:	e02d      	b.n	80066d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	; 0x24
 8006680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f84f 	bl	8006754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e02d      	b.n	800674c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2224      	movs	r2, #36	; 0x24
 80066fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f811 	bl	8006754 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006760:	2b00      	cmp	r3, #0
 8006762:	d108      	bne.n	8006776 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006774:	e031      	b.n	80067da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006776:	2308      	movs	r3, #8
 8006778:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800677a:	2308      	movs	r3, #8
 800677c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	0e5b      	lsrs	r3, r3, #25
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	0f5b      	lsrs	r3, r3, #29
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	7b3a      	ldrb	r2, [r7, #12]
 80067a2:	4911      	ldr	r1, [pc, #68]	; (80067e8 <UARTEx_SetNbDataToProcess+0x94>)
 80067a4:	5c8a      	ldrb	r2, [r1, r2]
 80067a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067aa:	7b3a      	ldrb	r2, [r7, #12]
 80067ac:	490f      	ldr	r1, [pc, #60]	; (80067ec <UARTEx_SetNbDataToProcess+0x98>)
 80067ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	7b7a      	ldrb	r2, [r7, #13]
 80067c0:	4909      	ldr	r1, [pc, #36]	; (80067e8 <UARTEx_SetNbDataToProcess+0x94>)
 80067c2:	5c8a      	ldrb	r2, [r1, r2]
 80067c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067c8:	7b7a      	ldrb	r2, [r7, #13]
 80067ca:	4908      	ldr	r1, [pc, #32]	; (80067ec <UARTEx_SetNbDataToProcess+0x98>)
 80067cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	080068c0 	.word	0x080068c0
 80067ec:	080068c8 	.word	0x080068c8

080067f0 <__libc_init_array>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4d0d      	ldr	r5, [pc, #52]	; (8006828 <__libc_init_array+0x38>)
 80067f4:	4c0d      	ldr	r4, [pc, #52]	; (800682c <__libc_init_array+0x3c>)
 80067f6:	1b64      	subs	r4, r4, r5
 80067f8:	10a4      	asrs	r4, r4, #2
 80067fa:	2600      	movs	r6, #0
 80067fc:	42a6      	cmp	r6, r4
 80067fe:	d109      	bne.n	8006814 <__libc_init_array+0x24>
 8006800:	4d0b      	ldr	r5, [pc, #44]	; (8006830 <__libc_init_array+0x40>)
 8006802:	4c0c      	ldr	r4, [pc, #48]	; (8006834 <__libc_init_array+0x44>)
 8006804:	f000 f820 	bl	8006848 <_init>
 8006808:	1b64      	subs	r4, r4, r5
 800680a:	10a4      	asrs	r4, r4, #2
 800680c:	2600      	movs	r6, #0
 800680e:	42a6      	cmp	r6, r4
 8006810:	d105      	bne.n	800681e <__libc_init_array+0x2e>
 8006812:	bd70      	pop	{r4, r5, r6, pc}
 8006814:	f855 3b04 	ldr.w	r3, [r5], #4
 8006818:	4798      	blx	r3
 800681a:	3601      	adds	r6, #1
 800681c:	e7ee      	b.n	80067fc <__libc_init_array+0xc>
 800681e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006822:	4798      	blx	r3
 8006824:	3601      	adds	r6, #1
 8006826:	e7f2      	b.n	800680e <__libc_init_array+0x1e>
 8006828:	080068d8 	.word	0x080068d8
 800682c:	080068d8 	.word	0x080068d8
 8006830:	080068d8 	.word	0x080068d8
 8006834:	080068dc 	.word	0x080068dc

08006838 <memset>:
 8006838:	4402      	add	r2, r0
 800683a:	4603      	mov	r3, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	f803 1b01 	strb.w	r1, [r3], #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <_init>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	bf00      	nop
 800684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684e:	bc08      	pop	{r3}
 8006850:	469e      	mov	lr, r3
 8006852:	4770      	bx	lr

08006854 <_fini>:
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	bf00      	nop
 8006858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685a:	bc08      	pop	{r3}
 800685c:	469e      	mov	lr, r3
 800685e:	4770      	bx	lr
