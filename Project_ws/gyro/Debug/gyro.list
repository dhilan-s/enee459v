
gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c10  08006c10  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c18  08006c18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000010  08006c30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08006c30  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8bd  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca3  00000000  00000000  0003a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd1c  00000000  00000000  00040038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001963e  00000000  00000000  0006cd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118d70  00000000  00000000  00086392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da4  00000000  00000000  0019f154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000010 	.word	0x20000010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006b88 	.word	0x08006b88

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000014 	.word	0x20000014
 80001f8:	08006b88 	.word	0x08006b88

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <what_is_it>:
uint8_t ODR_config = (0b0110 << 4);
uint8_t config_check[2];


//function which reports some unique signature of the target peripheral (WHO_AM_I or equivalent).
void what_is_it(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read (&hi2c2, gyroSAD, WHO_AM_I, 1, data, 1, HAL_MAX_DELAY);
 8000506:	23d4      	movs	r3, #212	; 0xd4
 8000508:	b299      	uxth	r1, r3
 800050a:	220f      	movs	r2, #15
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	2301      	movs	r3, #1
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <what_is_it+0x28>)
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <what_is_it+0x2c>)
 800051e:	f002 fe5d 	bl	80031dc <HAL_I2C_Mem_Read>
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000128 	.word	0x20000128

08000530 <write_location>:


//function which changes content of some data or control register of the peripheral.
void write_location(){
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write (hi2c2, gyroSAD, CTRL2_G, 1, &ODR_config, 2, HAL_MAX_DELAY);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <write_location+0x2c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	23d4      	movs	r3, #212	; 0xd4
 800053e:	b299      	uxth	r1, r3
 8000540:	2211      	movs	r2, #17
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	9302      	str	r3, [sp, #8]
 8000548:	2302      	movs	r3, #2
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <write_location+0x30>)
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2301      	movs	r3, #1
 8000552:	f002 fd2f 	bl	8002fb4 <HAL_I2C_Mem_Write>
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000128 	.word	0x20000128
 8000560:	20000000 	.word	0x20000000

08000564 <read_location>:

//function which reports contents of some data or control register of the peripheral.
void read_location(){
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read (hi2c2, gyroSAD, CTRL2_G, 1, config_check, 2, HAL_MAX_DELAY);
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <read_location+0x2c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	23d4      	movs	r3, #212	; 0xd4
 8000572:	b299      	uxth	r1, r3
 8000574:	2211      	movs	r2, #17
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	2302      	movs	r3, #2
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <read_location+0x30>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	f002 fe29 	bl	80031dc <HAL_I2C_Mem_Read>
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000128 	.word	0x20000128
 8000594:	20000030 	.word	0x20000030

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f001 f933 	bl	8001806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f824 	bl	80005ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a4:	f000 f884 	bl	80006b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fbdc 	bl	8000d64 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005ac:	f000 f8b0 	bl	8000710 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80005b0:	f000 f914 	bl	80007dc <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80005b4:	f000 f94a 	bl	800084c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005b8:	f000 f988 	bl	80008cc <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80005bc:	f000 f9c6 	bl	800094c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80005c0:	f000 fa1a 	bl	80009f8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80005c4:	f000 fa56 	bl	8000a74 <MX_SPI3_Init>
  MX_UART4_Init();
 80005c8:	f000 fa92 	bl	8000af0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 fadc 	bl	8000b88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 fb26 	bl	8000c20 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005d4:	f000 fb72 	bl	8000cbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80005d8:	f000 fbbc 	bl	8000d54 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  what_is_it();
 80005dc:	f7ff ff90 	bl	8000500 <what_is_it>
  write_location();
 80005e0:	f7ff ffa6 	bl	8000530 <write_location>
  read_location();
 80005e4:	f7ff ffbe 	bl	8000564 <read_location>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x50>
	...

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 fabc 	bl	8006b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800060e:	2000      	movs	r0, #0
 8000610:	f003 ff42 	bl	8004498 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800061a:	f000 fce5 	bl	8000fe8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061e:	f003 ff0b 	bl	8004438 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SystemClock_Config+0xc0>)
 8000624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xc0>)
 800062a:	f023 0318 	bic.w	r3, r3, #24
 800062e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000632:	2314      	movs	r3, #20
 8000634:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063a:	2301      	movs	r3, #1
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000642:	2360      	movs	r3, #96	; 0x60
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064a:	2301      	movs	r3, #1
 800064c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000652:	233c      	movs	r3, #60	; 0x3c
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ffba 	bl	80045e0 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000672:	f000 fcb9 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2105      	movs	r1, #5
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fbc0 	bl	8004e14 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800069a:	f000 fca5 	bl	8000fe8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069e:	f005 f9a7 	bl	80059f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a2:	bf00      	nop
 80006a4:	3758      	adds	r7, #88	; 0x58
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0a6      	sub	sp, #152	; 0x98
 80006b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2294      	movs	r2, #148	; 0x94
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f006 fa5b 	bl	8006b78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006d4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006de:	2318      	movs	r3, #24
 80006e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006ee:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fe4a 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000702:	f000 fc71 	bl	8000fe8 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3798      	adds	r7, #152	; 0x98
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
 8000724:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000746:	2204      	movs	r2, #4
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800077a:	2200      	movs	r2, #0
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_ADC1_Init+0xc0>)
 8000788:	2204      	movs	r2, #4
 800078a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078c:	4810      	ldr	r0, [pc, #64]	; (80007d0 <MX_ADC1_Init+0xc0>)
 800078e:	f001 fa4f 	bl	8001c30 <HAL_ADC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 fc26 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_ADC1_Init+0xc8>)
 800079e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a0:	2306      	movs	r3, #6
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a8:	237f      	movs	r3, #127	; 0x7f
 80007aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ac:	2304      	movs	r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0xc0>)
 80007ba:	f001 fb85 	bl	8001ec8 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80007c4:	f000 fc10 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000034 	.word	0x20000034
 80007d4:	50040000 	.word	0x50040000
 80007d8:	04300002 	.word	0x04300002

080007dc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_DFSDM1_Init+0x68>)
 80007e2:	4a19      	ldr	r2, [pc, #100]	; (8000848 <MX_DFSDM1_Init+0x6c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_DFSDM1_Init+0x68>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DFSDM1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_DFSDM1_Init+0x68>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_DFSDM1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_DFSDM1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000812:	2204      	movs	r2, #4
 8000814:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_DFSDM1_Init+0x68>)
 800081e:	2201      	movs	r2, #1
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_DFSDM1_Init+0x68>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_DFSDM1_Init+0x68>)
 8000830:	f002 f858 	bl	80028e4 <HAL_DFSDM_ChannelInit>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800083a:	f000 fbd5 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c
 8000848:	40016040 	.word	0x40016040

0800084c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C1_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C1_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x74>)
 8000888:	f002 fb05 	bl	8002e96 <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fba9 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x74>)
 800089a:	f003 f85f 	bl	800395c <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fba0 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C1_Init+0x74>)
 80008ac:	f003 f8a1 	bl	80039f2 <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb97 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d4 	.word	0x200000d4
 80008c4:	40005400 	.word	0x40005400
 80008c8:	307075b1 	.word	0x307075b1

080008cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C2_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C2_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C2_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C2_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C2_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C2_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C2_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C2_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C2_Init+0x74>)
 8000908:	f002 fac5 	bl	8002e96 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fb69 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C2_Init+0x74>)
 800091a:	f003 f81f 	bl	800395c <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fb60 	bl	8000fe8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C2_Init+0x74>)
 800092c:	f003 f861 	bl	80039f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fb57 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000128 	.word	0x20000128
 8000944:	40005800 	.word	0x40005800
 8000948:	307075b1 	.word	0x307075b1

0800094c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <MX_OCTOSPI1_Init+0xa8>)
 8000964:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000978:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 800097c:	2220      	movs	r2, #32
 800097e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000982:	2201      	movs	r2, #1
 8000984:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 8000994:	2201      	movs	r2, #1
 8000996:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 80009ac:	2208      	movs	r2, #8
 80009ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 80009b2:	f003 f86b 	bl	8003a8c <HAL_OSPI_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80009bc:	f000 fb14 	bl	8000fe8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009c8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80009cc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_OCTOSPI1_Init+0xa4>)
 80009d8:	f003 f912 	bl	8003c00 <HAL_OSPIM_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80009e2:	f000 fb01 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000017c 	.word	0x2000017c
 80009f4:	a0001000 	.word	0xa0001000

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_SPI1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_SPI1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a12:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a46:	2207      	movs	r2, #7
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_SPI1_Init+0x74>)
 8000a58:	f005 f9c2 	bl	8005de0 <HAL_SPI_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fac1 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001cc 	.word	0x200001cc
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <MX_SPI3_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ace:	2208      	movs	r2, #8
 8000ad0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_SPI3_Init+0x74>)
 8000ad4:	f005 f984 	bl	8005de0 <HAL_SPI_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fa83 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000230 	.word	0x20000230
 8000aec:	40003c00 	.word	0x40003c00

08000af0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_UART4_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_UART4_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_UART4_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b3a:	f005 f9f4 	bl	8005f26 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fa50 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b4c:	f005 ff26 	bl	800699c <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fa47 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b5e:	f005 ff5b 	bl	8006a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fa3e 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_UART4_Init+0x90>)
 8000b6e:	f005 fedc 	bl	800692a <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 fa36 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000294 	.word	0x20000294
 8000b84:	40004c00 	.word	0x40004c00

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART1_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f005 f9a8 	bl	8005f26 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fa04 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000be4:	f005 feda 	bl	800699c <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f9fb 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000bf6:	f005 ff0f 	bl	8006a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 f9f2 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART1_UART_Init+0x90>)
 8000c06:	f005 fe90 	bl	800692a <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f9ea 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000324 	.word	0x20000324
 8000c1c:	40013800 	.word	0x40013800

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c26:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <MX_USART2_UART_Init+0x98>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c6c:	f005 f95b 	bl	8005f26 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000c76:	f000 f9b7 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c7e:	f005 fe8d 	bl	800699c <HAL_UARTEx_SetTxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000c88:	f000 f9ae 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000c90:	f005 fec2 	bl	8006a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000c9a:	f000 f9a5 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x94>)
 8000ca0:	f005 fe43 	bl	800692a <HAL_UARTEx_DisableFifoMode>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000caa:	f000 f99d 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200003b4 	.word	0x200003b4
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f005 f90e 	bl	8005f26 <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 f96a 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f005 fe40 	bl	800699c <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f961 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f005 fe75 	bl	8006a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f958 	bl	8000fe8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f005 fdf6 	bl	800692a <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f950 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000444 	.word	0x20000444
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	4b96      	ldr	r3, [pc, #600]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a95      	ldr	r2, [pc, #596]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b93      	ldr	r3, [pc, #588]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b90      	ldr	r3, [pc, #576]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a8f      	ldr	r2, [pc, #572]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000daa:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a89      	ldr	r2, [pc, #548]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b87      	ldr	r3, [pc, #540]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b84      	ldr	r3, [pc, #528]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a83      	ldr	r2, [pc, #524]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	4b7e      	ldr	r3, [pc, #504]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a7d      	ldr	r2, [pc, #500]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b78      	ldr	r3, [pc, #480]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a77      	ldr	r2, [pc, #476]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b75      	ldr	r3, [pc, #468]	; (8000fd4 <MX_GPIO_Init+0x270>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f240 1105 	movw	r1, #261	; 0x105
 8000e10:	4871      	ldr	r0, [pc, #452]	; (8000fd8 <MX_GPIO_Init+0x274>)
 8000e12:	f002 f805 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e16:	2200      	movs	r2, #0
 8000e18:	f248 111c 	movw	r1, #33052	; 0x811c
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 fffe 	bl	8002e20 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e24:	2200      	movs	r2, #0
 8000e26:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000e2a:	486c      	ldr	r0, [pc, #432]	; (8000fdc <MX_GPIO_Init+0x278>)
 8000e2c:	f001 fff8 	bl	8002e20 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f242 0183 	movw	r1, #8323	; 0x2083
 8000e36:	486a      	ldr	r0, [pc, #424]	; (8000fe0 <MX_GPIO_Init+0x27c>)
 8000e38:	f001 fff2 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e42:	4868      	ldr	r0, [pc, #416]	; (8000fe4 <MX_GPIO_Init+0x280>)
 8000e44:	f001 ffec 	bl	8002e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e48:	f240 1305 	movw	r3, #261	; 0x105
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	485d      	ldr	r0, [pc, #372]	; (8000fd8 <MX_GPIO_Init+0x274>)
 8000e62:	f001 fe4b 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000e66:	237a      	movs	r3, #122	; 0x7a
 8000e68:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4857      	ldr	r0, [pc, #348]	; (8000fd8 <MX_GPIO_Init+0x274>)
 8000e7c:	f001 fe3e 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e80:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4853      	ldr	r0, [pc, #332]	; (8000fe4 <MX_GPIO_Init+0x280>)
 8000e98:	f001 fe30 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000e9c:	f248 131c 	movw	r3, #33052	; 0x811c
 8000ea0:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 fe20 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4842      	ldr	r0, [pc, #264]	; (8000fdc <MX_GPIO_Init+0x278>)
 8000ed2:	f001 fe13 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	483a      	ldr	r0, [pc, #232]	; (8000fdc <MX_GPIO_Init+0x278>)
 8000ef2:	f001 fe03 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ef6:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000efa:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4833      	ldr	r0, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x278>)
 8000f10:	f001 fdf4 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000f14:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000f18:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482d      	ldr	r0, [pc, #180]	; (8000fe0 <MX_GPIO_Init+0x27c>)
 8000f2c:	f001 fde6 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000f30:	f242 0383 	movw	r3, #8323	; 0x2083
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4825      	ldr	r0, [pc, #148]	; (8000fe0 <MX_GPIO_Init+0x27c>)
 8000f4a:	f001 fdd7 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <MX_GPIO_Init+0x280>)
 8000f68:	f001 fdc8 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f001 fdba 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000f88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f001 fda8 	bl	8002afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2017      	movs	r0, #23
 8000fb2:	f001 fc60 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fb6:	2017      	movs	r0, #23
 8000fb8:	f001 fc79 	bl	80028ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2028      	movs	r0, #40	; 0x28
 8000fc2:	f001 fc58 	bl	8002876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fc6:	2028      	movs	r0, #40	; 0x28
 8000fc8:	f001 fc71 	bl	80028ae <HAL_NVIC_EnableIRQ>

}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48001000 	.word	0x48001000
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	48000c00 	.word	0x48000c00
 8000fe4:	48000800 	.word	0x48000800

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_MspInit+0x44>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_MspInit+0x44>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x44>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_ADC_MspInit+0x74>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d123      	bne.n	80010a6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 8001064:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_ADC_MspInit+0x78>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800108e:	233f      	movs	r3, #63	; 0x3f
 8001090:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001092:	230b      	movs	r3, #11
 8001094:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_ADC_MspInit+0x7c>)
 80010a2:	f001 fd2b 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	50040000 	.word	0x50040000
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000800 	.word	0x48000800

080010bc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ae      	sub	sp, #184	; 0xb8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2294      	movs	r2, #148	; 0x94
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 fd4b 	bl	8006b78 <memset>
  if(DFSDM1_Init == 0)
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d142      	bne.n	8001170 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f948 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001106:	f7ff ff6f 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110e:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001114:	6613      	str	r3, [r2, #96]	; 0x60
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800113a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800113e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001154:	2306      	movs	r3, #6
 8001156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001162:	f001 fccb 	bl	8002afc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800116e:	6013      	str	r3, [r2, #0]
  }

}
 8001170:	bf00      	nop
 8001172:	37b8      	adds	r7, #184	; 0xb8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200004d4 	.word	0x200004d4
 800117c:	40021000 	.word	0x40021000
 8001180:	48001000 	.word	0x48001000

08001184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0b0      	sub	sp, #192	; 0xc0
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	2294      	movs	r2, #148	; 0x94
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fce7 	bl	8006b78 <memset>
  if(hi2c->Instance==I2C1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a42      	ldr	r2, [pc, #264]	; (80012b8 <HAL_I2C_MspInit+0x134>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d13c      	bne.n	800122e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 f8e5 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011cc:	f7ff ff0c 	bl	8000fe8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_I2C_MspInit+0x138>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	4a39      	ldr	r2, [pc, #228]	; (80012bc <HAL_I2C_MspInit+0x138>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_I2C_MspInit+0x138>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80011e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001202:	2304      	movs	r3, #4
 8001204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800120c:	4619      	mov	r1, r3
 800120e:	482c      	ldr	r0, [pc, #176]	; (80012c0 <HAL_I2C_MspInit+0x13c>)
 8001210:	f001 fc74 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_I2C_MspInit+0x138>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_I2C_MspInit+0x138>)
 800121a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121e:	6593      	str	r3, [r2, #88]	; 0x58
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_I2C_MspInit+0x138>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800122c:	e040      	b.n	80012b0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_I2C_MspInit+0x140>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13b      	bne.n	80012b0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f8a3 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001250:	f7ff feca 	bl	8000fe8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x138>)
 8001256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_I2C_MspInit+0x138>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_I2C_MspInit+0x138>)
 8001262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800126c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127a:	2301      	movs	r3, #1
 800127c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001286:	2304      	movs	r3, #4
 8001288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001290:	4619      	mov	r1, r3
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <HAL_I2C_MspInit+0x13c>)
 8001294:	f001 fc32 	bl	8002afc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_I2C_MspInit+0x138>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_I2C_MspInit+0x138>)
 800129e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a2:	6593      	str	r3, [r2, #88]	; 0x58
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_I2C_MspInit+0x138>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
}
 80012b0:	bf00      	nop
 80012b2:	37c0      	adds	r7, #192	; 0xc0
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40005400 	.word	0x40005400
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400
 80012c4:	40005800 	.word	0x40005800

080012c8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0b0      	sub	sp, #192	; 0xc0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2294      	movs	r2, #148	; 0x94
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fc45 	bl	8006b78 <memset>
  if(hospi->Instance==OCTOSPI1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_OSPI_MspInit+0xcc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d149      	bne.n	800138c <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80012f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f841 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001314:	f7ff fe68 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 800131e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 8001332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6513      	str	r3, [r2, #80]	; 0x50
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 800133e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_OSPI_MspInit+0xd0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001360:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800137a:	230a      	movs	r3, #10
 800137c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001380:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_OSPI_MspInit+0xd4>)
 8001388:	f001 fbb8 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	37c0      	adds	r7, #192	; 0xc0
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	a0001000 	.word	0xa0001000
 8001398:	40021000 	.word	0x40021000
 800139c:	48001000 	.word	0x48001000

080013a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_SPI_MspInit+0xdc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d129      	bne.n	8001416 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013cc:	6613      	str	r3, [r2, #96]	; 0x60
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80013f2:	23e0      	movs	r3, #224	; 0xe0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001402:	2305      	movs	r3, #5
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f001 fb74 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001414:	e02d      	b.n	8001472 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_SPI_MspInit+0xe4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d128      	bne.n	8001472 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 8001426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142a:	6593      	str	r3, [r2, #88]	; 0x58
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_SPI_MspInit+0xe0>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001450:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001462:	2306      	movs	r3, #6
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_SPI_MspInit+0xe8>)
 800146e:	f001 fb45 	bl	8002afc <HAL_GPIO_Init>
}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40013000 	.word	0x40013000
 8001480:	40021000 	.word	0x40021000
 8001484:	40003c00 	.word	0x40003c00
 8001488:	48000800 	.word	0x48000800

0800148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0b4      	sub	sp, #208	; 0xd0
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a8:	2294      	movs	r2, #148	; 0x94
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fb63 	bl	8006b78 <memset>
  if(huart->Instance==UART4)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a83      	ldr	r2, [pc, #524]	; (80016c4 <HAL_UART_MspInit+0x238>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13c      	bne.n	8001536 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014bc:	2308      	movs	r3, #8
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 ff61 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d4:	f7ff fd88 	bl	8000fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014d8:	4b7b      	ldr	r3, [pc, #492]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	4a7a      	ldr	r2, [pc, #488]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014e2:	6593      	str	r3, [r2, #88]	; 0x58
 80014e4:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	4a74      	ldr	r2, [pc, #464]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fc:	4b72      	ldr	r3, [pc, #456]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001520:	2308      	movs	r3, #8
 8001522:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f001 fae4 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001534:	e0c2      	b.n	80016bc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a64      	ldr	r2, [pc, #400]	; (80016cc <HAL_UART_MspInit+0x240>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d13b      	bne.n	80015b8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001540:	2301      	movs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001544:	2300      	movs	r3, #0
 8001546:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154c:	4618      	mov	r0, r3
 800154e:	f003 ff1f 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001558:	f7ff fd46 	bl	8000fe8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800155c:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	4a59      	ldr	r2, [pc, #356]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	6613      	str	r3, [r2, #96]	; 0x60
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a53      	ldr	r2, [pc, #332]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a4:	2307      	movs	r3, #7
 80015a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015ae:	4619      	mov	r1, r3
 80015b0:	4847      	ldr	r0, [pc, #284]	; (80016d0 <HAL_UART_MspInit+0x244>)
 80015b2:	f001 faa3 	bl	8002afc <HAL_GPIO_Init>
}
 80015b6:	e081      	b.n	80016bc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <HAL_UART_MspInit+0x248>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d13b      	bne.n	800163a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fede 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0x152>
      Error_Handler();
 80015da:	f7ff fd05 	bl	8000fe8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800160e:	2378      	movs	r3, #120	; 0x78
 8001610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	2307      	movs	r3, #7
 8001628:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001630:	4619      	mov	r1, r3
 8001632:	4829      	ldr	r0, [pc, #164]	; (80016d8 <HAL_UART_MspInit+0x24c>)
 8001634:	f001 fa62 	bl	8002afc <HAL_GPIO_Init>
}
 8001638:	e040      	b.n	80016bc <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <HAL_UART_MspInit+0x250>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d13b      	bne.n	80016bc <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001644:	2304      	movs	r3, #4
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fe9d 	bl	8005390 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800165c:	f7ff fcc4 	bl	8000fe8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x23c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001690:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016aa:	2307      	movs	r3, #7
 80016ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016b4:	4619      	mov	r1, r3
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <HAL_UART_MspInit+0x24c>)
 80016b8:	f001 fa20 	bl	8002afc <HAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	37d0      	adds	r7, #208	; 0xd0
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40004c00 	.word	0x40004c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40013800 	.word	0x40013800
 80016d0:	48000400 	.word	0x48000400
 80016d4:	40004400 	.word	0x40004400
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	40004800 	.word	0x40004800

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8c0 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001738:	2020      	movs	r0, #32
 800173a:	f001 fb89 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800173e:	2040      	movs	r0, #64	; 0x40
 8001740:	f001 fb86 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001744:	2080      	movs	r0, #128	; 0x80
 8001746:	f001 fb83 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800174a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800174e:	f001 fb7f 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800175a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800175e:	f001 fb77 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001762:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001766:	f001 fb73 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800176a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800176e:	f001 fb6f 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001772:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001776:	f001 fb6b 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800177a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800177e:	f001 fb67 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001782:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001786:	f001 fb63 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	; (80017f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <LoopForever+0xe>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	; (8001800 <LoopForever+0x16>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f005 f9a5 	bl	8006b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e6:	f7fe fed7 	bl	8000598 <main>

080017ea <LoopForever>:

LoopForever:
    b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80017f8:	08006c20 	.word	0x08006c20
  ldr r2, =_sbss
 80017fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001800:	20000500 	.word	0x20000500

08001804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_IRQHandler>

08001806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f001 f825 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f80e 	bl	8001838 <HAL_InitTick>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001828:	f7ff fbe4 	bl	8000ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_InitTick+0x6c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d023      	beq.n	8001894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_InitTick+0x70>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_InitTick+0x6c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f001 f831 	bl	80028ca <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d809      	bhi.n	8001888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 fffb 	bl	8002876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0x74>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e007      	b.n	8001898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e004      	b.n	8001898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e001      	b.n	8001898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000008 	.word	0x20000008

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	200004d8 	.word	0x200004d8

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200004d8 	.word	0x200004d8

080018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	; 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LL_ADC_SetOffset+0x44>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	4313      	orrs	r3, r2
 8001988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	03fff000 	.word	0x03fff000

080019a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3360      	adds	r3, #96	; 0x60
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	615a      	str	r2, [r3, #20]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3330      	adds	r3, #48	; 0x30
 8001a38:	461a      	mov	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	4413      	add	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	211f      	movs	r1, #31
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0e9b      	lsrs	r3, r3, #26
 8001a60:	f003 011f 	and.w	r1, r3, #31
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3314      	adds	r3, #20
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0e5b      	lsrs	r3, r3, #25
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0d1b      	lsrs	r3, r3, #20
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	2107      	movs	r1, #7
 8001aae:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	401a      	ands	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	0d1b      	lsrs	r3, r3, #20
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0318 	and.w	r3, r3, #24
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001afc:	40d9      	lsrs	r1, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	400b      	ands	r3, r1
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	431a      	orrs	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	0007ffff 	.word	0x0007ffff

08001b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <LL_ADC_IsEnabled+0x18>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <LL_ADC_IsEnabled+0x1a>
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e12f      	b.n	8001eaa <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff f9ef 	bl	800103c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff67 	bl	8001b44 <LL_ADC_IsDeepPowerDownEnabled>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff4d 	bl	8001b20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff82 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff66 	bl	8001b6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ca0:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_ADC_Init+0x284>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	4a84      	ldr	r2, [pc, #528]	; (8001eb8 <HAL_ADC_Init+0x288>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cb4:	e002      	b.n	8001cbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f9      	bne.n	8001cb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff64 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10d      	bne.n	8001cee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f043 0210 	orr.w	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff75 	bl	8001be2 <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80c8 	bne.w	8001e98 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 80c4 	bne.w	8001e98 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff49 	bl	8001bbc <LL_ADC_IsEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d30:	4862      	ldr	r0, [pc, #392]	; (8001ebc <HAL_ADC_Init+0x28c>)
 8001d32:	f7ff ff43 	bl	8001bbc <LL_ADC_IsEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d105      	bne.n	8001d48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4619      	mov	r1, r3
 8001d42:	485f      	ldr	r0, [pc, #380]	; (8001ec0 <HAL_ADC_Init+0x290>)
 8001d44:	f7ff fdd4 	bl	80018f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e5b      	ldrb	r3, [r3, #25]
 8001d4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	045b      	lsls	r3, r3, #17
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_ADC_Init+0x294>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff12 	bl	8001be2 <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff1f 	bl	8001c08 <LL_ADC_INJ_IsConversionOngoing>
 8001dca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d140      	bne.n	8001e54 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13d      	bne.n	8001e54 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dfa:	f023 0306 	bic.w	r3, r3, #6
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d118      	bne.n	8001e44 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e34:	430a      	orrs	r2, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
 8001e42:	e007      	b.n	8001e54 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d10c      	bne.n	8001e76 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f023 010f 	bic.w	r1, r3, #15
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
 8001e74:	e007      	b.n	8001e86 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 020f 	bic.w	r2, r2, #15
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	; 0x58
 8001e96:	e007      	b.n	8001ea8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f043 0210 	orr.w	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	053e2d63 	.word	0x053e2d63
 8001ebc:	50040000 	.word	0x50040000
 8001ec0:	50040300 	.word	0x50040300
 8001ec4:	fff0c007 	.word	0xfff0c007

08001ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0b6      	sub	sp, #216	; 0xd8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x22>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e3d5      	b.n	8002696 <HAL_ADC_ConfigChannel+0x7ce>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe73 	bl	8001be2 <LL_ADC_REG_IsConversionOngoing>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 83ba 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3b02      	subs	r3, #2
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d81b      	bhi.n	8001f4e <HAL_ADC_ConfigChannel+0x86>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <HAL_ADC_ConfigChannel+0x54>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f35 	.word	0x08001f35
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f45 	.word	0x08001f45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	605a      	str	r2, [r3, #4]
          break;
 8001f32:	e011      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2212      	movs	r2, #18
 8001f38:	605a      	str	r2, [r3, #4]
          break;
 8001f3a:	e00d      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2218      	movs	r2, #24
 8001f40:	605a      	str	r2, [r3, #4]
          break;
 8001f42:	e009      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	605a      	str	r2, [r3, #4]
          break;
 8001f4c:	e004      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2206      	movs	r2, #6
 8001f52:	605a      	str	r2, [r3, #4]
          break;
 8001f54:	e000      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f7ff fd5f 	bl	8001a28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe37 	bl	8001be2 <LL_ADC_REG_IsConversionOngoing>
 8001f74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fe43 	bl	8001c08 <LL_ADC_INJ_IsConversionOngoing>
 8001f82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 81c1 	bne.w	8002312 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 81bc 	bne.w	8002312 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7ff fd66 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fd20 	bl	8001a02 <LL_ADC_SetSamplingTimeCommonConfig>
 8001fc2:	e00e      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f7ff fd55 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fd10 	bl	8001a02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00a      	beq.n	800201a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002014:	f7ff fca0 	bl	8001958 <LL_ADC_SetOffset>
 8002018:	e17b      	b.n	8002312 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fcbd 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x17e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fcb2 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	e01e      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1bc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fca7 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800206c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1d4>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	e018      	b.n	80020ce <HAL_ADC_ConfigChannel+0x206>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80020b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80020b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e004      	b.n	80020ce <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80020c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fc76 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fc5a 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10a      	bne.n	800210c <HAL_ADC_ConfigChannel+0x244>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fc4f 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	e01e      	b.n	800214a <HAL_ADC_ConfigChannel+0x282>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc44 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800212a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800212e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002132:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800213a:	2320      	movs	r3, #32
 800213c:	e004      	b.n	8002148 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800213e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x29a>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	e018      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2cc>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800217a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800217e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e004      	b.n	8002194 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800218a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002194:	429a      	cmp	r2, r3
 8002196:	d106      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2200      	movs	r2, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fc13 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2102      	movs	r1, #2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fbf7 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x30a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fbec 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	0e9b      	lsrs	r3, r3, #26
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	e01e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x348>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fbe1 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e004      	b.n	800220e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x360>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e9b      	lsrs	r3, r3, #26
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	e016      	b.n	8002256 <HAL_ADC_ConfigChannel+0x38e>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800223a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e004      	b.n	8002256 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800224c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	2102      	movs	r1, #2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fbb2 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2103      	movs	r1, #3
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fb96 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x3cc>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2103      	movs	r1, #3
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fb8b 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	e017      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x3fc>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2103      	movs	r1, #3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fb80 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80022ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ae:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80022b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80022b6:	2320      	movs	r3, #32
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80022ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x414>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	e011      	b.n	8002300 <HAL_ADC_ConfigChannel+0x438>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80022f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	2103      	movs	r1, #3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fb5d 	bl	80019cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc50 	bl	8001bbc <LL_ADC_IsEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8140 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	f7ff fbd1 	bl	8001ad8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a8f      	ldr	r2, [pc, #572]	; (8002578 <HAL_ADC_ConfigChannel+0x6b0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 8131 	bne.w	80025a4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_ADC_ConfigChannel+0x4a2>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	3301      	adds	r3, #1
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	2b09      	cmp	r3, #9
 8002360:	bf94      	ite	ls
 8002362:	2301      	movls	r3, #1
 8002364:	2300      	movhi	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e019      	b.n	800239e <HAL_ADC_ConfigChannel+0x4d6>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800237a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800237c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e003      	b.n	800238e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2b09      	cmp	r3, #9
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d079      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ADC_ConfigChannel+0x4f6>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023bc:	e015      	b.n	80023ea <HAL_ADC_ConfigChannel+0x522>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_ADC_ConfigChannel+0x542>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	e017      	b.n	800243a <HAL_ADC_ConfigChannel+0x572>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800241c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	ea42 0103 	orr.w	r1, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x598>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	3301      	adds	r3, #1
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	e018      	b.n	8002492 <HAL_ADC_ConfigChannel+0x5ca>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e003      	b.n	8002484 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800247c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247e:	fab3 f383 	clz	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002492:	430b      	orrs	r3, r1
 8002494:	e081      	b.n	800259a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x5ea>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	3301      	adds	r3, #1
 80024aa:	069b      	lsls	r3, r3, #26
 80024ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b0:	e015      	b.n	80024de <HAL_ADC_ConfigChannel+0x616>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80024ca:	2320      	movs	r3, #32
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	069b      	lsls	r3, r3, #26
 80024da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x636>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	0e9b      	lsrs	r3, r3, #26
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	e017      	b.n	800252e <HAL_ADC_ConfigChannel+0x666>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
  return result;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	ea42 0103 	orr.w	r1, r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10d      	bne.n	800255a <HAL_ADC_ConfigChannel+0x692>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	0e9b      	lsrs	r3, r3, #26
 8002544:	3301      	adds	r3, #1
 8002546:	f003 021f 	and.w	r2, r3, #31
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	051b      	lsls	r3, r3, #20
 8002554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002558:	e01e      	b.n	8002598 <HAL_ADC_ConfigChannel+0x6d0>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	613b      	str	r3, [r7, #16]
  return result;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e006      	b.n	8002584 <HAL_ADC_ConfigChannel+0x6bc>
 8002576:	bf00      	nop
 8002578:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	4613      	mov	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4413      	add	r3, r2
 8002590:	3b1e      	subs	r3, #30
 8002592:	051b      	lsls	r3, r3, #20
 8002594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002598:	430b      	orrs	r3, r1
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	4619      	mov	r1, r3
 80025a0:	f7ff fa6e 	bl	8001a80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d06c      	beq.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b0:	483c      	ldr	r0, [pc, #240]	; (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025b2:	f7ff f9c3 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 80025b6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_ADC_ConfigChannel+0x7e0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d127      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d121      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d157      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e2:	4619      	mov	r1, r3
 80025e4:	482f      	ldr	r0, [pc, #188]	; (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80025e6:	f7ff f996 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ea:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_ADC_ConfigChannel+0x7e8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	4a30      	ldr	r2, [pc, #192]	; (80026b4 <HAL_ADC_ConfigChannel+0x7ec>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002604:	e002      	b.n	800260c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3b01      	subs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f9      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002612:	e03a      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_ADC_ConfigChannel+0x7f0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d113      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x77e>
 800261e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10d      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d12a      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263c:	4619      	mov	r1, r3
 800263e:	4819      	ldr	r0, [pc, #100]	; (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002640:	f7ff f969 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002644:	e021      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_ADC_ConfigChannel+0x7f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d11c      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d116      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_ADC_ConfigChannel+0x7e4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d111      	bne.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800266a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002672:	f7ff f950 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
 8002676:	e008      	b.n	800268a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002692:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002696:	4618      	mov	r0, r3
 8002698:	37d8      	adds	r7, #216	; 0xd8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	80080000 	.word	0x80080000
 80026a4:	50040300 	.word	0x50040300
 80026a8:	c7520000 	.word	0xc7520000
 80026ac:	50040000 	.word	0x50040000
 80026b0:	20000004 	.word	0x20000004
 80026b4:	053e2d63 	.word	0x053e2d63
 80026b8:	cb840000 	.word	0xcb840000
 80026bc:	80000001 	.word	0x80000001

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	; (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	; (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff29 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff3e 	bl	8002708 <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff8e 	bl	80027b4 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff31 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa2 	bl	800281c <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0ac      	b.n	8002a50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f8b2 	bl	8002a64 <DFSDM_GetChannelFromInstance>
 8002900:	4603      	mov	r3, r0
 8002902:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_DFSDM_ChannelInit+0x174>)
 8002904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e09f      	b.n	8002a50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fbd3 	bl	80010bc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_DFSDM_ChannelInit+0x178>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	4a4f      	ldr	r2, [pc, #316]	; (8002a5c <HAL_DFSDM_ChannelInit+0x178>)
 800291e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002920:	4b4e      	ldr	r3, [pc, #312]	; (8002a5c <HAL_DFSDM_ChannelInit+0x178>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d125      	bne.n	8002974 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002928:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 800292e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002932:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4948      	ldr	r1, [pc, #288]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002942:	4b47      	ldr	r3, [pc, #284]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a46      	ldr	r2, [pc, #280]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002948:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800294c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	791b      	ldrb	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	3b01      	subs	r3, #1
 8002960:	041b      	lsls	r3, r3, #16
 8002962:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002968:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a3c      	ldr	r2, [pc, #240]	; (8002a60 <HAL_DFSDM_ChannelInit+0x17c>)
 800296e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002972:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002982:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002992:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002998:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 020f 	bic.w	r2, r2, #15
 80029b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80029d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 0207 	and.w	r2, r2, #7
 8002a04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f810 	bl	8002a64 <DFSDM_GetChannelFromInstance>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_DFSDM_ChannelInit+0x174>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200004e0 	.word	0x200004e0
 8002a5c:	200004dc 	.word	0x200004dc
 8002a60:	40016000 	.word	0x40016000

08002a64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d102      	bne.n	8002a7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e02b      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <DFSDM_GetChannelFromInstance+0x80>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d102      	bne.n	8002a88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e024      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <DFSDM_GetChannelFromInstance+0x84>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d102      	bne.n	8002a96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a90:	2302      	movs	r3, #2
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	e01d      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <DFSDM_GetChannelFromInstance+0x88>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d102      	bne.n	8002aa4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	e016      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d102      	bne.n	8002ab2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002aac:	2305      	movs	r3, #5
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e00f      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0f      	ldr	r2, [pc, #60]	; (8002af4 <DFSDM_GetChannelFromInstance+0x90>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d102      	bne.n	8002ac0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002aba:	2306      	movs	r3, #6
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e008      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <DFSDM_GetChannelFromInstance+0x94>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d102      	bne.n	8002ace <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ac8:	2307      	movs	r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e001      	b.n	8002ad2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40016000 	.word	0x40016000
 8002ae4:	40016020 	.word	0x40016020
 8002ae8:	40016040 	.word	0x40016040
 8002aec:	40016080 	.word	0x40016080
 8002af0:	400160a0 	.word	0x400160a0
 8002af4:	400160c0 	.word	0x400160c0
 8002af8:	400160e0 	.word	0x400160e0

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0a:	e166      	b.n	8002dda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8158 	beq.w	8002dd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d005      	beq.n	8002b3c <HAL_GPIO_Init+0x40>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d130      	bne.n	8002b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b72:	2201      	movs	r2, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 0201 	and.w	r2, r3, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d017      	beq.n	8002bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d123      	bne.n	8002c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	6939      	ldr	r1, [r7, #16]
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0203 	and.w	r2, r3, #3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80b2 	beq.w	8002dd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c70:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_GPIO_Init+0x2fc>)
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	4a60      	ldr	r2, [pc, #384]	; (8002df8 <HAL_GPIO_Init+0x2fc>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_GPIO_Init+0x2fc>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c88:	4a5c      	ldr	r2, [pc, #368]	; (8002dfc <HAL_GPIO_Init+0x300>)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cb2:	d02b      	beq.n	8002d0c <HAL_GPIO_Init+0x210>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x304>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d025      	beq.n	8002d08 <HAL_GPIO_Init+0x20c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a51      	ldr	r2, [pc, #324]	; (8002e04 <HAL_GPIO_Init+0x308>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d01f      	beq.n	8002d04 <HAL_GPIO_Init+0x208>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d019      	beq.n	8002d00 <HAL_GPIO_Init+0x204>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_GPIO_Init+0x310>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_GPIO_Init+0x200>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4e      	ldr	r2, [pc, #312]	; (8002e10 <HAL_GPIO_Init+0x314>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00d      	beq.n	8002cf8 <HAL_GPIO_Init+0x1fc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_GPIO_Init+0x318>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d007      	beq.n	8002cf4 <HAL_GPIO_Init+0x1f8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_GPIO_Init+0x31c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_GPIO_Init+0x1f4>
 8002cec:	2307      	movs	r3, #7
 8002cee:	e00e      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	e00c      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf4:	2306      	movs	r3, #6
 8002cf6:	e00a      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf8:	2305      	movs	r3, #5
 8002cfa:	e008      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e006      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e004      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_GPIO_Init+0x212>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	f002 0203 	and.w	r2, r2, #3
 8002d14:	0092      	lsls	r2, r2, #2
 8002d16:	4093      	lsls	r3, r2
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d1e:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_GPIO_Init+0x300>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d50:	4a32      	ldr	r2, [pc, #200]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d56:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f ae91 	bne.w	8002b0c <HAL_GPIO_Init+0x10>
  }
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	48000c00 	.word	0x48000c00
 8002e0c:	48001000 	.word	0x48001000
 8002e10:	48001400 	.word	0x48001400
 8002e14:	48001800 	.word	0x48001800
 8002e18:	48001c00 	.word	0x48001c00
 8002e1c:	40010400 	.word	0x40010400

08002e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e30:	787b      	ldrb	r3, [r7, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e3c:	e002      	b.n	8002e44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f806 	bl	8002e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e081      	b.n	8002fac <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe f961 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2224      	movs	r2, #36	; 0x24
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	e006      	b.n	8002f1e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d104      	bne.n	8002f30 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69d9      	ldr	r1, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1a      	ldr	r2, [r3, #32]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	817b      	strh	r3, [r7, #10]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	813b      	strh	r3, [r7, #8]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f040 80f9 	bne.w	80031ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x34>
 8002fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ed      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Mem_Write+0x4e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0e6      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800300a:	f7fe fc65 	bl	80018d8 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fac3 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d1      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2221      	movs	r2, #33	; 0x21
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2240      	movs	r2, #64	; 0x40
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003054:	88f8      	ldrh	r0, [r7, #6]
 8003056:	893a      	ldrh	r2, [r7, #8]
 8003058:	8979      	ldrh	r1, [r7, #10]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	4603      	mov	r3, r0
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f9d3 	bl	8003410 <I2C_RequestMemoryWrite>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0a9      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc2b 	bl	80038f8 <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fc1a 	bl	80038f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 faad 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e07b      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d034      	beq.n	800317c <HAL_I2C_Mem_Write+0x1c8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b00      	cmp	r3, #0
 8003118:	d130      	bne.n	800317c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2200      	movs	r2, #0
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fa3f 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e04d      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d90e      	bls.n	800315c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fbcf 	bl	80038f8 <I2C_TransferConfig>
 800315a:	e00f      	b.n	800317c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	b2da      	uxtb	r2, r3
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fbbe 	bl	80038f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d19e      	bne.n	80030c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa8c 	bl	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01a      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_I2C_Mem_Write+0x224>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	817b      	strh	r3, [r7, #10]
 80031ee:	460b      	mov	r3, r1
 80031f0:	813b      	strh	r3, [r7, #8]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b20      	cmp	r3, #32
 8003200:	f040 80fd 	bne.w	80033fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_I2C_Mem_Read+0x34>
 800320a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0f1      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_I2C_Mem_Read+0x4e>
 8003226:	2302      	movs	r3, #2
 8003228:	e0ea      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003232:	f7fe fb51 	bl	80018d8 <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f9af 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0d5      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2222      	movs	r2, #34	; 0x22
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800327c:	88f8      	ldrh	r0, [r7, #6]
 800327e:	893a      	ldrh	r2, [r7, #8]
 8003280:	8979      	ldrh	r1, [r7, #10]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	4603      	mov	r3, r0
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f913 	bl	80034b8 <I2C_RequestMemoryRead>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0ad      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2bff      	cmp	r3, #255	; 0xff
 80032ac:	d90e      	bls.n	80032cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	22ff      	movs	r2, #255	; 0xff
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	4b52      	ldr	r3, [pc, #328]	; (8003408 <HAL_I2C_Mem_Read+0x22c>)
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fb17 	bl	80038f8 <I2C_TransferConfig>
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <HAL_I2C_Mem_Read+0x22c>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fb06 	bl	80038f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	2200      	movs	r2, #0
 80032f4:	2104      	movs	r1, #4
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f956 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e07c      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d034      	beq.n	80033ac <HAL_I2C_Mem_Read+0x1d0>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	2b00      	cmp	r3, #0
 8003348:	d130      	bne.n	80033ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f927 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e04d      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2bff      	cmp	r3, #255	; 0xff
 800336c:	d90e      	bls.n	800338c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	22ff      	movs	r2, #255	; 0xff
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fab7 	bl	80038f8 <I2C_TransferConfig>
 800338a:	e00f      	b.n	80033ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	b2da      	uxtb	r2, r3
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	2300      	movs	r3, #0
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 faa6 	bl	80038f8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d19a      	bne.n	80032ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f974 	bl	80036a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e01a      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2220      	movs	r2, #32
 80033d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_I2C_Mem_Read+0x230>)
 80033de:	400b      	ands	r3, r1
 80033e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	80002400 	.word	0x80002400
 800340c:	fe00e800 	.word	0xfe00e800

08003410 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	817b      	strh	r3, [r7, #10]
 8003422:	460b      	mov	r3, r1
 8003424:	813b      	strh	r3, [r7, #8]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	8979      	ldrh	r1, [r7, #10]
 8003430:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <I2C_RequestMemoryWrite+0xa4>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fa5d 	bl	80038f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f8f0 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e02c      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003458:	893b      	ldrh	r3, [r7, #8]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
 8003462:	e015      	b.n	8003490 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2da      	uxtb	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f8d6 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e012      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003486:	893b      	ldrh	r3, [r7, #8]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2200      	movs	r2, #0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f884 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	80002000 	.word	0x80002000

080034b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	8979      	ldrh	r1, [r7, #10]
 80034d8:	4b20      	ldr	r3, [pc, #128]	; (800355c <I2C_RequestMemoryRead+0xa4>)
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2300      	movs	r3, #0
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fa0a 	bl	80038f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	69b9      	ldr	r1, [r7, #24]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f89d 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e02c      	b.n	8003552 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034fe:	893b      	ldrh	r3, [r7, #8]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
 8003508:	e015      	b.n	8003536 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	b29b      	uxth	r3, r3
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f883 	bl	8003628 <I2C_WaitOnTXISFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e012      	b.n	8003552 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2200      	movs	r2, #0
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f831 	bl	80035a8 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	80002000 	.word	0x80002000

08003560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d103      	bne.n	800357e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d007      	beq.n	800359c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	619a      	str	r2, [r3, #24]
  }
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b8:	e022      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d01e      	beq.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe f989 	bl	80018d8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d113      	bne.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e00f      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	d0cd      	beq.n	80035ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003634:	e02c      	b.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f870 	bl	8003720 <I2C_IsErrorOccurred>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e02a      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d01e      	beq.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fe f941 	bl	80018d8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d1cb      	bne.n	8003636 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b4:	e028      	b.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f830 	bl	8003720 <I2C_IsErrorOccurred>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e026      	b.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe f905 	bl	80018d8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d113      	bne.n	8003708 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b20      	cmp	r3, #32
 8003714:	d1cf      	bne.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d075      	beq.n	8003838 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2210      	movs	r2, #16
 8003752:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003754:	e056      	b.n	8003804 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d052      	beq.n	8003804 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fe f8bb 	bl	80018d8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <I2C_IsErrorOccurred+0x54>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d147      	bne.n	8003804 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003786:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003796:	d12e      	bne.n	80037f6 <I2C_IsErrorOccurred+0xd6>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379e:	d02a      	beq.n	80037f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80037a0:	7cfb      	ldrb	r3, [r7, #19]
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d027      	beq.n	80037f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037b6:	f7fe f88f 	bl	80018d8 <HAL_GetTick>
 80037ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037bc:	e01b      	b.n	80037f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037be:	f7fe f88b 	bl	80018d8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b19      	cmp	r3, #25
 80037ca:	d914      	bls.n	80037f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b20      	cmp	r3, #32
 8003802:	d1dc      	bne.n	80037be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b20      	cmp	r3, #32
 8003810:	d003      	beq.n	800381a <I2C_IsErrorOccurred+0xfa>
 8003812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003816:	2b00      	cmp	r3, #0
 8003818:	d09d      	beq.n	8003756 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800381a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2220      	movs	r2, #32
 8003828:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800385a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f043 0308 	orr.w	r3, r3, #8
 8003872:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80038a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01c      	beq.n	80038e8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fe56 	bl	8003560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <I2C_IsErrorOccurred+0x1d4>)
 80038c0:	400b      	ands	r3, r1
 80038c2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	fe00e800 	.word	0xfe00e800

080038f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	4613      	mov	r3, r2
 8003908:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003910:	7a7b      	ldrb	r3, [r7, #9]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003918:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	4313      	orrs	r3, r2
 8003922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003926:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	0d5b      	lsrs	r3, r3, #21
 8003932:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <I2C_TransferConfig+0x60>)
 8003938:	430b      	orrs	r3, r1
 800393a:	43db      	mvns	r3, r3
 800393c:	ea02 0103 	and.w	r1, r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	03ff63ff 	.word	0x03ff63ff

0800395c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b20      	cmp	r3, #32
 8003970:	d138      	bne.n	80039e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800397c:	2302      	movs	r3, #2
 800397e:	e032      	b.n	80039e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d139      	bne.n	8003a7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e033      	b.n	8003a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2224      	movs	r2, #36	; 0x24
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e000      	b.n	8003a7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
  }
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7fd ff1e 	bl	80018d8 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e092      	b.n	8003bd0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 808b 	bne.w	8003bd0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fc04 	bl	80012c8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003ac0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f88b 	bl	8003be0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b42      	ldr	r3, [pc, #264]	; (8003bdc <HAL_OSPI_Init+0x150>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68d1      	ldr	r1, [r2, #12]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6912      	ldr	r2, [r2, #16]
 8003adc:	3a01      	subs	r2, #1
 8003ade:	0412      	lsls	r2, r2, #16
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6952      	ldr	r2, [r2, #20]
 8003ae6:	3a01      	subs	r2, #1
 8003ae8:	0212      	lsls	r2, r2, #8
 8003aea:	4311      	orrs	r1, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	69d2      	ldr	r2, [r2, #28]
 8003af6:	4311      	orrs	r1, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0412      	lsls	r2, r2, #16
 8003b0a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2120      	movs	r1, #32
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb98 	bl	8004268 <OSPI_WaitFlagStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d146      	bne.n	8003bd0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b78:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d107      	bne.n	8003bb8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0202 	orr.w	r2, r2, #2
 8003bb6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc0:	d103      	bne.n	8003bca <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8003bc8:	e002      	b.n	8003bd0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	f8e0f8f4 	.word	0xf8e0f8f4

08003be0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b092      	sub	sp, #72	; 0x48
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <HAL_OSPIM_Config+0x40>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d105      	bne.n	8003c2e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003c2c:	e004      	b.n	8003c38 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003c3e:	e01f      	b.n	8003c80 <HAL_OSPIM_Config+0x80>
 8003c40:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003c44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c48:	3301      	adds	r3, #1
 8003c4a:	b2d8      	uxtb	r0, r3
 8003c4c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003c50:	f107 0114 	add.w	r1, r7, #20
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f000 fb3a 	bl	80042d8 <OSPIM_GetConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2208      	movs	r2, #8
 8003c74:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003c76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003c80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d9dd      	bls.n	8003c44 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003c88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 82de 	bne.w	800424e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003c92:	4bc6      	ldr	r3, [pc, #792]	; (8003fac <HAL_OSPIM_Config+0x3ac>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003c9e:	4bc3      	ldr	r3, [pc, #780]	; (8003fac <HAL_OSPIM_Config+0x3ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4ac2      	ldr	r2, [pc, #776]	; (8003fac <HAL_OSPIM_Config+0x3ac>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003caa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003cb6:	4bbe      	ldr	r3, [pc, #760]	; (8003fb0 <HAL_OSPIM_Config+0x3b0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003cc2:	4bbb      	ldr	r3, [pc, #748]	; (8003fb0 <HAL_OSPIM_Config+0x3b0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4aba      	ldr	r2, [pc, #744]	; (8003fb0 <HAL_OSPIM_Config+0x3b0>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003cce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003cd2:	f043 0302 	orr.w	r3, r3, #2
 8003cd6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003cda:	49b6      	ldr	r1, [pc, #728]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003cdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	3348      	adds	r3, #72	; 0x48
 8003ce8:	443b      	add	r3, r7
 8003cea:	3b2c      	subs	r3, #44	; 0x2c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	48af      	ldr	r0, [pc, #700]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	3348      	adds	r3, #72	; 0x48
 8003d04:	443b      	add	r3, r7
 8003d06:	3b2c      	subs	r3, #44	; 0x2c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3348      	adds	r3, #72	; 0x48
 8003d22:	443b      	add	r3, r7
 8003d24:	3b34      	subs	r3, #52	; 0x34
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a1 	beq.w	8003e70 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003d2e:	49a1      	ldr	r1, [pc, #644]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003d30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	3348      	adds	r3, #72	; 0x48
 8003d3c:	443b      	add	r3, r7
 8003d3e:	3b34      	subs	r3, #52	; 0x34
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	489a      	ldr	r0, [pc, #616]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003d4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3348      	adds	r3, #72	; 0x48
 8003d58:	443b      	add	r3, r7
 8003d5a:	3b34      	subs	r3, #52	; 0x34
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	f021 0201 	bic.w	r2, r1, #1
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4403      	add	r3, r0
 8003d68:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	3348      	adds	r3, #72	; 0x48
 8003d76:	443b      	add	r3, r7
 8003d78:	3b30      	subs	r3, #48	; 0x30
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003d80:	498c      	ldr	r1, [pc, #560]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	3348      	adds	r3, #72	; 0x48
 8003d8e:	443b      	add	r3, r7
 8003d90:	3b30      	subs	r3, #48	; 0x30
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	4885      	ldr	r0, [pc, #532]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	3348      	adds	r3, #72	; 0x48
 8003daa:	443b      	add	r3, r7
 8003dac:	3b30      	subs	r3, #48	; 0x30
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	f021 0210 	bic.w	r2, r1, #16
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4403      	add	r3, r0
 8003dba:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003dbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3348      	adds	r3, #72	; 0x48
 8003dc8:	443b      	add	r3, r7
 8003dca:	3b28      	subs	r3, #40	; 0x28
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d021      	beq.n	8003e16 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003dd2:	4978      	ldr	r1, [pc, #480]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	3348      	adds	r3, #72	; 0x48
 8003de0:	443b      	add	r3, r7
 8003de2:	3b28      	subs	r3, #40	; 0x28
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	4870      	ldr	r0, [pc, #448]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3348      	adds	r3, #72	; 0x48
 8003e00:	443b      	add	r3, r7
 8003e02:	3b28      	subs	r3, #40	; 0x28
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4403      	add	r3, r0
 8003e14:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3348      	adds	r3, #72	; 0x48
 8003e22:	443b      	add	r3, r7
 8003e24:	3b24      	subs	r3, #36	; 0x24
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d021      	beq.n	8003e70 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003e2c:	4961      	ldr	r1, [pc, #388]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e30:	4613      	mov	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	3348      	adds	r3, #72	; 0x48
 8003e3a:	443b      	add	r3, r7
 8003e3c:	3b24      	subs	r3, #36	; 0x24
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	4859      	ldr	r0, [pc, #356]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	3348      	adds	r3, #72	; 0x48
 8003e5a:	443b      	add	r3, r7
 8003e5c:	3b24      	subs	r3, #36	; 0x24
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4403      	add	r3, r0
 8003e6e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	3348      	adds	r3, #72	; 0x48
 8003e82:	443b      	add	r3, r7
 8003e84:	3b34      	subs	r3, #52	; 0x34
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	d038      	beq.n	8003efe <HAL_OSPIM_Config+0x2fe>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	3348      	adds	r3, #72	; 0x48
 8003e9e:	443b      	add	r3, r7
 8003ea0:	3b30      	subs	r3, #48	; 0x30
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d02a      	beq.n	8003efe <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	6899      	ldr	r1, [r3, #8]
 8003eac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	3348      	adds	r3, #72	; 0x48
 8003eba:	443b      	add	r3, r7
 8003ebc:	3b2c      	subs	r3, #44	; 0x2c
 8003ebe:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d01c      	beq.n	8003efe <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	3348      	adds	r3, #72	; 0x48
 8003ed6:	443b      	add	r3, r7
 8003ed8:	3b28      	subs	r3, #40	; 0x28
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4299      	cmp	r1, r3
 8003ede:	d00e      	beq.n	8003efe <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6919      	ldr	r1, [r3, #16]
 8003ee4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	3348      	adds	r3, #72	; 0x48
 8003ef2:	443b      	add	r3, r7
 8003ef4:	3b24      	subs	r3, #36	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003ef8:	4299      	cmp	r1, r3
 8003efa:	f040 80d3 	bne.w	80040a4 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003efe:	492d      	ldr	r1, [pc, #180]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003f00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	3348      	adds	r3, #72	; 0x48
 8003f0e:	443b      	add	r3, r7
 8003f10:	3b34      	subs	r3, #52	; 0x34
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	4825      	ldr	r0, [pc, #148]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003f1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	3348      	adds	r3, #72	; 0x48
 8003f2c:	443b      	add	r3, r7
 8003f2e:	3b34      	subs	r3, #52	; 0x34
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	f021 0201 	bic.w	r2, r1, #1
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4403      	add	r3, r0
 8003f3c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003f3e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	3348      	adds	r3, #72	; 0x48
 8003f4c:	443b      	add	r3, r7
 8003f4e:	3b30      	subs	r3, #48	; 0x30
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01f      	beq.n	8003f96 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003f56:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003f58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	3348      	adds	r3, #72	; 0x48
 8003f66:	443b      	add	r3, r7
 8003f68:	3b30      	subs	r3, #48	; 0x30
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	480f      	ldr	r0, [pc, #60]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003f76:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3348      	adds	r3, #72	; 0x48
 8003f84:	443b      	add	r3, r7
 8003f86:	3b30      	subs	r3, #48	; 0x30
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	f021 0210 	bic.w	r2, r1, #16
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003f96:	4907      	ldr	r1, [pc, #28]	; (8003fb4 <HAL_OSPIM_Config+0x3b4>)
 8003f98:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	3348      	adds	r3, #72	; 0x48
 8003fa6:	443b      	add	r3, r7
 8003fa8:	3b2c      	subs	r3, #44	; 0x2c
 8003faa:	e005      	b.n	8003fb8 <HAL_OSPIM_Config+0x3b8>
 8003fac:	a0001000 	.word	0xa0001000
 8003fb0:	a0001400 	.word	0xa0001400
 8003fb4:	50061c00 	.word	0x50061c00
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	48a6      	ldr	r0, [pc, #664]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8003fc4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	3348      	adds	r3, #72	; 0x48
 8003fd2:	443b      	add	r3, r7
 8003fd4:	3b2c      	subs	r3, #44	; 0x2c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4403      	add	r3, r0
 8003fe2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fe4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	3348      	adds	r3, #72	; 0x48
 8003ff2:	443b      	add	r3, r7
 8003ff4:	3b28      	subs	r3, #40	; 0x28
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003ffc:	4997      	ldr	r1, [pc, #604]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8003ffe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	3348      	adds	r3, #72	; 0x48
 800400c:	443b      	add	r3, r7
 800400e:	3b28      	subs	r3, #40	; 0x28
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	488f      	ldr	r0, [pc, #572]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004020:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	3348      	adds	r3, #72	; 0x48
 800402e:	443b      	add	r3, r7
 8004030:	3b28      	subs	r3, #40	; 0x28
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3b01      	subs	r3, #1
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4403      	add	r3, r0
 8004042:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004044:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	3348      	adds	r3, #72	; 0x48
 8004052:	443b      	add	r3, r7
 8004054:	3b24      	subs	r3, #36	; 0x24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800405c:	497f      	ldr	r1, [pc, #508]	; (800425c <HAL_OSPIM_Config+0x65c>)
 800405e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3348      	adds	r3, #72	; 0x48
 800406c:	443b      	add	r3, r7
 800406e:	3b24      	subs	r3, #36	; 0x24
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3b01      	subs	r3, #1
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	6859      	ldr	r1, [r3, #4]
 800407e:	4877      	ldr	r0, [pc, #476]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004080:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3348      	adds	r3, #72	; 0x48
 800408e:	443b      	add	r3, r7
 8004090:	3b24      	subs	r3, #36	; 0x24
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3b01      	subs	r3, #1
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4403      	add	r3, r0
 80040a2:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80040a4:	4a6d      	ldr	r2, [pc, #436]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	431a      	orrs	r2, r3
 80040bc:	4967      	ldr	r1, [pc, #412]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80040ce:	4a63      	ldr	r2, [pc, #396]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 0203 	bic.w	r2, r3, #3
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	495d      	ldr	r1, [pc, #372]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d014      	beq.n	800412a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004100:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	015b      	lsls	r3, r3, #5
 8004116:	431a      	orrs	r2, r3
 8004118:	4950      	ldr	r1, [pc, #320]	; (800425c <HAL_OSPIM_Config+0x65c>)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f042 0210 	orr.w	r2, r2, #16
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d019      	beq.n	800416a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004136:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	3b01      	subs	r3, #1
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800414c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414e:	049b      	lsls	r3, r3, #18
 8004150:	431a      	orrs	r2, r3
 8004152:	4942      	ldr	r1, [pc, #264]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e01c      	b.n	80041a4 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	3b01      	subs	r3, #1
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418a:	069b      	lsls	r3, r3, #26
 800418c:	431a      	orrs	r2, r3
 800418e:	4933      	ldr	r1, [pc, #204]	; (800425c <HAL_OSPIM_Config+0x65c>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d019      	beq.n	80041e4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	049b      	lsls	r3, r3, #18
 80041ca:	431a      	orrs	r2, r3
 80041cc:	4923      	ldr	r1, [pc, #140]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e01c      	b.n	800421e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d018      	beq.n	800421e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_OSPIM_Config+0x65c>)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004204:	069b      	lsls	r3, r3, #26
 8004206:	431a      	orrs	r2, r3
 8004208:	4914      	ldr	r1, [pc, #80]	; (800425c <HAL_OSPIM_Config+0x65c>)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	3b01      	subs	r3, #1
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800421e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_OSPIM_Config+0x660>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_OSPIM_Config+0x660>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004236:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_OSPIM_Config+0x664>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_OSPIM_Config+0x664>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800424e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004252:	4618      	mov	r0, r3
 8004254:	3748      	adds	r7, #72	; 0x48
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	50061c00 	.word	0x50061c00
 8004260:	a0001000 	.word	0xa0001000
 8004264:	a0001400 	.word	0xa0001400

08004268 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004278:	e01a      	b.n	80042b0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d016      	beq.n	80042b0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fd fb29 	bl	80018d8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	f043 0201 	orr.w	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e00e      	b.n	80042ce <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1d6      	bne.n	800427a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	6039      	str	r1, [r7, #0]
 80042e2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <OSPIM_GetConfig+0x26>
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d802      	bhi.n	80042fe <OSPIM_GetConfig+0x26>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]
 8004302:	e08e      	b.n	8004422 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d101      	bne.n	800432c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <OSPIM_GetConfig+0x158>)
 800432a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e074      	b.n	800441c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <OSPIM_GetConfig+0x15c>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4053      	eors	r3, r2
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4053      	eors	r3, r2
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4053      	eors	r3, r2
 800438e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4053      	eors	r3, r2
 80043ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d111      	bne.n	80043da <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e005      	b.n	80043da <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d018      	beq.n	8004416 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4053      	eors	r3, r2
 80043ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d111      	bne.n	8004416 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d106      	bne.n	800440a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	611a      	str	r2, [r3, #16]
 8004408:	e005      	b.n	8004416 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d987      	bls.n	8004332 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	04040222 	.word	0x04040222
 8004434:	50061c00 	.word	0x50061c00

08004438 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000

08004458 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <HAL_PWREx_GetVoltageRange+0x3c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d102      	bne.n	8004470 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800446a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800446e:	e00b      	b.n	8004488 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800447e:	d102      	bne.n	8004486 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004484:	e000      	b.n	8004488 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004486:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40007000 	.word	0x40007000

08004498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d141      	bne.n	800452a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a6:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d131      	bne.n	8004518 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ba:	4a46      	ldr	r2, [pc, #280]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c4:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044cc:	4a41      	ldr	r2, [pc, #260]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80044d4:	4b40      	ldr	r3, [pc, #256]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2232      	movs	r2, #50	; 0x32
 80044da:	fb02 f303 	mul.w	r3, r2, r3
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0c9b      	lsrs	r3, r3, #18
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ea:	e002      	b.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fe:	d102      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f2      	bne.n	80044ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004512:	d158      	bne.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e057      	b.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004518:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004528:	e04d      	b.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004530:	d141      	bne.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004532:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453e:	d131      	bne.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004540:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004546:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004550:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800455a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800455e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2232      	movs	r2, #50	; 0x32
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0c9b      	lsrs	r3, r3, #18
 8004572:	3301      	adds	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004576:	e002      	b.n	800457e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458a:	d102      	bne.n	8004592 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f2      	bne.n	8004578 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459e:	d112      	bne.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e011      	b.n	80045c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80045b4:	e007      	b.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40007000 	.word	0x40007000
 80045d8:	20000004 	.word	0x20000004
 80045dc:	431bde83 	.word	0x431bde83

080045e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f000 bc08 	b.w	8004e04 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f4:	4b96      	ldr	r3, [pc, #600]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045fe:	4b94      	ldr	r3, [pc, #592]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80e4 	beq.w	80047de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_RCC_OscConfig+0x4c>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	f040 808b 	bne.w	800473a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	f040 8087 	bne.w	800473a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800462c:	4b88      	ldr	r3, [pc, #544]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x64>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e3df      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	4b81      	ldr	r3, [pc, #516]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_RCC_OscConfig+0x7e>
 8004654:	4b7e      	ldr	r3, [pc, #504]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465c:	e005      	b.n	800466a <HAL_RCC_OscConfig+0x8a>
 800465e:	4b7c      	ldr	r3, [pc, #496]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466a:	4293      	cmp	r3, r2
 800466c:	d223      	bcs.n	80046b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fdcc 	bl	8005210 <RCC_SetFlashLatencyFromMSIRange>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e3c0      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004682:	4b73      	ldr	r3, [pc, #460]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a72      	ldr	r2, [pc, #456]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004688:	f043 0308 	orr.w	r3, r3, #8
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b70      	ldr	r3, [pc, #448]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	496d      	ldr	r1, [pc, #436]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046a0:	4b6b      	ldr	r3, [pc, #428]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4968      	ldr	r1, [pc, #416]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e025      	b.n	8004702 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b6:	4b66      	ldr	r3, [pc, #408]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a65      	ldr	r2, [pc, #404]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046bc:	f043 0308 	orr.w	r3, r3, #8
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4960      	ldr	r1, [pc, #384]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d4:	4b5e      	ldr	r3, [pc, #376]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	495b      	ldr	r1, [pc, #364]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fd8c 	bl	8005210 <RCC_SetFlashLatencyFromMSIRange>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e380      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004702:	f000 fcc1 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8004706:	4602      	mov	r2, r0
 8004708:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	4950      	ldr	r1, [pc, #320]	; (8004854 <HAL_RCC_OscConfig+0x274>)
 8004714:	5ccb      	ldrb	r3, [r1, r3]
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_RCC_OscConfig+0x278>)
 8004720:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004722:	4b4e      	ldr	r3, [pc, #312]	; (800485c <HAL_RCC_OscConfig+0x27c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd f886 	bl	8001838 <HAL_InitTick>
 800472c:	4603      	mov	r3, r0
 800472e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d052      	beq.n	80047dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	e364      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d032      	beq.n	80047a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004742:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800474e:	f7fd f8c3 	bl	80018d8 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004756:	f7fd f8bf 	bl	80018d8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e34d      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004768:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800477a:	f043 0308 	orr.w	r3, r3, #8
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4930      	ldr	r1, [pc, #192]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	021b      	lsls	r3, r3, #8
 80047a0:	492b      	ldr	r1, [pc, #172]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
 80047a6:	e01a      	b.n	80047de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047ae:	f023 0301 	bic.w	r3, r3, #1
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047b4:	f7fd f890 	bl	80018d8 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047bc:	f7fd f88c 	bl	80018d8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e31a      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x1dc>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d073      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_OscConfig+0x21c>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d10e      	bne.n	8004814 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d063      	beq.n	80048d0 <HAL_RCC_OscConfig+0x2f0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d15f      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e2f7      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x24c>
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e025      	b.n	8004878 <HAL_RCC_OscConfig+0x298>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d114      	bne.n	8004860 <HAL_RCC_OscConfig+0x280>
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a02      	ldr	r2, [pc, #8]	; (8004850 <HAL_RCC_OscConfig+0x270>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e013      	b.n	8004878 <HAL_RCC_OscConfig+0x298>
 8004850:	40021000 	.word	0x40021000
 8004854:	08006ba0 	.word	0x08006ba0
 8004858:	20000004 	.word	0x20000004
 800485c:	20000008 	.word	0x20000008
 8004860:	4ba0      	ldr	r3, [pc, #640]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a9f      	ldr	r2, [pc, #636]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b9d      	ldr	r3, [pc, #628]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a9c      	ldr	r2, [pc, #624]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd f82a 	bl	80018d8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd f826 	bl	80018d8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e2b4      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	4b92      	ldr	r3, [pc, #584]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x2a8>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd f816 	bl	80018d8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd f812 	bl	80018d8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e2a0      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	4b88      	ldr	r3, [pc, #544]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2d0>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d060      	beq.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x310>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d119      	bne.n	800491e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d116      	bne.n	800491e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f0:	4b7c      	ldr	r3, [pc, #496]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_OscConfig+0x328>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e27d      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004908:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	4973      	ldr	r1, [pc, #460]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800491c:	e040      	b.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d023      	beq.n	800496e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004926:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fc ffd1 	bl	80018d8 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493a:	f7fc ffcd 	bl	80018d8 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e25b      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494c:	4b65      	ldr	r3, [pc, #404]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b62      	ldr	r3, [pc, #392]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	495f      	ldr	r1, [pc, #380]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e018      	b.n	80049a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496e:	4b5d      	ldr	r3, [pc, #372]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5c      	ldr	r2, [pc, #368]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fc ffad 	bl	80018d8 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004982:	f7fc ffa9 	bl	80018d8 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e237      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004994:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d03c      	beq.n	8004a26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b4:	4b4b      	ldr	r3, [pc, #300]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ba:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fc ff88 	bl	80018d8 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049cc:	f7fc ff84 	bl	80018d8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e212      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049de:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ef      	beq.n	80049cc <HAL_RCC_OscConfig+0x3ec>
 80049ec:	e01b      	b.n	8004a26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ee:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fc ff6b 	bl	80018d8 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fc ff67 	bl	80018d8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e1f5      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a18:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ef      	bne.n	8004a06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80a6 	beq.w	8004b80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a38:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d118      	bne.n	8004a9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a78:	f7fc ff2e 	bl	80018d8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a80:	f7fc ff2a 	bl	80018d8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1b8      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x508>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d108      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x4d8>
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab6:	e029      	b.n	8004b0c <HAL_RCC_OscConfig+0x52c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d115      	bne.n	8004aec <HAL_RCC_OscConfig+0x50c>
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a03      	ldr	r2, [pc, #12]	; (8004ae4 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae0:	e014      	b.n	8004b0c <HAL_RCC_OscConfig+0x52c>
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	4b9d      	ldr	r3, [pc, #628]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	4a9c      	ldr	r2, [pc, #624]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004afc:	4b99      	ldr	r3, [pc, #612]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	4a98      	ldr	r2, [pc, #608]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b14:	f7fc fee0 	bl	80018d8 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1c:	f7fc fedc 	bl	80018d8 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e168      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b32:	4b8c      	ldr	r3, [pc, #560]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ed      	beq.n	8004b1c <HAL_RCC_OscConfig+0x53c>
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b42:	f7fc fec9 	bl	80018d8 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fc fec5 	bl	80018d8 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e151      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b60:	4b80      	ldr	r3, [pc, #512]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ed      	bne.n	8004b4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b74:	4b7b      	ldr	r3, [pc, #492]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	4a7a      	ldr	r2, [pc, #488]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d03c      	beq.n	8004c06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01c      	beq.n	8004bce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b94:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b9a:	4a72      	ldr	r2, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fc fe98 	bl	80018d8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bac:	f7fc fe94 	bl	80018d8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e122      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bbe:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ef      	beq.n	8004bac <HAL_RCC_OscConfig+0x5cc>
 8004bcc:	e01b      	b.n	8004c06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bce:	4b65      	ldr	r3, [pc, #404]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	4a63      	ldr	r2, [pc, #396]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fc fe7b 	bl	80018d8 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004be6:	f7fc fe77 	bl	80018d8 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e105      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf8:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1ef      	bne.n	8004be6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80f9 	beq.w	8004e02 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	f040 80cf 	bne.w	8004db8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c1a:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d12c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d123      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d11b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d113      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d109      	bne.n	8004c88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	3b01      	subs	r3, #1
 8004c82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d071      	beq.n	8004d6c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b0c      	cmp	r3, #12
 8004c8c:	d068      	beq.n	8004d60 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c8e:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0ac      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb6:	f7fc fe0f 	bl	80018d8 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fc fe0b 	bl	80018d8 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e099      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd0:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_RCC_OscConfig+0x788>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cf6:	0212      	lsls	r2, r2, #8
 8004cf8:	4311      	orrs	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0552      	lsls	r2, r2, #21
 8004d04:	4311      	orrs	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d0a:	0852      	lsrs	r2, r2, #1
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	0652      	lsls	r2, r2, #25
 8004d10:	4311      	orrs	r1, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d16:	06d2      	lsls	r2, r2, #27
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	4912      	ldr	r1, [pc, #72]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d38:	f7fc fdce 	bl	80018d8 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fc fdca 	bl	80018d8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e058      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d52:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_OscConfig+0x784>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d5e:	e050      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e04f      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
 8004d64:	40021000 	.word	0x40021000
 8004d68:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d6c:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d144      	bne.n	8004e02 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a23      	ldr	r2, [pc, #140]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d84:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d90:	f7fc fda2 	bl	80018d8 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fc fd9e 	bl	80018d8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e02c      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x7b8>
 8004db6:	e024      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d01f      	beq.n	8004dfe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fc fd85 	bl	80018d8 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fc fd81 	bl	80018d8 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e00f      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	4905      	ldr	r1, [pc, #20]	; (8004e0c <HAL_RCC_OscConfig+0x82c>)
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_RCC_OscConfig+0x830>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	60cb      	str	r3, [r1, #12]
 8004dfc:	e001      	b.n	8004e02 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	feeefffc 	.word	0xfeeefffc

08004e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e11d      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b90      	ldr	r3, [pc, #576]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d910      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 020f 	bic.w	r2, r3, #15
 8004e42:	498b      	ldr	r1, [pc, #556]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b89      	ldr	r3, [pc, #548]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e105      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d908      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b7e      	ldr	r3, [pc, #504]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	497b      	ldr	r1, [pc, #492]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d079      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d11e      	bne.n	8004edc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	4b75      	ldr	r3, [pc, #468]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0dc      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004eae:	f000 fa09 	bl	80052c4 <RCC_GetSysClockFreqFromPLLSource>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a70      	ldr	r2, [pc, #448]	; (8005078 <HAL_RCC_ClockConfig+0x264>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d946      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004eba:	4b6e      	ldr	r3, [pc, #440]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d140      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ec6:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ece:	4a69      	ldr	r2, [pc, #420]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ed6:	2380      	movs	r3, #128	; 0x80
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e035      	b.n	8004f48 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee4:	4b63      	ldr	r3, [pc, #396]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d115      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b9      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004efc:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0ad      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0a5      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f1c:	f000 f8b4 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a55      	ldr	r2, [pc, #340]	; (8005078 <HAL_RCC_ClockConfig+0x264>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d90f      	bls.n	8004f48 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f28:	4b52      	ldr	r3, [pc, #328]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f34:	4b4f      	ldr	r3, [pc, #316]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3c:	4a4d      	ldr	r2, [pc, #308]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f48:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 0203 	bic.w	r2, r3, #3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4947      	ldr	r1, [pc, #284]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5a:	f7fc fcbd 	bl	80018d8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f62:	f7fc fcb9 	bl	80018d8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e077      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	4b3e      	ldr	r3, [pc, #248]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 020c 	and.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d1eb      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f90:	4b38      	ldr	r3, [pc, #224]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a37      	ldr	r2, [pc, #220]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d208      	bcs.n	8004fca <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb8:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	492b      	ldr	r1, [pc, #172]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d210      	bcs.n	8004ffa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd8:	4b25      	ldr	r3, [pc, #148]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 020f 	bic.w	r2, r3, #15
 8004fe0:	4923      	ldr	r1, [pc, #140]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_RCC_ClockConfig+0x25c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e036      	b.n	8005068 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005006:	4b1b      	ldr	r3, [pc, #108]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	4918      	ldr	r1, [pc, #96]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005024:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4910      	ldr	r1, [pc, #64]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005034:	4313      	orrs	r3, r2
 8005036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005038:	f000 f826 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <HAL_RCC_ClockConfig+0x260>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	490c      	ldr	r1, [pc, #48]	; (800507c <HAL_RCC_ClockConfig+0x268>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	fa22 f303 	lsr.w	r3, r2, r3
 8005054:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <HAL_RCC_ClockConfig+0x26c>)
 8005056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_RCC_ClockConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fc fbeb 	bl	8001838 <HAL_InitTick>
 8005062:	4603      	mov	r3, r0
 8005064:	73fb      	strb	r3, [r7, #15]

  return status;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40022000 	.word	0x40022000
 8005074:	40021000 	.word	0x40021000
 8005078:	04c4b400 	.word	0x04c4b400
 800507c:	08006ba0 	.word	0x08006ba0
 8005080:	20000004 	.word	0x20000004
 8005084:	20000008 	.word	0x20000008

08005088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	; 0x24
 800508c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005096:	4b3e      	ldr	r3, [pc, #248]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a0:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x34>
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d121      	bne.n	80050fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d11e      	bne.n	80050fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050bc:	4b34      	ldr	r3, [pc, #208]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050c8:	4b31      	ldr	r3, [pc, #196]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e005      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050d8:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050e4:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050f8:	e00a      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d102      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005100:	4b25      	ldr	r3, [pc, #148]	; (8005198 <HAL_RCC_GetSysClockFreq+0x110>)
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e004      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d101      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <HAL_RCC_GetSysClockFreq+0x114>)
 800510e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	2b0c      	cmp	r3, #12
 8005114:	d134      	bne.n	8005180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005116:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0xa6>
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d003      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0xac>
 800512c:	e005      	b.n	800513a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <HAL_RCC_GetSysClockFreq+0x110>)
 8005130:	617b      	str	r3, [r7, #20]
      break;
 8005132:	e005      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <HAL_RCC_GetSysClockFreq+0x114>)
 8005136:	617b      	str	r3, [r7, #20]
      break;
 8005138:	e002      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	617b      	str	r3, [r7, #20]
      break;
 800513e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b13      	ldr	r3, [pc, #76]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	3301      	adds	r3, #1
 800514c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800514e:	4b10      	ldr	r3, [pc, #64]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	fb03 f202 	mul.w	r2, r3, r2
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <HAL_RCC_GetSysClockFreq+0x108>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	0e5b      	lsrs	r3, r3, #25
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	3301      	adds	r3, #1
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005180:	69bb      	ldr	r3, [r7, #24]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	08006bb8 	.word	0x08006bb8
 8005198:	00f42400 	.word	0x00f42400
 800519c:	007a1200 	.word	0x007a1200

080051a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051a6:	681b      	ldr	r3, [r3, #0]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000004 	.word	0x20000004

080051b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051bc:	f7ff fff0 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4904      	ldr	r1, [pc, #16]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021000 	.word	0x40021000
 80051e0:	08006bb0 	.word	0x08006bb0

080051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051e8:	f7ff ffda 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	0adb      	lsrs	r3, r3, #11
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4904      	ldr	r1, [pc, #16]	; (800520c <HAL_RCC_GetPCLK2Freq+0x28>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005204:	4618      	mov	r0, r3
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	08006bb0 	.word	0x08006bb0

08005210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800521c:	4b27      	ldr	r3, [pc, #156]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005228:	f7ff f916 	bl	8004458 <HAL_PWREx_GetVoltageRange>
 800522c:	6178      	str	r0, [r7, #20]
 800522e:	e014      	b.n	800525a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005230:	4b22      	ldr	r3, [pc, #136]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4a21      	ldr	r2, [pc, #132]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523a:	6593      	str	r3, [r2, #88]	; 0x58
 800523c:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005248:	f7ff f906 	bl	8004458 <HAL_PWREx_GetVoltageRange>
 800524c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005260:	d10b      	bne.n	800527a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d913      	bls.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2ba0      	cmp	r3, #160	; 0xa0
 800526c:	d902      	bls.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800526e:	2302      	movs	r3, #2
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	e00d      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005274:	2301      	movs	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e00a      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b7f      	cmp	r3, #127	; 0x7f
 800527e:	d902      	bls.n	8005286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005280:	2302      	movs	r3, #2
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e004      	b.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d101      	bne.n	8005290 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800528c:	2301      	movs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f023 020f 	bic.w	r2, r3, #15
 8005298:	4909      	ldr	r1, [pc, #36]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d001      	beq.n	80052b2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40022000 	.word	0x40022000

080052c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ca:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d00b      	beq.n	80052f2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d825      	bhi.n	800532c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d008      	beq.n	80052f8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d11f      	bne.n	800532c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80052ec:	4b25      	ldr	r3, [pc, #148]	; (8005384 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80052ee:	613b      	str	r3, [r7, #16]
    break;
 80052f0:	e01f      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80052f2:	4b25      	ldr	r3, [pc, #148]	; (8005388 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80052f4:	613b      	str	r3, [r7, #16]
    break;
 80052f6:	e01c      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052f8:	4b21      	ldr	r3, [pc, #132]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005304:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	0a1b      	lsrs	r3, r3, #8
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e005      	b.n	8005320 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	613b      	str	r3, [r7, #16]
    break;
 800532a:	e002      	b.n	8005332 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
    break;
 8005330:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	3301      	adds	r3, #1
 800533e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	fb03 f202 	mul.w	r2, r3, r2
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0e5b      	lsrs	r3, r3, #25
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	3301      	adds	r3, #1
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005372:	683b      	ldr	r3, [r7, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40021000 	.word	0x40021000
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200
 800538c:	08006bb8 	.word	0x08006bb8

08005390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005398:	2300      	movs	r3, #0
 800539a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800539c:	2300      	movs	r3, #0
 800539e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d040      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b0:	2b80      	cmp	r3, #128	; 0x80
 80053b2:	d02a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d825      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d026      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d821      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d006      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80053c4:	2b40      	cmp	r3, #64	; 0x40
 80053c6:	d81d      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d010      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80053d0:	e018      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053d2:	4b89      	ldr	r3, [pc, #548]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a88      	ldr	r2, [pc, #544]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80053d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053dc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053de:	e015      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3304      	adds	r3, #4
 80053e4:	2100      	movs	r1, #0
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fb12 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053f0:	e00c      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3320      	adds	r3, #32
 80053f6:	2100      	movs	r1, #0
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fbfd 	bl	8005bf8 <RCCEx_PLLSAI2_Config>
 80053fe:	4603      	mov	r3, r0
 8005400:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	74fb      	strb	r3, [r7, #19]
      break;
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005412:	4b79      	ldr	r3, [pc, #484]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005418:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005420:	4975      	ldr	r1, [pc, #468]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005422:	4313      	orrs	r3, r2
 8005424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005428:	e001      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d047      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d030      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005448:	d82a      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800544a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544e:	d02a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005454:	d824      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545a:	d008      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d81e      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546a:	d010      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800546c:	e018      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800546e:	4b62      	ldr	r3, [pc, #392]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a61      	ldr	r2, [pc, #388]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005478:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800547a:	e015      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	2100      	movs	r1, #0
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fac4 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800548c:	e00c      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3320      	adds	r3, #32
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fbaf 	bl	8005bf8 <RCCEx_PLLSAI2_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800549e:	e003      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	74fb      	strb	r3, [r7, #19]
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80054a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ae:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	494e      	ldr	r1, [pc, #312]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80054c4:	e001      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 809f 	beq.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d8:	2300      	movs	r3, #0
 80054da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054dc:	4b46      	ldr	r3, [pc, #280]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80054ec:	2300      	movs	r3, #0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f2:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f6:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6593      	str	r3, [r2, #88]	; 0x58
 80054fe:	4b3e      	ldr	r3, [pc, #248]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800550a:	2301      	movs	r3, #1
 800550c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800550e:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3a      	ldr	r2, [pc, #232]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800551a:	f7fc f9dd 	bl	80018d8 <HAL_GetTick>
 800551e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005520:	e009      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005522:	f7fc f9d9 	bl	80018d8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d902      	bls.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	74fb      	strb	r3, [r7, #19]
        break;
 8005534:	e005      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005536:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ef      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d15b      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005548:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01f      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	429a      	cmp	r2, r3
 8005564:	d019      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005566:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005570:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800557a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005582:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005592:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d016      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fc f998 	bl	80018d8 <HAL_GetTick>
 80055a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055aa:	e00b      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7fc f994 	bl	80018d8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d902      	bls.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	74fb      	strb	r3, [r7, #19]
            break;
 80055c2:	e006      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ec      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	4903      	ldr	r1, [pc, #12]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055f0:	e008      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	74bb      	strb	r3, [r7, #18]
 80055f6:	e005      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005604:	7c7b      	ldrb	r3, [r7, #17]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d105      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800560a:	4ba0      	ldr	r3, [pc, #640]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560e:	4a9f      	ldr	r2, [pc, #636]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005614:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005622:	4b9a      	ldr	r3, [pc, #616]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f023 0203 	bic.w	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005630:	4996      	ldr	r1, [pc, #600]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005644:	4b91      	ldr	r3, [pc, #580]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f023 020c 	bic.w	r2, r3, #12
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	498e      	ldr	r1, [pc, #568]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005666:	4b89      	ldr	r3, [pc, #548]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	4985      	ldr	r1, [pc, #532]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005688:	4b80      	ldr	r3, [pc, #512]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800568a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	497d      	ldr	r1, [pc, #500]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056aa:	4b78      	ldr	r3, [pc, #480]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	4974      	ldr	r1, [pc, #464]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056cc:	4b6f      	ldr	r3, [pc, #444]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056da:	496c      	ldr	r1, [pc, #432]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ee:	4b67      	ldr	r3, [pc, #412]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fc:	4963      	ldr	r1, [pc, #396]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005710:	4b5e      	ldr	r3, [pc, #376]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571e:	495b      	ldr	r1, [pc, #364]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005732:	4b56      	ldr	r3, [pc, #344]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	4952      	ldr	r1, [pc, #328]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005754:	4b4d      	ldr	r3, [pc, #308]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	494a      	ldr	r1, [pc, #296]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005776:	4b45      	ldr	r3, [pc, #276]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005784:	4941      	ldr	r1, [pc, #260]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005798:	4b3c      	ldr	r3, [pc, #240]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800579e:	f023 0203 	bic.w	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a6:	4939      	ldr	r1, [pc, #228]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d028      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c8:	4930      	ldr	r1, [pc, #192]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d8:	d106      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057da:	4b2c      	ldr	r3, [pc, #176]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4a2b      	ldr	r2, [pc, #172]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e4:	60d3      	str	r3, [r2, #12]
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f909 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d04d      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005820:	d108      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005822:	4b1a      	ldr	r3, [pc, #104]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005828:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800582a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800582e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005832:	e012      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005834:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583a:	4a14      	ldr	r2, [pc, #80]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005840:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005844:	4b11      	ldr	r3, [pc, #68]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005852:	490e      	ldr	r1, [pc, #56]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800585e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005862:	d106      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
 8005870:	e020      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800587a:	d109      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a02      	ldr	r2, [pc, #8]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005886:	60d3      	str	r3, [r2, #12]
 8005888:	e014      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005898:	d10c      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f8b5 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80058b0:	7cfb      	ldrb	r3, [r7, #19]
 80058b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d028      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c0:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ce:	4947      	ldr	r1, [pc, #284]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058de:	d106      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e0:	4b42      	ldr	r3, [pc, #264]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a41      	ldr	r2, [pc, #260]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ea:	60d3      	str	r3, [r2, #12]
 80058ec:	e011      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f6:	d10c      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	2101      	movs	r1, #1
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f886 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800590e:	7cfb      	ldrb	r3, [r7, #19]
 8005910:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01e      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800591e:	4b33      	ldr	r3, [pc, #204]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592e:	492f      	ldr	r1, [pc, #188]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005940:	d10c      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	2102      	movs	r1, #2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f861 	bl	8005a10 <RCCEx_PLLSAI1_Config>
 800594e:	4603      	mov	r3, r0
 8005950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005952:	7cfb      	ldrb	r3, [r7, #19]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800596a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800596e:	f023 0204 	bic.w	r2, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005978:	491c      	ldr	r1, [pc, #112]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800597a:	4313      	orrs	r3, r2
 800597c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800598c:	4b17      	ldr	r3, [pc, #92]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800598e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005992:	f023 0218 	bic.w	r2, r3, #24
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	4913      	ldr	r1, [pc, #76]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d017      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c0:	490a      	ldr	r1, [pc, #40]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a04      	ldr	r2, [pc, #16]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000

080059f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6013      	str	r3, [r2, #0]
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40021000 	.word	0x40021000

08005a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a1e:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00e      	beq.n	8005a48 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a2a:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0203 	and.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d103      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d142      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	e03f      	b.n	8005ac8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d018      	beq.n	8005a82 <RCCEx_PLLSAI1_Config+0x72>
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d825      	bhi.n	8005aa0 <RCCEx_PLLSAI1_Config+0x90>
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d002      	beq.n	8005a5e <RCCEx_PLLSAI1_Config+0x4e>
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d009      	beq.n	8005a70 <RCCEx_PLLSAI1_Config+0x60>
 8005a5c:	e020      	b.n	8005aa0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a5e:	4b62      	ldr	r3, [pc, #392]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11d      	bne.n	8005aa6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a6e:	e01a      	b.n	8005aa6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a70:	4b5d      	ldr	r3, [pc, #372]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e013      	b.n	8005aaa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a82:	4b59      	ldr	r3, [pc, #356]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10f      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a8e:	4b56      	ldr	r3, [pc, #344]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a9e:	e006      	b.n	8005aae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e004      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005aa6:	bf00      	nop
 8005aa8:	e002      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d108      	bne.n	8005ac8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ab6:	4b4c      	ldr	r3, [pc, #304]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 0203 	bic.w	r2, r3, #3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4949      	ldr	r1, [pc, #292]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8086 	bne.w	8005bdc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a44      	ldr	r2, [pc, #272]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005adc:	f7fb fefc 	bl	80018d8 <HAL_GetTick>
 8005ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ae2:	e009      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ae4:	f7fb fef8 	bl	80018d8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d902      	bls.n	8005af8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	73fb      	strb	r3, [r7, #15]
        break;
 8005af6:	e005      	b.n	8005b04 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af8:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ef      	bne.n	8005ae4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d168      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d113      	bne.n	8005b38 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b10:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	4b35      	ldr	r3, [pc, #212]	; (8005bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6892      	ldr	r2, [r2, #8]
 8005b1c:	0211      	lsls	r1, r2, #8
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68d2      	ldr	r2, [r2, #12]
 8005b22:	06d2      	lsls	r2, r2, #27
 8005b24:	4311      	orrs	r1, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6852      	ldr	r2, [r2, #4]
 8005b2a:	3a01      	subs	r2, #1
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	492d      	ldr	r1, [pc, #180]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	610b      	str	r3, [r1, #16]
 8005b36:	e02d      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d115      	bne.n	8005b6a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b3e:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6892      	ldr	r2, [r2, #8]
 8005b4a:	0211      	lsls	r1, r2, #8
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6912      	ldr	r2, [r2, #16]
 8005b50:	0852      	lsrs	r2, r2, #1
 8005b52:	3a01      	subs	r2, #1
 8005b54:	0552      	lsls	r2, r2, #21
 8005b56:	4311      	orrs	r1, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6852      	ldr	r2, [r2, #4]
 8005b5c:	3a01      	subs	r2, #1
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	430a      	orrs	r2, r1
 8005b62:	4921      	ldr	r1, [pc, #132]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	610b      	str	r3, [r1, #16]
 8005b68:	e014      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b6a:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6892      	ldr	r2, [r2, #8]
 8005b76:	0211      	lsls	r1, r2, #8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6952      	ldr	r2, [r2, #20]
 8005b7c:	0852      	lsrs	r2, r2, #1
 8005b7e:	3a01      	subs	r2, #1
 8005b80:	0652      	lsls	r2, r2, #25
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6852      	ldr	r2, [r2, #4]
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0112      	lsls	r2, r2, #4
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4916      	ldr	r1, [pc, #88]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fb fe9a 	bl	80018d8 <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba6:	e009      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba8:	f7fb fe96 	bl	80018d8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d902      	bls.n	8005bbc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bba:	e005      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ef      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	4904      	ldr	r1, [pc, #16]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000
 8005bec:	07ff800f 	.word	0x07ff800f
 8005bf0:	ff9f800f 	.word	0xff9f800f
 8005bf4:	f9ff800f 	.word	0xf9ff800f

08005bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c06:	4b72      	ldr	r3, [pc, #456]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00e      	beq.n	8005c30 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c12:	4b6f      	ldr	r3, [pc, #444]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0203 	and.w	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d103      	bne.n	8005c2a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
       ||
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d142      	bne.n	8005cb0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	e03f      	b.n	8005cb0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d018      	beq.n	8005c6a <RCCEx_PLLSAI2_Config+0x72>
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d825      	bhi.n	8005c88 <RCCEx_PLLSAI2_Config+0x90>
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d002      	beq.n	8005c46 <RCCEx_PLLSAI2_Config+0x4e>
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d009      	beq.n	8005c58 <RCCEx_PLLSAI2_Config+0x60>
 8005c44:	e020      	b.n	8005c88 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c46:	4b62      	ldr	r3, [pc, #392]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d11d      	bne.n	8005c8e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c56:	e01a      	b.n	8005c8e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c58:	4b5d      	ldr	r3, [pc, #372]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c68:	e013      	b.n	8005c92 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c6a:	4b59      	ldr	r3, [pc, #356]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c76:	4b56      	ldr	r3, [pc, #344]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c86:	e006      	b.n	8005c96 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8c:	e004      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e002      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c92:	bf00      	nop
 8005c94:	e000      	b.n	8005c98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005c9e:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4949      	ldr	r1, [pc, #292]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 8086 	bne.w	8005dc4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cb8:	4b45      	ldr	r3, [pc, #276]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a44      	ldr	r2, [pc, #272]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc4:	f7fb fe08 	bl	80018d8 <HAL_GetTick>
 8005cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cca:	e009      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ccc:	f7fb fe04 	bl	80018d8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d902      	bls.n	8005ce0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8005cde:	e005      	b.n	8005cec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ef      	bne.n	8005ccc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d168      	bne.n	8005dc4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d113      	bne.n	8005d20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cf8:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	4b35      	ldr	r3, [pc, #212]	; (8005dd4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68d2      	ldr	r2, [r2, #12]
 8005d0a:	06d2      	lsls	r2, r2, #27
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	3a01      	subs	r2, #1
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	430a      	orrs	r2, r1
 8005d18:	492d      	ldr	r1, [pc, #180]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	614b      	str	r3, [r1, #20]
 8005d1e:	e02d      	b.n	8005d7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d115      	bne.n	8005d52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d26:	4b2a      	ldr	r3, [pc, #168]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6892      	ldr	r2, [r2, #8]
 8005d32:	0211      	lsls	r1, r2, #8
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6912      	ldr	r2, [r2, #16]
 8005d38:	0852      	lsrs	r2, r2, #1
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	0552      	lsls	r2, r2, #21
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6852      	ldr	r2, [r2, #4]
 8005d44:	3a01      	subs	r2, #1
 8005d46:	0112      	lsls	r2, r2, #4
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	4921      	ldr	r1, [pc, #132]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	614b      	str	r3, [r1, #20]
 8005d50:	e014      	b.n	8005d7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d52:	4b1f      	ldr	r3, [pc, #124]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	0211      	lsls	r1, r2, #8
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6952      	ldr	r2, [r2, #20]
 8005d64:	0852      	lsrs	r2, r2, #1
 8005d66:	3a01      	subs	r2, #1
 8005d68:	0652      	lsls	r2, r2, #25
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	430a      	orrs	r2, r1
 8005d76:	4916      	ldr	r1, [pc, #88]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fb fda6 	bl	80018d8 <HAL_GetTick>
 8005d8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d8e:	e009      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d90:	f7fb fda2 	bl	80018d8 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d902      	bls.n	8005da4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	73fb      	strb	r3, [r7, #15]
          break;
 8005da2:	e005      	b.n	8005db0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ef      	beq.n	8005d90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	4904      	ldr	r1, [pc, #16]	; (8005dd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	07ff800f 	.word	0x07ff800f
 8005dd8:	ff9f800f 	.word	0xff9f800f
 8005ddc:	f9ff800f 	.word	0xf9ff800f

08005de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e095      	b.n	8005f1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e02:	d009      	beq.n	8005e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	61da      	str	r2, [r3, #28]
 8005e0a:	e005      	b.n	8005e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fb fab4 	bl	80013a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e58:	d902      	bls.n	8005e60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e002      	b.n	8005e66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e6e:	d007      	beq.n	8005e80 <HAL_SPI_Init+0xa0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e78:	d002      	beq.n	8005e80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec2:	ea42 0103 	orr.w	r1, r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	f003 0204 	and.w	r2, r3, #4
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005efc:	ea42 0103 	orr.w	r1, r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e042      	b.n	8005fbe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fa9e 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f82d 	bl	8005fc8 <UART_SetConfig>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e022      	b.n	8005fbe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d002      	beq.n	8005f86 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fb1d 	bl	80065c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fba4 	bl	8006704 <UART_CheckIdleState>
 8005fbc:	4603      	mov	r3, r0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fcc:	b08c      	sub	sp, #48	; 0x30
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4baa      	ldr	r3, [pc, #680]	; (80062a0 <UART_SetConfig+0x2d8>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	6812      	ldr	r2, [r2, #0]
 8005ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006000:	430b      	orrs	r3, r1
 8006002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a9f      	ldr	r2, [pc, #636]	; (80062a4 <UART_SetConfig+0x2dc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006030:	4313      	orrs	r3, r2
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800603e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006048:	430b      	orrs	r3, r1
 800604a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f023 010f 	bic.w	r1, r3, #15
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a90      	ldr	r2, [pc, #576]	; (80062a8 <UART_SetConfig+0x2e0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d125      	bne.n	80060b8 <UART_SetConfig+0xf0>
 800606c:	4b8f      	ldr	r3, [pc, #572]	; (80062ac <UART_SetConfig+0x2e4>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b03      	cmp	r3, #3
 8006078:	d81a      	bhi.n	80060b0 <UART_SetConfig+0xe8>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0xb8>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006091 	.word	0x08006091
 8006084:	080060a1 	.word	0x080060a1
 8006088:	08006099 	.word	0x08006099
 800608c:	080060a9 	.word	0x080060a9
 8006090:	2301      	movs	r3, #1
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e116      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006098:	2302      	movs	r3, #2
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609e:	e112      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a6:	e10e      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ae:	e10a      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e106      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a7c      	ldr	r2, [pc, #496]	; (80062b0 <UART_SetConfig+0x2e8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d138      	bne.n	8006134 <UART_SetConfig+0x16c>
 80060c2:	4b7a      	ldr	r3, [pc, #488]	; (80062ac <UART_SetConfig+0x2e4>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c8:	f003 030c 	and.w	r3, r3, #12
 80060cc:	2b0c      	cmp	r3, #12
 80060ce:	d82d      	bhi.n	800612c <UART_SetConfig+0x164>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x110>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	0800610d 	.word	0x0800610d
 80060dc:	0800612d 	.word	0x0800612d
 80060e0:	0800612d 	.word	0x0800612d
 80060e4:	0800612d 	.word	0x0800612d
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	0800612d 	.word	0x0800612d
 80060f0:	0800612d 	.word	0x0800612d
 80060f4:	0800612d 	.word	0x0800612d
 80060f8:	08006115 	.word	0x08006115
 80060fc:	0800612d 	.word	0x0800612d
 8006100:	0800612d 	.word	0x0800612d
 8006104:	0800612d 	.word	0x0800612d
 8006108:	08006125 	.word	0x08006125
 800610c:	2300      	movs	r3, #0
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006112:	e0d8      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006114:	2302      	movs	r3, #2
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611a:	e0d4      	b.n	80062c6 <UART_SetConfig+0x2fe>
 800611c:	2304      	movs	r3, #4
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006122:	e0d0      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612a:	e0cc      	b.n	80062c6 <UART_SetConfig+0x2fe>
 800612c:	2310      	movs	r3, #16
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e0c8      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a5e      	ldr	r2, [pc, #376]	; (80062b4 <UART_SetConfig+0x2ec>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d125      	bne.n	800618a <UART_SetConfig+0x1c2>
 800613e:	4b5b      	ldr	r3, [pc, #364]	; (80062ac <UART_SetConfig+0x2e4>)
 8006140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006144:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d016      	beq.n	800617a <UART_SetConfig+0x1b2>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d818      	bhi.n	8006182 <UART_SetConfig+0x1ba>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d00a      	beq.n	800616a <UART_SetConfig+0x1a2>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d814      	bhi.n	8006182 <UART_SetConfig+0x1ba>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <UART_SetConfig+0x19a>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d008      	beq.n	8006172 <UART_SetConfig+0x1aa>
 8006160:	e00f      	b.n	8006182 <UART_SetConfig+0x1ba>
 8006162:	2300      	movs	r3, #0
 8006164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006168:	e0ad      	b.n	80062c6 <UART_SetConfig+0x2fe>
 800616a:	2302      	movs	r3, #2
 800616c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006170:	e0a9      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006172:	2304      	movs	r3, #4
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006178:	e0a5      	b.n	80062c6 <UART_SetConfig+0x2fe>
 800617a:	2308      	movs	r3, #8
 800617c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006180:	e0a1      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006182:	2310      	movs	r3, #16
 8006184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006188:	e09d      	b.n	80062c6 <UART_SetConfig+0x2fe>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4a      	ldr	r2, [pc, #296]	; (80062b8 <UART_SetConfig+0x2f0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d125      	bne.n	80061e0 <UART_SetConfig+0x218>
 8006194:	4b45      	ldr	r3, [pc, #276]	; (80062ac <UART_SetConfig+0x2e4>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800619e:	2bc0      	cmp	r3, #192	; 0xc0
 80061a0:	d016      	beq.n	80061d0 <UART_SetConfig+0x208>
 80061a2:	2bc0      	cmp	r3, #192	; 0xc0
 80061a4:	d818      	bhi.n	80061d8 <UART_SetConfig+0x210>
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d00a      	beq.n	80061c0 <UART_SetConfig+0x1f8>
 80061aa:	2b80      	cmp	r3, #128	; 0x80
 80061ac:	d814      	bhi.n	80061d8 <UART_SetConfig+0x210>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <UART_SetConfig+0x1f0>
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d008      	beq.n	80061c8 <UART_SetConfig+0x200>
 80061b6:	e00f      	b.n	80061d8 <UART_SetConfig+0x210>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061be:	e082      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80061c0:	2302      	movs	r3, #2
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c6:	e07e      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ce:	e07a      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d6:	e076      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061de:	e072      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a35      	ldr	r2, [pc, #212]	; (80062bc <UART_SetConfig+0x2f4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d12a      	bne.n	8006240 <UART_SetConfig+0x278>
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <UART_SetConfig+0x2e4>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f8:	d01a      	beq.n	8006230 <UART_SetConfig+0x268>
 80061fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061fe:	d81b      	bhi.n	8006238 <UART_SetConfig+0x270>
 8006200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006204:	d00c      	beq.n	8006220 <UART_SetConfig+0x258>
 8006206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620a:	d815      	bhi.n	8006238 <UART_SetConfig+0x270>
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <UART_SetConfig+0x250>
 8006210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006214:	d008      	beq.n	8006228 <UART_SetConfig+0x260>
 8006216:	e00f      	b.n	8006238 <UART_SetConfig+0x270>
 8006218:	2300      	movs	r3, #0
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800621e:	e052      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006220:	2302      	movs	r3, #2
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006226:	e04e      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622e:	e04a      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006236:	e046      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623e:	e042      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <UART_SetConfig+0x2dc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d13a      	bne.n	80062c0 <UART_SetConfig+0x2f8>
 800624a:	4b18      	ldr	r3, [pc, #96]	; (80062ac <UART_SetConfig+0x2e4>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006258:	d01a      	beq.n	8006290 <UART_SetConfig+0x2c8>
 800625a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800625e:	d81b      	bhi.n	8006298 <UART_SetConfig+0x2d0>
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006264:	d00c      	beq.n	8006280 <UART_SetConfig+0x2b8>
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	d815      	bhi.n	8006298 <UART_SetConfig+0x2d0>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <UART_SetConfig+0x2b0>
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d008      	beq.n	8006288 <UART_SetConfig+0x2c0>
 8006276:	e00f      	b.n	8006298 <UART_SetConfig+0x2d0>
 8006278:	2300      	movs	r3, #0
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e022      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006280:	2302      	movs	r3, #2
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e01e      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e01a      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006296:	e016      	b.n	80062c6 <UART_SetConfig+0x2fe>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629e:	e012      	b.n	80062c6 <UART_SetConfig+0x2fe>
 80062a0:	cfff69f3 	.word	0xcfff69f3
 80062a4:	40008000 	.word	0x40008000
 80062a8:	40013800 	.word	0x40013800
 80062ac:	40021000 	.word	0x40021000
 80062b0:	40004400 	.word	0x40004400
 80062b4:	40004800 	.word	0x40004800
 80062b8:	40004c00 	.word	0x40004c00
 80062bc:	40005000 	.word	0x40005000
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4aae      	ldr	r2, [pc, #696]	; (8006584 <UART_SetConfig+0x5bc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	f040 8097 	bne.w	8006400 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d823      	bhi.n	8006322 <UART_SetConfig+0x35a>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x318>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006323 	.word	0x08006323
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006323 	.word	0x08006323
 80062f0:	08006313 	.word	0x08006313
 80062f4:	08006323 	.word	0x08006323
 80062f8:	08006323 	.word	0x08006323
 80062fc:	08006323 	.word	0x08006323
 8006300:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fe ff58 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8006308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800630a:	e010      	b.n	800632e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <UART_SetConfig+0x5c0>)
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006310:	e00d      	b.n	800632e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fe feb9 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006318:	e009      	b.n	800632e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006320:	e005      	b.n	800632e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800632c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 8130 	beq.w	8006596 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	4a94      	ldr	r2, [pc, #592]	; (800658c <UART_SetConfig+0x5c4>)
 800633c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006340:	461a      	mov	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	fbb3 f3f2 	udiv	r3, r3, r2
 8006348:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	429a      	cmp	r2, r3
 8006358:	d305      	bcc.n	8006366 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	429a      	cmp	r2, r3
 8006364:	d903      	bls.n	800636e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800636c:	e113      	b.n	8006596 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	2200      	movs	r2, #0
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	60fa      	str	r2, [r7, #12]
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	4a84      	ldr	r2, [pc, #528]	; (800658c <UART_SetConfig+0x5c4>)
 800637c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006380:	b29b      	uxth	r3, r3
 8006382:	2200      	movs	r2, #0
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006390:	f7f9 ff34 	bl	80001fc <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	f04f 0300 	mov.w	r3, #0
 80063a4:	020b      	lsls	r3, r1, #8
 80063a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063aa:	0202      	lsls	r2, r0, #8
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	6849      	ldr	r1, [r1, #4]
 80063b0:	0849      	lsrs	r1, r1, #1
 80063b2:	2000      	movs	r0, #0
 80063b4:	460c      	mov	r4, r1
 80063b6:	4605      	mov	r5, r0
 80063b8:	eb12 0804 	adds.w	r8, r2, r4
 80063bc:	eb43 0905 	adc.w	r9, r3, r5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	469a      	mov	sl, r3
 80063c8:	4693      	mov	fp, r2
 80063ca:	4652      	mov	r2, sl
 80063cc:	465b      	mov	r3, fp
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7f9 ff13 	bl	80001fc <__aeabi_uldivmod>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4613      	mov	r3, r2
 80063dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e4:	d308      	bcc.n	80063f8 <UART_SetConfig+0x430>
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ec:	d204      	bcs.n	80063f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	e0ce      	b.n	8006596 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063fe:	e0ca      	b.n	8006596 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	d166      	bne.n	80064d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800640a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800640e:	2b08      	cmp	r3, #8
 8006410:	d827      	bhi.n	8006462 <UART_SetConfig+0x49a>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x450>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	0800643d 	.word	0x0800643d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800644d 	.word	0x0800644d
 8006424:	08006463 	.word	0x08006463
 8006428:	08006453 	.word	0x08006453
 800642c:	08006463 	.word	0x08006463
 8006430:	08006463 	.word	0x08006463
 8006434:	08006463 	.word	0x08006463
 8006438:	0800645b 	.word	0x0800645b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800643c:	f7fe febc 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8006440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006442:	e014      	b.n	800646e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006444:	f7fe fece 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800644a:	e010      	b.n	800646e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644c:	4b4e      	ldr	r3, [pc, #312]	; (8006588 <UART_SetConfig+0x5c0>)
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006450:	e00d      	b.n	800646e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006452:	f7fe fe19 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8006456:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006458:	e009      	b.n	800646e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006460:	e005      	b.n	800646e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800646c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8090 	beq.w	8006596 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	4a44      	ldr	r2, [pc, #272]	; (800658c <UART_SetConfig+0x5c4>)
 800647c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006480:	461a      	mov	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	fbb3 f3f2 	udiv	r3, r3, r2
 8006488:	005a      	lsls	r2, r3, #1
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d916      	bls.n	80064d0 <UART_SetConfig+0x508>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d212      	bcs.n	80064d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f023 030f 	bic.w	r3, r3, #15
 80064b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	b29a      	uxth	r2, r3
 80064c0:	8bfb      	ldrh	r3, [r7, #30]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	8bfa      	ldrh	r2, [r7, #30]
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	e062      	b.n	8006596 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064d6:	e05e      	b.n	8006596 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d828      	bhi.n	8006532 <UART_SetConfig+0x56a>
 80064e0:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <UART_SetConfig+0x520>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	08006533 	.word	0x08006533
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006533 	.word	0x08006533
 8006500:	08006533 	.word	0x08006533
 8006504:	08006533 	.word	0x08006533
 8006508:	0800652b 	.word	0x0800652b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fe fe54 	bl	80051b8 <HAL_RCC_GetPCLK1Freq>
 8006510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006512:	e014      	b.n	800653e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006514:	f7fe fe66 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800651a:	e010      	b.n	800653e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <UART_SetConfig+0x5c0>)
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006520:	e00d      	b.n	800653e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fe fdb1 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006528:	e009      	b.n	800653e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006530:	e005      	b.n	800653e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800653c:	bf00      	nop
    }

    if (pclk != 0U)
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d028      	beq.n	8006596 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	4a10      	ldr	r2, [pc, #64]	; (800658c <UART_SetConfig+0x5c4>)
 800654a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654e:	461a      	mov	r2, r3
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	fbb3 f2f2 	udiv	r2, r3, r2
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	441a      	add	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	fbb2 f3f3 	udiv	r3, r2, r3
 8006566:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b0f      	cmp	r3, #15
 800656c:	d910      	bls.n	8006590 <UART_SetConfig+0x5c8>
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d20c      	bcs.n	8006590 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	b29a      	uxth	r2, r3
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e009      	b.n	8006596 <UART_SetConfig+0x5ce>
 8006582:	bf00      	nop
 8006584:	40008000 	.word	0x40008000
 8006588:	00f42400 	.word	0x00f42400
 800658c:	08006be8 	.word	0x08006be8
      }
      else
      {
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2201      	movs	r2, #1
 800659a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2200      	movs	r2, #0
 80065b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80065b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3730      	adds	r7, #48	; 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066be:	d10a      	bne.n	80066d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006714:	f7fb f8e0 	bl	80018d8 <HAL_GetTick>
 8006718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b08      	cmp	r3, #8
 8006726:	d10e      	bne.n	8006746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f82f 	bl	800679a <UART_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e025      	b.n	8006792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b04      	cmp	r3, #4
 8006752:	d10e      	bne.n	8006772 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f819 	bl	800679a <UART_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e00f      	b.n	8006792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b09c      	sub	sp, #112	; 0x70
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067aa:	e0a9      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	f000 80a5 	beq.w	8006900 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fb f88f 	bl	80018d8 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <UART_WaitOnFlagUntilTimeout+0x32>
 80067c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d140      	bne.n	800684e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067e0:	667b      	str	r3, [r7, #100]	; 0x64
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e6      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3308      	adds	r3, #8
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	663b      	str	r3, [r7, #96]	; 0x60
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800681e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800682c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e069      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d051      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686a:	d149      	bne.n	8006900 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006874:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800688a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
 8006896:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800689a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e6      	bne.n	8006876 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	613b      	str	r3, [r7, #16]
   return(result);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f023 0301 	bic.w	r3, r3, #1
 80068be:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068c8:	623a      	str	r2, [r7, #32]
 80068ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	69f9      	ldr	r1, [r7, #28]
 80068ce:	6a3a      	ldr	r2, [r7, #32]
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e010      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	429a      	cmp	r2, r3
 800691c:	f43f af46 	beq.w	80067ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3770      	adds	r7, #112	; 0x70
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UARTEx_DisableFifoMode+0x16>
 800693c:	2302      	movs	r3, #2
 800693e:	e027      	b.n	8006990 <HAL_UARTEx_DisableFifoMode+0x66>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	; 0x24
 800694c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800696e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e02d      	b.n	8006a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	; 0x24
 80069c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	430a      	orrs	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f84f 	bl	8006a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e02d      	b.n	8006a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2224      	movs	r2, #36	; 0x24
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0201 	bic.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f811 	bl	8006a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d108      	bne.n	8006ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ab4:	e031      	b.n	8006b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aba:	2308      	movs	r3, #8
 8006abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	0e5b      	lsrs	r3, r3, #25
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	0f5b      	lsrs	r3, r3, #29
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	7b3a      	ldrb	r2, [r7, #12]
 8006ae2:	4911      	ldr	r1, [pc, #68]	; (8006b28 <UARTEx_SetNbDataToProcess+0x94>)
 8006ae4:	5c8a      	ldrb	r2, [r1, r2]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aea:	7b3a      	ldrb	r2, [r7, #12]
 8006aec:	490f      	ldr	r1, [pc, #60]	; (8006b2c <UARTEx_SetNbDataToProcess+0x98>)
 8006aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	7b7a      	ldrb	r2, [r7, #13]
 8006b00:	4909      	ldr	r1, [pc, #36]	; (8006b28 <UARTEx_SetNbDataToProcess+0x94>)
 8006b02:	5c8a      	ldrb	r2, [r1, r2]
 8006b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b08:	7b7a      	ldrb	r2, [r7, #13]
 8006b0a:	4908      	ldr	r1, [pc, #32]	; (8006b2c <UARTEx_SetNbDataToProcess+0x98>)
 8006b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	08006c00 	.word	0x08006c00
 8006b2c:	08006c08 	.word	0x08006c08

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	4d0d      	ldr	r5, [pc, #52]	; (8006b68 <__libc_init_array+0x38>)
 8006b34:	4c0d      	ldr	r4, [pc, #52]	; (8006b6c <__libc_init_array+0x3c>)
 8006b36:	1b64      	subs	r4, r4, r5
 8006b38:	10a4      	asrs	r4, r4, #2
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	4d0b      	ldr	r5, [pc, #44]	; (8006b70 <__libc_init_array+0x40>)
 8006b42:	4c0c      	ldr	r4, [pc, #48]	; (8006b74 <__libc_init_array+0x44>)
 8006b44:	f000 f820 	bl	8006b88 <_init>
 8006b48:	1b64      	subs	r4, r4, r5
 8006b4a:	10a4      	asrs	r4, r4, #2
 8006b4c:	2600      	movs	r6, #0
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	08006c18 	.word	0x08006c18
 8006b6c:	08006c18 	.word	0x08006c18
 8006b70:	08006c18 	.word	0x08006c18
 8006b74:	08006c1c 	.word	0x08006c1c

08006b78 <memset>:
 8006b78:	4402      	add	r2, r0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d100      	bne.n	8006b82 <memset+0xa>
 8006b80:	4770      	bx	lr
 8006b82:	f803 1b01 	strb.w	r1, [r3], #1
 8006b86:	e7f9      	b.n	8006b7c <memset+0x4>

08006b88 <_init>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr

08006b94 <_fini>:
 8006b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b96:	bf00      	nop
 8006b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9a:	bc08      	pop	{r3}
 8006b9c:	469e      	mov	lr, r3
 8006b9e:	4770      	bx	lr
